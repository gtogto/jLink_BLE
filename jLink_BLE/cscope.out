cscope 15 C:\(201)__LMS_UWB_2021\LMS_UWB_2021"               0000512563
	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\TEIA_var.h

6 #i‚de‡
SEWIO_VAR_H_INCLUDED


7 
	#SEWIO_VAR_H_INCLUDED


	)

9 
	~<°döt.h
>

10 
	~<°dboﬁ.h
>

11 
	~"∂©f‹m/£âög.h
"

15 
öt32_t
 
	mãm≥øtuª_MCU
;

16 
uöt32_t
 
	m√ed_to_mósuª_b©ãry
;

17 
uöt8_t
 
	mlowb©tcou¡
;

18 
uöt8_t
 
	ma˘uÆ_b©t_vﬁège_øw
;

19 
uöt8_t
 
	ma˘uÆ_b©t_vﬁège_≥r˚¡
;

20 
uöt8_t
 
	m∂©f‹m
;

21 
uöt16_t
 
	mhw_vî
;

22 
uöt16_t
 
	mfw_vî
;

23 vﬁ©ûê
boﬁ
 
	mis_shutdown
;

24 } 
	tsy°emVÆues_t
;

25 
sy°emVÆues_t
 
	gsy°emVÆues
;

29 
öt16_t
 
	mx_axis
;

30 
öt16_t
 
	my_axis
;

31 
öt16_t
 
	mz_axis
;

32 } 
	t£ns_off£ts_t
;

34 
__©åibuã__
((
	t∑cked
, 
	tÆig√d
(2))){

35 
uöt32_t
 
öô
;

36 
uöt8_t
 
ch™√l
;

37 
uöt8_t
 
RF_¥ofûe
;

38 
uöt8_t
 
d©a_øã
;

39 
uöt8_t
 
¥ómbÀ
;

40 
uöt8_t
 
¥f
;

41 
uöt8_t
 
¥ómCode
;

42 
uöt8_t
 
nSfd
;

43 
uöt8_t
 
u£_øndom_devüti⁄
;

44 
uöt8_t
 
acc_mode
;

45 
uöt16_t
 
acc_£ns
;

46 
uöt32_t
 
u£r_ª‰esh_øã
;

47 
uöt32_t
 
no_mŸi⁄_ª‰esh_øã
;

48 
uöt32_t
 
rx_≥riod
;

49 
uöt32_t
 
rx_duøti⁄
;

50 
uöt32_t
 
tx_pwr_Àvñ
;

51 
uöt8_t
 
Eblök_c⁄t
;

52 
uöt8_t
 
£ns_c‹r_d©a
;

53 
uöt8_t
 
GYRO_FS
;

54 
uöt8_t
 
ACC_FS
;

55 
uöt8_t
 
BARO_£âög
;

56 
uöt8_t
 
AHRS_íabÀ
;

57 
uöt8_t
 
mag_ˇlib_mode
;

58 
uöt16_t
 
geo_mag_Êux
;

59 
£ns_off£ts_t
 
acc_off£t
;

60 
£ns_off£ts_t
 
mag_off£t
;

61 
£ns_off£ts_t
 
gyro_off£t
;

62 
uöt16_t
 
¸c
;

63 
	}
} 
	tu£rD©a_t
;

65 
u£rD©a_t
 
	gu£rD©a
;

69 
uöt32_t
 
	mRe‰eshR©e_us
;

70 
uöt32_t
 
	mRe‰eshR©e_ms
;

71 
uöt32_t
 
	mRe‰eshR©e_tck
;

72 
uöt32_t
 
	mRRwaôTime_tck
;

73 
uöt32_t
 
	mRRwaôTime_tck_a˘uÆ
;

74 
uöt32_t
 
	møndom_º_vÆue_a˘uÆ
;

75 
uöt32_t
 
	møndom_º_vÆue_ﬁd
;

76 
uöt32_t
 
	møndom_º_devüti⁄_tck
;

77 
uöt32_t
 
	møndom_º_devüti⁄_hÆf_tck
;

78 
öt32_t
 
	mdiff_‰om_RR
;

79 
uöt32_t
 
	mRR_ˇlcuœãd
;

82 
uöt32_t
 
	mRe‰eshR©e_no_mŸ_ms
;

83 
uöt32_t
 
	mRe‰eshR©e_no_mŸ_tck
;

86 
uöt32_t
 
	mRR_ö_¶ìp_ˇlcuœãd
;

89 
uöt32_t
 
	mœ°_Blök_time°amp
;

91 
uöt32_t
 
	mno_mŸi⁄_dñay
;

93 
uöt32_t
 
	mtcks_to_RX
;

94 
uöt32_t
 
	mRX_≥riod_ms
;

95 
uöt32_t
 
	mRX_≥riod_tck
;

96 
uöt32_t
 
	mRX_duøti⁄_ms
;

97 
uöt32_t
 
	mœ°_RX_time°amp
;

98 
boﬁ
 
	mRX_ªquúed
;

99 
boﬁ
 
	møndom_dev_í
;

100 } 
	ttdﬂTimög_t
;

101 
tdﬂTimög_t
 
	gtdﬂTimög
;

104 
uöt32_t
 
	mno_mŸi⁄_cy˛e
;

105 
uöt32_t
 
	m£nd_Eblök_a·î_RR
;

106 
uöt32_t
 
	mRR_cou¡î
;

107 
uöt32_t
 
	möf_b_cou¡î
;

108 
uöt8_t
 
	m£q_num
;

109 
boﬁ
 
	mis_fú°_blök
;

110 
boﬁ
 
	mis_öfo_blök_ªque°ed
;

111 } 
	ttdﬂVÆues_t
;

116 
boﬁ
 
	mmŸi⁄_a˘i⁄_dëe˘ed
;

117 
boﬁ
 
	mpushbuâ⁄_¥es£d
;

118 
boﬁ
 
	mblök_£¡
;

119 
boﬁ
 
	mUWB_msg_ª˚ived
;

120 
boﬁ
 
	mwake_up
;

121 
boﬁ
 
	mRTC_CMP0_achõved
;

122 
boﬁ
 
	mRTC_CMP1_achõved
;

123 
boﬁ
 
	mUART_r°_ªquúed
;

124 }
	töt_Êag_t
;

126 
öt_Êag_t
 
	göt_Êag
;

142 
uöt8_t
 
	mfcode
;

143 
uöt8_t
 
	mde°Addr
[
ADDR_BYTE_SIZE
];

144 
uöt8_t
 
	m£qNum
;

145 
uöt8_t
 
	mch™√l
;

146 
uöt8_t
 
	md©¨©e
;

147 
uöt8_t
 
	m¥ómbÀ
;

148 
uöt8_t
 
	m¥f
;

149 
uöt8_t
 
	m¥ómCode
;

150 
uöt8_t
 
	mnSfd
;

151 
uöt8_t
 
	møndomDev
;

152 
uöt8_t
 
	macc_mode
;

153 
uöt8_t
 
	mEblökC⁄t
;

154 
uöt8_t
 
	mAHRS_íabÀ
;

155 
uöt8_t
 
	mRR
[4];

156 
uöt8_t
 
	mno_mŸ_RR
[4];

157 
uöt8_t
 
	mtx_powî
[4];

158 
uöt8_t
 
	mMCR_£ns
[2];

159 
uöt8_t
 
	mIMU_FS_ønge
;

160 
uöt8_t
 
	mRX_≥riod
[4];

161 
uöt8_t
 
	mRX_duøti⁄
[2];

162 
uöt8_t
 
	mBARO_£âög
;

163 
uöt8_t
 
	mCALIB_START
;

164 
uöt8_t
 
	m¸c
[2];

165 } 
	ttdﬂ_uwb_c⁄f_msg
;

175 
uöt64_t
 
	mthis_èg_MACaddªss
;

176 
uöt8_t
 
	mch™√l
;

177 
uöt8_t
 
	mRF_¥ofûe
;

178 
uöt8_t
 
	md©a_øã
;

179 
uöt8_t
 
	m¥ómbÀ
;

180 
uöt8_t
 
	m¥f
;

181 
uöt8_t
 
	m¥ómCode
;

182 
uöt8_t
 
	mnSfd
;

183 
uöt32_t
 
	mu£_øndom_devüti⁄
;

184 
uöt32_t
 
	m‰equícy_of_Eblök
;

185 
uöt8_t
 
	mmŸi⁄_c⁄åﬁ_mode
;

186 
uöt32_t
 
	mª‰esh_øã_ms
;

187 
uöt32_t
 
	mno_mŸi⁄_ª‰esh_øã
;

188 
uöt32_t
 
	mRX_≥riod_ms
;

189 
uöt32_t
 
	mRX_duøti⁄_ms
;

190 
uöt32_t
 
	mtx_pwr_Àvñ
;

191 
uöt8_t
 
	mtx_PG_dñay
;

192 } 
	ttdﬂP¨amëîs_t
;

193 
tdﬂP¨amëîs_t
 
	gtdﬂP¨amëîs
;

199 
öt16_t
 
	mx_axis
;

200 
öt16_t
 
	my_axis
;

201 
öt16_t
 
	mz_axis
;

202 } 
	t£ns3D_d©a_t
;

205 
öt8_t
 
	mq0
;

206 
öt8_t
 
	mq1
;

207 
öt8_t
 
	mq2
;

208 
öt8_t
 
	mq3
;

209 }
	tqu©Q8_t
;

212 
	mq0
;

213 
	mq1
;

214 
	mq2
;

215 
	mq3
;

216 }
	tqu©_Êﬂt_t
;

219 
uöt8_t
 
	myaw
;

220 
uöt8_t
 
	mpôch
;

221 
uöt8_t
 
	mrﬁl
;

222 }
	tTB_™gÀs_t
;

225 
uöt8_t
 
	mACC_mou¡ed
;

226 
boﬁ
 
	mMAG_mou¡ed
;

227 
boﬁ
 
	mGYRO_mou¡ed
;

228 
boﬁ
 
	mBARO_mou¡ed
;

229 
uöt8_t
 
	mEBlök_c⁄t
;

230 
uöt8_t
 
	m£ns_c‹r_d©a
;

231 
boﬁ
 
	mIMU_ju°_ˇlib
;

232 
boﬁ
 
	mMAG_ju°_ˇlib
;

233 
uöt8_t
 
	mAHRS_íabÀ
;

234 
uöt8_t
 
	mmŸi⁄_c⁄åﬁ_mode
;

235 
uöt16_t
 
	mwakeup_thªshﬁd
 ;

236 
uöt8_t
 
	mgyro_FS
;

237 
uöt8_t
 
	macc_FS
;

238 
uöt8_t
 
	mBARO_£âög
;

239 
boﬁ
 
	mBARO_c⁄t_mode
;

240 
boﬁ
 
	mMAG_c⁄t_mode
;

241 
uöt8_t
 
	mmag_ˇlib_mode
;

242 
uöt8_t
 
	mACC_LP_≥riod
;

243 } 
	t£ns‹s_∑øms_t
;

244 
£ns‹s_∑øms_t
 
	g£ns‹s_∑øms
;

251 
£ns3D_d©a_t
 
	macc_off£ts
;

252 
£ns3D_d©a_t
 
	mmag_off£ts
;

253 
uöt16_t
 
	mgeo_mag_Êux
;

254 
£ns3D_d©a_t
 
	mgyro_off£ts
;

255 
£ns3D_d©a_t
 
	macc_off£ts_SC
;

256 
£ns3D_d©a_t
 
	mgyro_off£ts_SC
;

257 
£ns3D_d©a_t
 
	macc_d©a
;

258 
£ns3D_d©a_t
 
	mmag_d©a
;

259 
£ns3D_d©a_t
 
	mgyro_d©a
;

260 
uöt32_t
 
	mb¨o_d©a
;

261 
öt32_t
 
	mb¨o_off£t
;

262 
uöt8_t
 
	mãmp_d©a
;

263 
TB_™gÀs_t
 
	m™gÀs
;

264 
qu©Q8_t
 
	mqu©îni⁄
;

265 
qu©_Êﬂt_t
 
	mf_qu©îni⁄
;

266 } 
	t£ns‹s_d©a_t
;

267 
£ns‹s_d©a_t
 
	g£ns‹s_d©a
;

273 
	#RANDDEV_CNT
 (2)

	)

274 
	#MCR_CNT
 (4)

	)

275 
	#CONF_OK
 (0)

	)

276 
	#ERR_CHANNEL
 (0x00000001Ë

	)

277 
	#ERR_DR
 (0x00000002)

	)

278 
	#ERR_PREAMBLE
 (0x00000003)

	)

279 
	#ERR_RANDDEV
 (0x00000004)

	)

280 
	#ERR_MCR
 (0x00000005)

	)

281 
	#ERR_RR
 (0x00000006)

	)

282 
	#ERR_TXPOX
 (0x00000007)

	)

283 
	#ERR_PRF
 (0x00000008)

	)

284 
	#ERR_PREAMCODE
 (0x00000009)

	)

285 
	#ERR_NSFD
 (0x0000000A)

	)

286 
	#ERR_ACC_FS
 (0x0000000B)

	)

287 
	#ERR_AHRS
 (0x0000000C)

	)

288 
	#ERR_BARO
 (0x0000000D)

	)

289 
	#ERR_EBLINK
 (0x0000000E)

	)

290 
	#ERR_GYRO_FS
 (0x0000000F)

	)

291 
	#ERR_RX_PERIOD
 (0x00000010)

	)

292 
	#ERR_RX_DURATION
 (0x00000011)

	)

297 
	#DATARATE_COUNT
 (3Ë

	)

298 
	#DR0_INDEX
 (0Ë

	)

299 
	#DR1_INDEX
 (1Ë

	)

300 
	#DR2_INDEX
 (2Ë

	)

301 
	#PREAMBLE_COUNT
 (8Ë

	)

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\application\TDOA_routines.c

17 
	~<°dlib.h
>

18 
	~"TDOA_routöes.h
"

19 
	~"£ns‹s_routöes.h
"

20 
	~"../drivîs/ødios/DWM/deˇ_devi˚_≠i.h
"

21 
	~<°rög.h
>

22 
	~"../∂©f‹m/≥rùhîÆ.h
"

23 
	~"../∂©f‹m/timög.h
"

24 
	~"../../LMS_UWB_2021/maö.h
"

26 vﬁ©ûê
uöt8_t
 
	g⁄_°¨t_öfoblöks
 = 
NUM_OF_IBLINK_SENDIG_AT_THE_BEGIN
;

33 
	$fix2Êﬂt
(
uöt8_t
 
ö
, *
out
)

35 *
out
 = (
ö
 >= 128) ? ()in - 256.f : ()in;

36 *
out
 /= 128.f;

37 
	}
}

43 
	$πls_öôUWBBlökMsg
()

45 
tx_uwb_mesßge_èg_blök
.
£qNum
 = 0xFF;

46 
	`mem˝y
(
tx_uwb_mesßge_èg_blök
.
§cAddr
,(*Ë&
tdﬂP¨amëîs
.
this_èg_MACaddªss
, 
ADDR_BYTE_SIZE
);

47 
tx_uwb_mesßge_èg_blök
.
fcode
 = 
UWB_FCODE_BLINK
;

48 
UWB_MACaddªss
 = 
tdﬂP¨amëîs
.
this_èg_MACaddªss
 ;

49 
	}
}

54 
	$πls_öôUWB_EblökMsg_‹õ¡
()

56 
tx_uwb_mesßge_èg_eblök_hódî
.
£qNum
 = 0xFF;

57 
	`mem˝y
(
tx_uwb_mesßge_èg_eblök_hódî
.
§cAddr
,(*Ë&
tdﬂP¨amëîs
.
this_èg_MACaddªss
, 
ADDR_BYTE_SIZE
);

58 
tx_uwb_mesßge_èg_eblök_hódî
.
fcode
 = 
UWB_FCODE_BLINK
;

59 
	}
}

64 
	$πls_öôUWB_EblökMsg_b©t
()

66 
tx_uwb_mesßge_èg_eblök_hódî
.
£qNum
 = 0xFF;

67 
	`mem˝y
(
tx_uwb_mesßge_èg_eblök_hódî
.
§cAddr
,(*Ë&
tdﬂP¨amëîs
.
this_èg_MACaddªss
, 
ADDR_BYTE_SIZE
);

68 
tx_uwb_mesßge_èg_eblök_hódî
.
fcode
 = 
UWB_FCODE_BLINK
;

70 
	}
}

75 
	$πls_öôUWB_EblökMsg_b©t_‹õ¡
()

77 
tx_uwb_mesßge_èg_eblök_hódî
.
£qNum
 = 0xFF;

78 
	`mem˝y
(
tx_uwb_mesßge_èg_eblök_hódî
.
§cAddr
,(*Ë&
tdﬂP¨amëîs
.
this_èg_MACaddªss
, 
ADDR_BYTE_SIZE
);

79 
tx_uwb_mesßge_èg_eblök_hódî
.
fcode
 = 
UWB_FCODE_BLINK
;

81 
	}
}

89 
	$πls_öôUWB_EblökMsg_öfo
(
sy°emVÆues_t
* 
sysVÆ
)

91 
tx_uwb_mesßge_èg_eblök_öfo
.
£qNum
 = 0xFF;

92 
	`mem˝y
(
tx_uwb_mesßge_èg_eblök_öfo
.
§cAddr
,(*Ë&
tdﬂP¨amëîs
.
this_èg_MACaddªss
, 
ADDR_BYTE_SIZE
);

93 
tx_uwb_mesßge_èg_eblök_öfo
.
fcode
 = 
UWB_FCODE_BLINK
;

94 
tx_uwb_mesßge_èg_eblök_öfo
.
fw_vî
[0] = 
SW_VER
;

95 
tx_uwb_mesßge_èg_eblök_öfo
.
fw_vî
[1] = 
SW_SUBVER
;

96 
tx_uwb_mesßge_èg_eblök_öfo
.
hw_vî
[0] = 
HW_VER
;

97 
tx_uwb_mesßge_èg_eblök_öfo
.
hw_vî
[1] = 
HW_REV
;

98 
tx_uwb_mesßge_èg_eblök_öfo
.
∂©f‹m
 = 2;

99 if((
tdﬂP¨amëîs
.
this_èg_MACaddªss
 >> 44) == 0x02)

100 
tx_uwb_mesßge_èg_eblök_öfo
.
∂©f‹m
 = (
tdﬂP¨amëîs
.
this_èg_MACaddªss
 >> 40)&0x0F;

101 
tx_uwb_mesßge_èg_eblök_öfo
.
msgTy≥
 = 
MSGTYPE_EBLINK_INFO
;

106 
tx_uwb_mesßge_èg_eblök_öfo
.
ch™√l
 = 
tdﬂP¨amëîs
.channel;

107 
tx_uwb_mesßge_èg_eblök_öfo
.
d©a_øã
 = 
tdﬂP¨amëîs
.data_rate;

108 
tx_uwb_mesßge_èg_eblök_öfo
.
¥ómbÀ
 = 
tdﬂP¨amëîs
.preamble;

109 
tx_uwb_mesßge_èg_eblök_öfo
.
¥f
 = 
tdﬂP¨amëîs
.prf;

110 
tx_uwb_mesßge_èg_eblök_öfo
.
¥ómCode
 = 
tdﬂP¨amëîs
.preamCode;

111 
tx_uwb_mesßge_èg_eblök_öfo
.
nSfd
 = 
tdﬂP¨amëîs
.nSfd;

112 
tx_uwb_mesßge_èg_eblök_öfo
.
øndom_dev
 = 
tdﬂP¨amëîs
.
u£_øndom_devüti⁄
;

113 
tx_uwb_mesßge_èg_eblök_öfo
.
m¸
 = 
tdﬂP¨amëîs
.
mŸi⁄_c⁄åﬁ_mode
;

114 
tx_uwb_mesßge_èg_eblök_öfo
.
mou¡ed_£ns‹s
 = 0x00;

116 #ifde‡
ACCELEROMETER_IN_USE


117 if(
£ns‹s_∑øms
.
ACC_mou¡ed
)
tx_uwb_mesßge_èg_eblök_öfo
.
mou¡ed_£ns‹s
 |= 1 ;

118 
tx_uwb_mesßge_èg_eblök_öfo
.
mou¡ed_£ns‹s
 &= ~(1);

121 #ifde‡
GYROSCOPE_IN_USE


122 if(
£ns‹s_∑øms
.
GYRO_mou¡ed
)
tx_uwb_mesßge_èg_eblök_öfo
.
mou¡ed_£ns‹s
 |= (1 << 1);

123 
tx_uwb_mesßge_èg_eblök_öfo
.
mou¡ed_£ns‹s
 &= ~(1 << 1);

126 #ifde‡
MAGNETOMETER_IN_USE


127 if(
£ns‹s_∑øms
.
MAG_mou¡ed
)
tx_uwb_mesßge_èg_eblök_öfo
.
mou¡ed_£ns‹s
 |= (1 << 2);

128 
tx_uwb_mesßge_èg_eblök_öfo
.
mou¡ed_£ns‹s
 &= ~(1 << 2);

131 #ifde‡
BAROMETER_IN_USE


132 if(
£ns‹s_∑øms
.
BARO_mou¡ed
)
tx_uwb_mesßge_èg_eblök_öfo
.
mou¡ed_£ns‹s
 |= (1 << 3);

133 
tx_uwb_mesßge_èg_eblök_öfo
.
mou¡ed_£ns‹s
 &= ~(1 << 3);

137 
tx_uwb_mesßge_èg_eblök_öfo
.
a˘ive_£ns‹s
 =Åx_uwb_mesßge_èg_eblök_öfo.
mou¡ed_£ns‹s
 & 
£ns‹s_∑øms
.
EBlök_c⁄t
;

138 
£ns‹s_∑øms
.
EBlök_c⁄t
 = 
tx_uwb_mesßge_èg_eblök_öfo
.
a˘ive_£ns‹s
;

139 if(
£ns‹s_∑øms
.
AHRS_íabÀ
!=0Ë
tx_uwb_mesßge_èg_eblök_öfo
.
a˘ive_£ns‹s
 = 0x80;

141 
	`mem˝y
(
tx_uwb_mesßge_èg_eblök_öfo
.
ª‰esh_øã
,(*Ë&
tdﬂP¨amëîs
.
ª‰esh_øã_ms
,(tx_uwb_message_tag_eblink_info.refresh_rate));

142 
	`mem˝y
(
tx_uwb_mesßge_èg_eblök_öfo
.
TXpowî
,(*Ë&
tdﬂP¨amëîs
.
tx_pwr_Àvñ
,(tx_uwb_message_tag_eblink_info.TXpower));

145 #ifde‡
BAROMETER_IN_USE


146 if(
£ns‹s_∑øms
.
BARO_mou¡ed
)
tx_uwb_mesßge_èg_eblök_öfo
.
mou¡ed_£ns‹s
 |= (1 << 3);

147 
tx_uwb_mesßge_èg_eblök_öfo
.
mou¡ed_£ns‹s
 &= ~(1 << 3);

150 
tx_uwb_mesßge_èg_eblök_öfo
.
IMU_FS_ønge
 = (
£ns‹s_∑øms
.
gyro_FS
 << 1Ë| (£ns‹s_∑øms.
acc_FS
 >> 3);

153 
uöt16_t
 
m¸_thªshﬁd
 = 0;

155 if(
£ns‹s_∑øms
.
wakeup_thªshﬁd
 >> 14Ë
m¸_thªshﬁd
 = (sensors_params.wakeup_threshold >> 14) - 1;

156 
m¸_thªshﬁd
 = 
£ns‹s_∑øms
.
wakeup_thªshﬁd
 & ~
PREDEFINED_THRESHOLD_MASK
;

158 
	`mem˝y
(
tx_uwb_mesßge_èg_eblök_öfo
.
m¸_thªshﬁd
,(*) &mcr_threshold,(mcr_threshold));

159 
	`mem˝y
(
tx_uwb_mesßge_èg_eblök_öfo
.
RX_≥riod
,(*Ë&
tdﬂTimög
.
RX_≥riod_ms
,(tx_uwb_message_tag_eblink_info.RX_period));

160 
	`mem˝y
(
tx_uwb_mesßge_èg_eblök_öfo
.
RX_duøti⁄
,(*Ë&
tdﬂTimög
.
RX_duøti⁄_ms
,(tx_uwb_message_tag_eblink_info.RX_duration));

163 
tx_uwb_mesßge_èg_eblök_öfo
.
BARO_£âög
 = 
£ns‹s_∑øms
.BARO_setting;

164 #i‚de‡
SEND_OLD_INFOBLINK


165 
	`mem˝y
(
tx_uwb_mesßge_èg_eblök_öfo
.
no_mŸ_ª‰esh_øã
,(*Ë&
tdﬂP¨amëîs
.
no_mŸi⁄_ª‰esh_øã
,(tx_uwb_message_tag_eblink_info.no_mot_refresh_rate));

169 
	}
}

177 
	$öô_Blöks
(
sy°emVÆues_t
 *
sy°emVÆues
)

179 
	`πls_öôUWBBlökMsg
();

180 
	`πls_öôUWB_EblökMsg_‹õ¡
();

181 
	`πls_öôUWB_EblökMsg_b©t
();

182 
	`πls_öôUWB_EblökMsg_b©t_‹õ¡
();

183 
	`πls_öôUWB_EblökMsg_öfo
(
sy°emVÆues
);

184 
	}
}

193 
uöt8_t
 
	$åimB©tToR™ge
(
uöt8_t
 
b©tLevñ
,
boﬁ
 
≥r˚¡
)

195 if(
≥r˚¡
)

197 if(
b©tLevñ
 > 100)  100;

198 if(
b©tLevñ
 < 0)  0;

199  
b©tLevñ
;

203 if(
b©tLevñ
 > 
MAX_ALLOWED_BATT_VOLTAGE
)  MAX_ALLOWED_BATT_VOLTAGE;

204 if(
b©tLevñ
 < 
MIN_ALLOWED_BATT_VOLTAGE
)  MIN_ALLOWED_BATT_VOLTAGE;

205  
b©tLevñ
;

207 
	}
}

213 
	$¥ï¨e_öfo_blök
(
sy°emVÆues_t
* 
sy°emVÆues
)

215 i‡(
tdﬂVÆues
.
RR_cou¡î
 >
NUM_OF_IBLINK_SENDIG_AT_THE_BEGIN
 - 1)

217 
tdﬂVÆues
.
is_öfo_blök_ªque°ed
 = 
Ál£
;

222 #ifde‡
WDOG_IN_USE


224 
	`WDOG_íabÀ
(
åue
);

230 
tx_uwb_mesßge_èg_eblök_öfo
.
£qNum
 = 
tdﬂVÆues
.
£q_num
;

234 #ifde‡
LINEARIZE_BATTERY


235 
tx_uwb_mesßge_èg_eblök_öfo
.
b©tVﬁège
 = 
	`åimB©tToR™ge
(
sy°emVÆues
->
a˘uÆ_b©t_vﬁège_≥r˚¡
,
åue
);

237 
tx_uwb_mesßge_èg_eblök_öfo
.
b©tVﬁège
 = 
	`åimB©tToR™ge
(
sy°emVÆues
->
a˘uÆ_b©t_vﬁège_øw
,
Ál£
);

240 
tx_uwb_mesßge_èg_eblök_öfo
.
AHRS_ª¥e£¡©i⁄
 = (
£ns‹s_∑øms
.
AHRS_íabÀ
 & 0x0F);

241 
tx_uwb_mesßge_èg_eblök_öfo
.
AHRS_ª¥e£¡©i⁄
 |((
uöt8_t
)
£ns‹s_∑øms
.
MAG_ju°_ˇlib
) << 7;

242 
tx_uwb_mesßge_èg_eblök_öfo
.
AHRS_ª¥e£¡©i⁄
 |((
uöt8_t
)
£ns‹s_∑øms
.
IMU_ju°_ˇlib
) << 6;

247 
¥ï¨ed_blök
[0] = (
tx_uwb_mesßge_èg_eblök_öfo
);

248 
	`mem˝y
((*Ë&
¥ï¨ed_blök
[1],(*Ë&
tx_uwb_mesßge_èg_eblök_öfo
,(tx_uwb_message_tag_eblink_info));

253 
tdﬂVÆues
.
RR_cou¡î
++;

254 
	}
}

261 
	$¥ï¨e_b©ãry_blök
(
sy°emVÆues_t
 *
sy°emVÆues
)

266 
tx_uwb_mesßge_èg_eblök_hódî
.
£qNum
 = 
tdﬂVÆues
.
£q_num
;

271 
tx_uwb_mesßge_èg_eblök_hódî
.
msgTy≥
 = 
MSGTYPE_EBLINK_BATT
;

273 #ifde‡
LINEARIZE_BATTERY


274 
tx_uwb_mesßge_èg_eblök_b©t
.
b©tVﬁège
 = 
	`åimB©tToR™ge
(
sy°emVÆues
->
a˘uÆ_b©t_vﬁège_≥r˚¡
,
åue
);

276 
tx_uwb_mesßge_èg_eblök_b©t
.
b©tVﬁège
 = 
	`åimB©tToR™ge
(
sy°emVÆues
->
a˘uÆ_b©t_vﬁège_øw
,
Ál£
);

279 
tx_uwb_mesßge_èg_eblök_b©t
.
hódî
 = 
tx_uwb_mesßge_èg_eblök_hódî
;

285 
¥ï¨ed_blök
[0] = (
tx_uwb_mesßge_èg_eblök_b©t
);

286 
	`mem˝y
((*Ë&
¥ï¨ed_blök
[1],(*Ë&
tx_uwb_mesßge_èg_eblök_b©t
,(tx_uwb_message_tag_eblink_batt));

294 
	}
}

301 
	$¥ï¨e_b©ãry_blök_wôh_øw_d©a
(
sy°emVÆues_t
 *
sy°emVÆues
, 
uöt8_t
 
EBlök_c⁄t
)

306 
tx_uwb_mesßge_èg_eblök_hódî
.
£qNum
 = 
tdﬂVÆues
.
£q_num
;

311 
size_t
 
size_of_msg
=0;

312 
tx_uwb_mesßge_èg_eblök_hódî
.
msgTy≥
 = 
MSGTYPE_EBLINK_BATT_SENS_RAW
;

313 
tx_uwb_mesßge_èg_eblök_b©t_∑ylﬂd
.
hódî
 = 
tx_uwb_mesßge_èg_eblök_hódî
;

314 
tx_uwb_mesßge_èg_eblök_b©t_∑ylﬂd
.
hódî
.
msgTy≥
 = 
MSGTYPE_EBLINK_BATT_SENS_RAW
;

315 
size_of_msg
 = (
tx_uwb_mesßge_èg_eblök_hódî
);

317 #ifde‡
LINEARIZE_BATTERY


318 
tx_uwb_mesßge_èg_eblök_b©t_∑ylﬂd
.
b©tVﬁège
 = 
	`åimB©tToR™ge
(
sy°emVÆues
->
a˘uÆ_b©t_vﬁège_≥r˚¡
,
åue
);

320 
tx_uwb_mesßge_èg_eblök_b©t_∑ylﬂd
.
b©tVﬁège
 = 
	`åimB©tToR™ge
(
sy°emVÆues
->
a˘uÆ_b©t_vﬁège_øw
,
Ál£
);

322 
tx_uwb_mesßge_èg_eblök_b©t_∑ylﬂd
.
∑ylﬂd_c⁄t

EBlök_c⁄t
;

324 if(
EBlök_c⁄t
 & 
EBLINK_CONT_PUSHBUTTON
)

327 
£ns‹s_∑øms
.
EBlök_c⁄t
 &~
EBLINK_CONT_PUSHBUTTON
;

331 
size_of_msg
 +((
EBlök_c⁄t
Ë+ (
tx_uwb_mesßge_èg_eblök_b©t_∑ylﬂd
.
b©tVﬁège
));

333 if((
EBlök_c⁄t
)& 
EBLINK_CONT_BARO
)

336 
	`mem˝y
(((*)&
tx_uwb_mesßge_èg_eblök_b©t_∑ylﬂd
+
size_of_msg
),(*Ë&
£ns‹s_d©a
.
ãmp_d©a
,(sensors_data.temp_data));

337 
size_of_msg
 +(
£ns‹s_d©a
.
ãmp_d©a
);

339 
	`mem˝y
(((*)&
tx_uwb_mesßge_èg_eblök_b©t_∑ylﬂd
+
size_of_msg
),(*Ë&
£ns‹s_d©a
.
b¨o_d©a
,(sensors_data.baro_data)-1);

340 
size_of_msg
 +((
£ns‹s_d©a
.
b¨o_d©a
)-1);

343 if((
EBlök_c⁄t
)& 
EBLINK_CONT_MAG
)

345 
	`mem˝y
(((*)&
tx_uwb_mesßge_èg_eblök_b©t_∑ylﬂd
+
size_of_msg
),(*Ë&
£ns‹s_d©a
.
mag_d©a
,(sensors_data.mag_data));

346 
size_of_msg
 +(
£ns‹s_d©a
.
mag_d©a
);

349 if((
EBlök_c⁄t
)& 
EBLINK_CONT_GYRO
)

351 
	`mem˝y
(((*)&
tx_uwb_mesßge_èg_eblök_b©t_∑ylﬂd
+
size_of_msg
),(*Ë&
£ns‹s_d©a
.
gyro_d©a
,(sensors_data.gyro_data));

352 
size_of_msg
 +(
£ns‹s_d©a
.
gyro_d©a
);

355 if((
EBlök_c⁄t
)& 
EBLINK_CONT_ACC
)

357 
	`mem˝y
(((*)&
tx_uwb_mesßge_èg_eblök_b©t_∑ylﬂd
+
size_of_msg
),(*Ë&
£ns‹s_d©a
.
acc_d©a
,(sensors_data.acc_data));

358 
size_of_msg
 +(
£ns‹s_d©a
.
mag_d©a
);

361 
uöt8_t
 
CRC
[2] ={0,0};

362 
	`mem˝y
(((*)&
tx_uwb_mesßge_èg_eblök_b©t_∑ylﬂd
+
size_of_msg
),(*Ë
CRC
,2);

363 
size_of_msg
+=(
CRC
);

369 
¥ï¨ed_blök
[0] = 
size_of_msg
;

370 
	`mem˝y
((*Ë&
¥ï¨ed_blök
[1],(*Ë&
tx_uwb_mesßge_èg_eblök_b©t_∑ylﬂd
,
size_of_msg
);

380 
	}
}

386 
	$¥ï¨e_b©ãry_blök_wôh_AHRS
(
sy°emVÆues_t
 *
sy°emVÆues
)

391 
tx_uwb_mesßge_èg_eblök_hódî
.
£qNum
 = 
tdﬂVÆues
.
£q_num
;

396 
tx_uwb_mesßge_èg_eblök_hódî
.
msgTy≥
 = 
MSGTYPE_EBLINK_BATT_ORIENT
;

397 
tx_uwb_mesßge_èg_eblök_hódî
.
£qNum

tdﬂVÆues
.
£q_num
;

398 #ifde‡
LINEARIZE_BATTERY


399 
tx_uwb_mesßge_èg_eblök_b©t_‹õ¡
.
b©tVﬁège
 = 
	`åimB©tToR™ge
(
sy°emVÆues
->
a˘uÆ_b©t_vﬁège_≥r˚¡
,
åue
);

401 
tx_uwb_mesßge_èg_eblök_b©t_‹õ¡
.
b©tVﬁège
 = 
	`åimB©tToR™ge
(
sy°emVÆues
->
a˘uÆ_b©t_vﬁège_øw
,
Ál£
);

404 
tx_uwb_mesßge_èg_eblök_b©t_‹õ¡
.
hódî
 = 
tx_uwb_mesßge_èg_eblök_hódî
;

406 
tx_uwb_mesßge_èg_eblök_b©t_‹õ¡
.
yaw

£ns‹s_d©a
.
™gÀs
.yaw;

407 
tx_uwb_mesßge_èg_eblök_b©t_‹õ¡
.
pôch

£ns‹s_d©a
.
™gÀs
.pitch;

408 
tx_uwb_mesßge_èg_eblök_b©t_‹õ¡
.
rﬁl

£ns‹s_d©a
.
™gÀs
.roll;

414 
¥ï¨ed_blök
[0] = (
tx_uwb_mesßge_èg_eblök_b©t_‹õ¡
);

415 
	`mem˝y
((*Ë&
¥ï¨ed_blök
[1],(*Ë&
tx_uwb_mesßge_èg_eblök_b©t_‹õ¡
,(tx_uwb_message_tag_eblink_batt_orient));

425 
	}
}

431 
	$¥ï¨e_b©ãry_blök_wôh_AHRS_qu©
(
sy°emVÆues_t
 *
sy°emVÆues
)

436 
tx_uwb_mesßge_èg_eblök_hódî
.
£qNum
 = 
tdﬂVÆues
.
£q_num
;

441 
tx_uwb_mesßge_èg_eblök_hódî
.
msgTy≥
 = 
MSGTYPE_EBLINK_BATT_QUATERNION
;

442 
tx_uwb_mesßge_èg_eblök_hódî
.
£qNum

tdﬂVÆues
.
£q_num
;

443 #ifde‡
LINEARIZE_BATTERY


444 
tx_uwb_mesßge_èg_eblök_b©t_QUATERNION
.
b©tVﬁège
 = 
	`åimB©tToR™ge
(
sy°emVÆues
->
a˘uÆ_b©t_vﬁège_≥r˚¡
,
åue
);

446 
tx_uwb_mesßge_èg_eblök_b©t_QUATERNION
.
b©tVﬁège
 = 
	`åimB©tToR™ge
(
sy°emVÆues
->
a˘uÆ_b©t_vﬁège_øw
,
Ál£
);

449 
tx_uwb_mesßge_èg_eblök_b©t_QUATERNION
.
hódî
 = 
tx_uwb_mesßge_èg_eblök_hódî
;

451 
tx_uwb_mesßge_èg_eblök_b©t_QUATERNION
.
q0

£ns‹s_d©a
.
qu©îni⁄
.q0;

452 
tx_uwb_mesßge_èg_eblök_b©t_QUATERNION
.
q1

£ns‹s_d©a
.
qu©îni⁄
.q1;

453 
tx_uwb_mesßge_èg_eblök_b©t_QUATERNION
.
q2

£ns‹s_d©a
.
qu©îni⁄
.q2;

454 
tx_uwb_mesßge_èg_eblök_b©t_QUATERNION
.
q3

£ns‹s_d©a
.
qu©îni⁄
.q3;

459 
¥ï¨ed_blök
[0] = (
tx_uwb_mesßge_èg_eblök_b©t_QUATERNION
);

460 
	`mem˝y
((*Ë&
¥ï¨ed_blök
[1],(*Ë&
tx_uwb_mesßge_èg_eblök_b©t_QUATERNION
,(tx_uwb_message_tag_eblink_batt_QUATERNION));

468 
	}
}

474 
	$¥ï¨e_b©ãry_blök_wôh_AHRS_qu©_¥s
(
sy°emVÆues_t
 *
sy°emVÆues
)

479 
tx_uwb_mesßge_èg_eblök_hódî
.
£qNum
 = 
tdﬂVÆues
.
£q_num
;

484 
tx_uwb_mesßge_èg_eblök_hódî
.
msgTy≥
 = 
MSGTYPE_EBLINK_BATT_QUAT_PRS
;

485 
tx_uwb_mesßge_èg_eblök_hódî
.
£qNum

tdﬂVÆues
.
£q_num
;

486 #ifde‡
LINEARIZE_BATTERY


487 
tx_uwb_mesßge_èg_eblök_b©t_QUAT_PRS
.
b©tVﬁège
 = 
	`åimB©tToR™ge
(
sy°emVÆues
->
a˘uÆ_b©t_vﬁège_≥r˚¡
,
åue
);

489 
tx_uwb_mesßge_èg_eblök_b©t_QUAT_PRS
.
b©tVﬁège
 = 
	`åimB©tToR™ge
(
sy°emVÆues
->
a˘uÆ_b©t_vﬁège_øw
,
Ál£
);

492 
tx_uwb_mesßge_èg_eblök_b©t_QUAT_PRS
.
hódî
 = 
tx_uwb_mesßge_èg_eblök_hódî
;

494 
tx_uwb_mesßge_èg_eblök_b©t_QUAT_PRS
.
q0
 = 
£ns‹s_d©a
.
qu©îni⁄
.q0;

495 
tx_uwb_mesßge_èg_eblök_b©t_QUAT_PRS
.
q1
 = 
£ns‹s_d©a
.
qu©îni⁄
.q1;

496 
tx_uwb_mesßge_èg_eblök_b©t_QUAT_PRS
.
q2
 = 
£ns‹s_d©a
.
qu©îni⁄
.q2;

497 
tx_uwb_mesßge_èg_eblök_b©t_QUAT_PRS
.
q3
 = 
£ns‹s_d©a
.
qu©îni⁄
.q3;

501 
uöt32_t
 
TMP_PRS
;

502 
TMP_PRS
 = (
£ns‹s_d©a
.
b¨o_d©a
 << 8Ë| sís‹s_d©a.
ãmp_d©a
;

504 
	`mem˝y
(((*)&
tx_uwb_mesßge_èg_eblök_b©t_QUAT_PRS
.
TMP_PRS
),(*) &TMP_PRS,(TMP_PRS));

509 
¥ï¨ed_blök
[0] = (
tx_uwb_mesßge_èg_eblök_b©t_QUAT_PRS
);

510 
	`mem˝y
((*Ë&
¥ï¨ed_blök
[1],(*Ë&
tx_uwb_mesßge_èg_eblök_b©t_QUAT_PRS
,(tx_uwb_message_tag_eblink_batt_QUAT_PRS));

520 
	}
}

523 #ifde‡
USER_PAYLOAD_EN


528 
	$¥ï¨e_b©ãry_blök_wôh_u£r_∑ylﬂd
(
sy°emVÆues_t
 *
sy°emVÆues
)

535 
tx_uwb_mesßge_èg_eblök_hódî
.
£qNum
 = 
tdﬂVÆues
.
£q_num
;

542 
size_t
 
size_of_msg
=0;

543 
tx_uwb_mesßge_èg_eblök_hódî
.
msgTy≥
 = 
MSGTYPE_EBLINK_BATT_USER_PAYLOAD
;

544 
tx_uwb_mesßge_èg_eblök_b©t_u£r_∑ylﬂd
.
hódî
 = 
tx_uwb_mesßge_èg_eblök_hódî
;

545 
size_of_msg
 = (
tx_uwb_mesßge_èg_eblök_hódî
);

546 #ifde‡
LINEARIZE_BATTERY


547 
tx_uwb_mesßge_èg_eblök_b©t_u£r_∑ylﬂd
.
b©tVﬁège
 = 
	`åimB©tToR™ge
(
sy°emVÆues
->
a˘uÆ_b©t_vﬁège_≥r˚¡
,
åue
);

549 
tx_uwb_mesßge_èg_eblök_b©t_u£r_∑ylﬂd
.
b©tVﬁège
 = 
	`åimB©tToR™ge
(
sy°emVÆues
->
a˘uÆ_b©t_vﬁège_øw
,
Ál£
);

552 
size_of_msg
 +(
tx_uwb_mesßge_èg_eblök_b©t_u£r_∑ylﬂd
.
b©tVﬁège
);

554 
tx_uwb_mesßge_èg_eblök_b©t_u£r_∑ylﬂd
.
u£rMsgTy≥
= 201 ;

555 
size_of_msg
 +(
tx_uwb_mesßge_èg_eblök_b©t_u£r_∑ylﬂd
.
u£rMsgTy≥
);

557 
uöt8_t
 
u£r_d©a
[
USER_PAYLOAD_SIZE
];

558 
uöt8_t
 
i
=0; i<
USER_PAYLOAD_SIZE
;i++)
u£r_d©a
[i]=i;

560 
	`mem˝y
(((*)&
tx_uwb_mesßge_èg_eblök_b©t_u£r_∑ylﬂd
+
size_of_msg
),(*Ë
u£r_d©a
,(user_data));

561 
size_of_msg
+=(
u£r_d©a
);

566 
uöt8_t
 
CRC
[2] ={0,0};

567 
	`mem˝y
(((*)&
tx_uwb_mesßge_èg_eblök_b©t_u£r_∑ylﬂd
+
size_of_msg
),(*Ë
CRC
,2);

568 
size_of_msg
+=(
CRC
);

574 
¥ï¨ed_blök
[0] = 
size_of_msg
;

575 
	`mem˝y
((*Ë&
¥ï¨ed_blök
[1],(*Ë&
tx_uwb_mesßge_èg_eblök_b©t_u£r_∑ylﬂd
,
size_of_msg
);

586 
	}
}

594 
	$¥ï¨e_STD_blök
()

599 
tx_uwb_mesßge_èg_blök
.
£qNum
 = 
tdﬂVÆues
.
£q_num
;

605 
¥ï¨ed_blök
[0] = (
tx_uwb_mesßge_èg_blök
);

606 
	`mem˝y
(((*Ë&
¥ï¨ed_blök
[1]),((*Ë&
tx_uwb_mesßge_èg_blök
),(tx_uwb_message_tag_blink));

614 
	}
}

620 
	$¥ï¨e_blök_wôh_øw_d©a
(
uöt8_t
 
EBlök_c⁄t
)

625 
tx_uwb_mesßge_èg_eblök_hódî
.
£qNum
 = 
tdﬂVÆues
.
£q_num
;

630 
size_t
 
size_of_msg
=0;

631 
tx_uwb_mesßge_èg_eblök_hódî
.
msgTy≥
 = 
MSGTYPE_EBLINK_SENS_RAW
;

632 
tx_uwb_mesßge_èg_eblök_∑ylﬂd
.
hódî
 = 
tx_uwb_mesßge_èg_eblök_hódî
;

633 
size_of_msg
 = (
tx_uwb_mesßge_èg_eblök_hódî
);

634 
tx_uwb_mesßge_èg_eblök_∑ylﬂd
.
∑ylﬂd_c⁄t

EBlök_c⁄t
;

636 
size_of_msg
+=(
EBlök_c⁄t
);

637 if(
EBlök_c⁄t
 & 
EBLINK_CONT_PUSHBUTTON
)

638 
£ns‹s_∑øms
.
EBlök_c⁄t
 &~
EBLINK_CONT_PUSHBUTTON
;

641 if((
EBlök_c⁄t
)& 
EBLINK_CONT_BARO
)

644 
	`mem˝y
(((*)&
tx_uwb_mesßge_èg_eblök_∑ylﬂd
+
size_of_msg
),(*Ë&
£ns‹s_d©a
.
ãmp_d©a
,(sensors_data.temp_data));

645 
size_of_msg
 +(
£ns‹s_d©a
.
ãmp_d©a
);

647 
	`mem˝y
(((*)&
tx_uwb_mesßge_èg_eblök_∑ylﬂd
+
size_of_msg
),(*Ë&
£ns‹s_d©a
.
b¨o_d©a
,(sensors_data.baro_data)-1);

648 
size_of_msg
 +((
£ns‹s_d©a
.
b¨o_d©a
)-1);

651 if((
EBlök_c⁄t
)& 
EBLINK_CONT_MAG
)

653 
	`mem˝y
(((*)&
tx_uwb_mesßge_èg_eblök_∑ylﬂd
+
size_of_msg
),(*Ë&
£ns‹s_d©a
.
mag_d©a
,(sensors_data.mag_data));

654 
size_of_msg
 +–
£ns‹s_d©a
.
mag_d©a
);

657 if((
EBlök_c⁄t
)& 
EBLINK_CONT_GYRO
)

659 
	`mem˝y
(((*)&
tx_uwb_mesßge_èg_eblök_∑ylﬂd
+
size_of_msg
),(*Ë&
£ns‹s_d©a
.
gyro_d©a
,(sensors_data.gyro_data));

660 
size_of_msg
 +(
£ns‹s_d©a
.
gyro_d©a
);

663 if((
EBlök_c⁄t
)& 
EBLINK_CONT_ACC
)

665 
	`mem˝y
(((*)&
tx_uwb_mesßge_èg_eblök_∑ylﬂd
+
size_of_msg
),(*Ë&
£ns‹s_d©a
.
acc_d©a
,(sensors_data.acc_data));

666 
size_of_msg
 +(
£ns‹s_d©a
.
acc_d©a
);

672 
uöt8_t
 
CRC
[2] ={0,0};

673 
	`mem˝y
(((*)&
tx_uwb_mesßge_èg_eblök_∑ylﬂd
+
size_of_msg
),(*Ë
CRC
,2);

674 
size_of_msg
+=(
CRC
);

680 
¥ï¨ed_blök
[0] = 
size_of_msg
;

681 
	`mem˝y
((*Ë&
¥ï¨ed_blök
[1],(*Ë&
tx_uwb_mesßge_èg_eblök_∑ylﬂd
,
size_of_msg
);

689 
	}
}

694 
	$¥ï¨e_blök_wôh_AHRS
()

699 
tx_uwb_mesßge_èg_eblök_hódî
.
£qNum
 = 
tdﬂVÆues
.
£q_num
;

704 
tx_uwb_mesßge_èg_eblök_hódî
.
msgTy≥
 = 
MSGTYPE_EBLINK_ORIENT
;

705 
tx_uwb_mesßge_èg_eblök_hódî
.
£qNum
 = 
tdﬂVÆues
.
£q_num
;

706 
tx_uwb_mesßge_èg_eblök_‹õ¡
.
hódî
 = 
tx_uwb_mesßge_èg_eblök_hódî
;

708 
tx_uwb_mesßge_èg_eblök_‹õ¡
.
yaw

£ns‹s_d©a
.
™gÀs
.yaw;

709 
tx_uwb_mesßge_èg_eblök_‹õ¡
.
pôch

£ns‹s_d©a
.
™gÀs
.pitch;

710 
tx_uwb_mesßge_èg_eblök_‹õ¡
.
rﬁl

£ns‹s_d©a
.
™gÀs
.roll;

715 
¥ï¨ed_blök
[0] = (
tx_uwb_mesßge_èg_eblök_‹õ¡
);

716 
	`mem˝y
((*Ë&
¥ï¨ed_blök
[1],(*Ë&
tx_uwb_mesßge_èg_eblök_‹õ¡
,(tx_uwb_message_tag_eblink_orient));

725 
	}
}

730 
	$¥ï¨e_blök_wôh_AHRS_qu©
()

735 
tx_uwb_mesßge_èg_eblök_hódî
.
£qNum
 = 
tdﬂVÆues
.
£q_num
;

740 
tx_uwb_mesßge_èg_eblök_hódî
.
msgTy≥
 = 
MSGTYPE_EBLINK_QUATERNION
;

741 
tx_uwb_mesßge_èg_eblök_hódî
.
£qNum
 = 
tdﬂVÆues
.
£q_num
;

742 
tx_uwb_mesßge_èg_eblök_QUATERNION
.
hódî
 = 
tx_uwb_mesßge_èg_eblök_hódî
;

744 
tx_uwb_mesßge_èg_eblök_QUATERNION
.
q0

£ns‹s_d©a
.
qu©îni⁄
.q0;

745 
tx_uwb_mesßge_èg_eblök_QUATERNION
.
q1

£ns‹s_d©a
.
qu©îni⁄
.q1;

746 
tx_uwb_mesßge_èg_eblök_QUATERNION
.
q2

£ns‹s_d©a
.
qu©îni⁄
.q2;

747 
tx_uwb_mesßge_èg_eblök_QUATERNION
.
q3

£ns‹s_d©a
.
qu©îni⁄
.q3;

753 
¥ï¨ed_blök
[0] = (
tx_uwb_mesßge_èg_eblök_QUATERNION
);

754 
	`mem˝y
((*Ë&
¥ï¨ed_blök
[1],(*Ë&
tx_uwb_mesßge_èg_eblök_QUATERNION
,(tx_uwb_message_tag_eblink_QUATERNION));

763 
	}
}

768 
	$¥ï¨e_blök_wôh_AHRS_qu©_¥s
()

773 
tx_uwb_mesßge_èg_eblök_hódî
.
£qNum
 = 
tdﬂVÆues
.
£q_num
;

778 
tx_uwb_mesßge_èg_eblök_hódî
.
msgTy≥
 = 
MSGTYPE_EBLINK_QUAT_PRS
;

779 
tx_uwb_mesßge_èg_eblök_hódî
.
£qNum

tdﬂVÆues
.
£q_num
;

780 
tx_uwb_mesßge_èg_eblök_QUAT_PRS
.
hódî
 = 
tx_uwb_mesßge_èg_eblök_hódî
;

782 
tx_uwb_mesßge_èg_eblök_QUAT_PRS
.
q0
 = 
£ns‹s_d©a
.
qu©îni⁄
.q0;

783 
tx_uwb_mesßge_èg_eblök_QUAT_PRS
.
q1
 = 
£ns‹s_d©a
.
qu©îni⁄
.q1;

784 
tx_uwb_mesßge_èg_eblök_QUAT_PRS
.
q2
 = 
£ns‹s_d©a
.
qu©îni⁄
.q2;

785 
tx_uwb_mesßge_èg_eblök_QUAT_PRS
.
q3
 = 
£ns‹s_d©a
.
qu©îni⁄
.q3;

789 
uöt32_t
 
TMP_PRS
;

790 
TMP_PRS
 = (
£ns‹s_d©a
.
b¨o_d©a
 << 8Ë| sís‹s_d©a.
ãmp_d©a
;

792 
	`mem˝y
(((*)&
tx_uwb_mesßge_èg_eblök_QUAT_PRS
.
TMP_PRS
),(*) &TMP_PRS,(TMP_PRS));

798 
¥ï¨ed_blök
[0] = (
tx_uwb_mesßge_èg_eblök_QUAT_PRS
);

799 
	`mem˝y
((*Ë&
¥ï¨ed_blök
[1],(*Ë&
tx_uwb_mesßge_èg_eblök_QUAT_PRS
,(tx_uwb_message_tag_eblink_QUAT_PRS));

807 
	}
}

809 #ifde‡
USER_PAYLOAD_EN


813 
	$¥ï¨e_blök_wôh_u£r_∑ylﬂd
()

819 
tx_uwb_mesßge_èg_eblök_hódî
.
£qNum
 = 
tdﬂVÆues
.
£q_num
;

824 
size_t
 
size_of_msg
=0;

825 
tx_uwb_mesßge_èg_eblök_hódî
.
msgTy≥
 = 
MSGTYPE_EBLINK_USER_PAYLOAD
;

826 
tx_uwb_mesßge_èg_eblök_u£r_∑ylﬂd
.
hódî
 = 
tx_uwb_mesßge_èg_eblök_hódî
;

827 
size_of_msg
 = (
tx_uwb_mesßge_èg_eblök_hódî
);

829 
tx_uwb_mesßge_èg_eblök_u£r_∑ylﬂd
.
u£rMsgTy≥
= 0 ;

830 
size_of_msg
 +(
tx_uwb_mesßge_èg_eblök_u£r_∑ylﬂd
.
u£rMsgTy≥
);

834 
uöt8_t
 
u£r_d©a
[
USER_PAYLOAD_SIZE
];

836 
uöt32_t
 
ãmp
 = 
	`gë_RTC_time°amp
(
åue
);

837 
	`mem˝y
((*)&
u£r_d©a
,(*)&
ãmp
,(user_data));

839 
	`mem˝y
(((*)&
tx_uwb_mesßge_èg_eblök_u£r_∑ylﬂd
+
size_of_msg
),(*Ë
u£r_d©a
,(user_data));

840 
size_of_msg
+=(
u£r_d©a
);

845 
uöt8_t
 
CRC
[2] ={0,0};

846 
	`mem˝y
(((*)&
tx_uwb_mesßge_èg_eblök_u£r_∑ylﬂd
+
size_of_msg
),(*Ë
CRC
,2);

847 
size_of_msg
+=(
CRC
);

852 
¥ï¨ed_blök
[0] = 
size_of_msg
;

853 
	`mem˝y
((*Ë&
¥ï¨ed_blök
[1],(*Ë&
tx_uwb_mesßge_èg_eblök_u£r_∑ylﬂd
,
size_of_msg
);

861 
	}
}

924 
	$¥ï¨eRegi°Msg
(
sy°emVÆues_t
* 
sy°emVÆues
)

927 
tx_uwb_mesßge_èg_eblök_öfo
.
£qNum
 = 
tdﬂVÆues
.
£q_num
;

928 #ifde‡
LINEARIZE_BATTERY


929 
tx_uwb_mesßge_èg_eblök_öfo
.
b©tVﬁège
 = 
	`åimB©tToR™ge
(
sy°emVÆues
->
a˘uÆ_b©t_vﬁège_≥r˚¡
,
åue
);

931 
tx_uwb_mesßge_èg_eblök_öfo
.
b©tVﬁège
 = 
	`åimB©tToR™ge
(
sy°emVÆues
->
a˘uÆ_b©t_vﬁège_øw
,
Ál£
);

934 
tx_uwb_mesßge_èg_eblök_öfo
.
AHRS_ª¥e£¡©i⁄
 = (
£ns‹s_∑øms
.
AHRS_íabÀ
 & 0x0F);

935 
tx_uwb_mesßge_èg_eblök_öfo
.
AHRS_ª¥e£¡©i⁄
 |((
uöt8_t
)
£ns‹s_∑øms
.
MAG_ju°_ˇlib
) << 7;

936 
tx_uwb_mesßge_èg_eblök_öfo
.
AHRS_ª¥e£¡©i⁄
 |((
uöt8_t
)
£ns‹s_∑øms
.
IMU_ju°_ˇlib
) << 6;

938 
¥ï¨ed_blök
[0] = (
tx_uwb_mesßge_èg_eblök_öfo
);

939 
	`mem˝y
((*Ë&
¥ï¨ed_blök
[1],(*Ë&
tx_uwb_mesßge_èg_eblök_öfo
,(tx_uwb_message_tag_eblink_info));

941 
	`dwt_wrôëxd©a
(
¥ï¨ed_blök
[0] ,(
uöt8_t
 *) &prepared_blink[1], 0);

942 
	`dwt_wrôëxf˘æ
(
¥ï¨ed_blök
[0] , 0);

944 
tdﬂVÆues
.
£q_num
++;

945 
	}
}

947 
	$¥ï¨eNextBlökMsg
(
sy°emVÆues_t
* 
sy°emVÆues
)

949 #ifde‡
USER_PAYLOAD_EN


950 
boﬁ
 
u£r_∑ylﬂd_í
 = 
åue
;

953 
uöt8_t
 
EBlök_c⁄t
 = 
£ns‹s_∑øms
.EBlink_cont;

955 if(
tdﬂVÆues
.
is_fú°_blök
)

958 
⁄_°¨t_öfoblöks
 = 
NUM_OF_IBLINK_SENDIG_AT_THE_BEGIN
;

960 
tdﬂVÆues
.
is_fú°_blök
 = 
Ál£
;

963 if(
⁄_°¨t_öfoblöks
)

966 
⁄_°¨t_öfoblöks
--;

972 
	`¥ï¨e_öfo_blök
(
sy°emVÆues
);

973 
tdﬂVÆues
.
RR_cou¡î
 = 2;

974 
tdﬂVÆues
.
öf_b_cou¡î
 = 2;

976 if(
⁄_°¨t_öfoblöks
 == 0)

979 
£ns‹s_∑øms
.
IMU_ju°_ˇlib
 = 
Ál£
;

980 
£ns‹s_∑øms
.
MAG_ju°_ˇlib
 = 
Ál£
;

983 if(
tdﬂVÆues
.
is_öfo_blök_ªque°ed
 || ((++tdﬂVÆues.
öf_b_cou¡î
)=
IBLINK_FREQ
))

986 
	`¥ï¨e_öfo_blök
(
sy°emVÆues
);

987 
tdﬂVÆues
.
öf_b_cou¡î
 = 0;

988 
tdﬂVÆues
.
RR_cou¡î
 = 0;

990 if(
tdﬂVÆues
.
RR_cou¡î
 =—dﬂVÆues.
£nd_Eblök_a·î_RR
 - 1))

993 if(
EBlök_c⁄t
Ë
	`¥ï¨e_b©ãry_blök_wôh_øw_d©a
(
sy°emVÆues
,EBlink_cont);

994 if(
£ns‹s_∑øms
.
AHRS_íabÀ
==1Ë
	`¥ï¨e_b©ãry_blök_wôh_AHRS
(
sy°emVÆues
);

995 if(
£ns‹s_∑øms
.
AHRS_íabÀ
==2Ë
	`¥ï¨e_b©ãry_blök_wôh_AHRS_qu©
(
sy°emVÆues
);

996 if(
£ns‹s_∑øms
.
AHRS_íabÀ
==3Ë
	`¥ï¨e_b©ãry_blök_wôh_AHRS_qu©_¥s
(
sy°emVÆues
);

997 #ifde‡
USER_PAYLOAD_EN


998 if(
u£r_∑ylﬂd_í
Ë
	`¥ï¨e_b©ãry_blök_wôh_u£r_∑ylﬂd
(
sy°emVÆues
);

1000 
	`¥ï¨e_b©ãry_blök
(
sy°emVÆues
);

1002 
tdﬂVÆues
.
RR_cou¡î
 = 0;

1007 if(
EBlök_c⁄t
Ë
	`¥ï¨e_blök_wôh_øw_d©a
(EBlink_cont);

1008 if(
£ns‹s_∑øms
.
AHRS_íabÀ
==1Ë
	`¥ï¨e_blök_wôh_AHRS
();

1009 if(
£ns‹s_∑øms
.
AHRS_íabÀ
==2Ë
	`¥ï¨e_blök_wôh_AHRS_qu©
();

1010 if(
£ns‹s_∑øms
.
AHRS_íabÀ
==3Ë
	`¥ï¨e_blök_wôh_AHRS_qu©_¥s
();

1011 #ifde‡
USER_PAYLOAD_EN


1012 if(
u£r_∑ylﬂd_í
Ë
	`¥ï¨e_blök_wôh_u£r_∑ylﬂd
();

1014 
	`¥ï¨e_STD_blök
();

1016 
tdﬂVÆues
.
RR_cou¡î
++;

1025 
	`dwt_wrôëxd©a
(
¥ï¨ed_blök
[0] ,(
uöt8_t
 *) &prepared_blink[1], 0);

1026 
	`dwt_wrôëxf˘æ
(
¥ï¨ed_blök
[0] , 0);

1033 
tdﬂVÆues
.
£q_num
++;

1034 
	}
}

1040 
	$°¨t_UWB_TX
()

1042 
	`dwt_°¨âx
(
DWT_START_TX_IMMEDIATE
);

1043 
	}
}

1050 
uöt32_t
 
	$ˇlc_πls_ª‰eshøã
()

1052 
tdﬂTimög
.
Re‰eshR©e_ms
 = 
tdﬂP¨amëîs
.
ª‰esh_øã_ms
;

1053 
tdﬂTimög
.
Re‰eshR©e_no_mŸ_ms
 = 
tdﬂP¨amëîs
.
no_mŸi⁄_ª‰esh_øã
;

1055 
tdﬂTimög
.
RX_≥riod_ms
 = 
tdﬂP¨amëîs
.RX_period_ms;

1056 
tdﬂTimög
.
RX_duøti⁄_ms
 = 
tdﬂP¨amëîs
.RX_duration_ms;

1057 
tdﬂTimög
.
RX_≥riod_tck
 = 
	`c⁄vîtTime2Ticks
—dﬂTimög.
RX_≥riod_ms
 *1000);

1059 i‡(
tdﬂP¨amëîs
.
u£_øndom_devüti⁄
)

1061 
uöt32_t
 
auto_øndom_º
;

1062 
auto_øndom_º
 = 
tdﬂP¨amëîs
.
ª‰esh_øã_ms
 - 10;

1065 i‡(
auto_øndom_º
 > 1)

1067 
tdﬂTimög
.
Re‰eshR©e_us
 = 
tdﬂP¨amëîs
.
ª‰esh_øã_ms
 * 1000;

1068 
tdﬂTimög
.
Re‰eshR©e_tck
 = 
	`c⁄vîtTime2Ticks
—dﬂTimög.
Re‰eshR©e_us
);

1069 
tdﬂTimög
.
RRwaôTime_tck
 =ÅdﬂTimög.
Re‰eshR©e_tck
;

1070 
tdﬂTimög
.
øndom_º_devüti⁄_tck
 = 
	`c⁄vîtTime2Ticks
(
auto_øndom_º
 * 1000);

1071 
tdﬂTimög
.
øndom_º_devüti⁄_hÆf_tck
 =ÅdﬂTimög.
øndom_º_devüti⁄_tck
 / 2;

1072 
tdﬂTimög
.
RRwaôTime_tck
 -tdﬂTimög.
øndom_º_devüti⁄_hÆf_tck
;

1075 
tdﬂTimög
.
Re‰eshR©e_no_mŸ_tck
 = 
	`c⁄vîtTime2Ticks
—dﬂTimög.
Re‰eshR©e_no_mŸ_ms
 * 1000);

1080 
tdﬂP¨amëîs
.
u£_øndom_devüti⁄
 = 0;

1082 
tdﬂTimög
.
Re‰eshR©e_us
 = 
tdﬂP¨amëîs
.
ª‰esh_øã_ms
 * 1000;

1083 
tdﬂTimög
.
Re‰eshR©e_tck
 = 
	`c⁄vîtTime2Ticks
—dﬂTimög.
Re‰eshR©e_us
);

1085 
tdﬂTimög
.
Re‰eshR©e_no_mŸ_tck
 = 
	`c⁄vîtTime2Ticks
—dﬂTimög.
Re‰eshR©e_no_mŸ_ms
 * 1000);

1086 
tdﬂTimög
.
RRwaôTime_tck
 =ÅdﬂTimög.
Re‰eshR©e_tck
;

1092 
tdﬂTimög
.
Re‰eshR©e_us
 = 
tdﬂP¨amëîs
.
ª‰esh_øã_ms
 * 1000;

1093 
tdﬂTimög
.
Re‰eshR©e_tck
 = 
	`c⁄vîtTime2Ticks
—dﬂTimög.
Re‰eshR©e_us
);

1094 
tdﬂTimög
.
RRwaôTime_tck
 =ÅdﬂTimög.
Re‰eshR©e_tck
;

1095 
tdﬂTimög
.
Re‰eshR©e_no_mŸ_tck
 = 
	`c⁄vîtTime2Ticks
—dﬂTimög.
Re‰eshR©e_no_mŸ_ms
 * 1000);

1097 
tdﬂTimög
.
RR_ˇlcuœãd
 =ÅdﬂTimög.
RRwaôTime_tck
;

1098 
	`§™d
(
tdﬂP¨amëîs
.
this_èg_MACaddªss
);

1099 
tdﬂTimög
.
RRwaôTime_tck_a˘uÆ
 = 
ONE_SEC_RTC_TCKS
;

1102 
	}
}

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\application\TDOA_routines.h

9 
	~<°döt.h
>

10 
	~<°ddef.h
>

11 
	~"../∂©f‹m/£âög.h
"

12 
	~"../TEIA_v¨.h
"

13 
	~"£ns‹s_routöes.h
"

36 
	#MSGTYPE_EBLINK_BATT
 (1Ë

	)

37 
	#MSGTYPE_EBLINK_ORIENT
 (2Ë

	)

38 
	#MSGTYPE_EBLINK_BATT_ORIENT
 (3Ë

	)

39 
	#MSGTYPE_EBLINK_INFO_ORIENT
 (4Ë

	)

40 
	#MSGTYPE_EBLINK_SENS_RAW
 (5Ë

	)

41 
	#MSGTYPE_EBLINK_BATT_SENS_RAW
 (6Ë

	)

44 #ifde‡
SEND_OLD_BLINK


45 
	#MSGTYPE_EBLINK_INFO
 (8Ë

	)

47 
	#MSGTYPE_EBLINK_QUATERNION
 (9Ë

	)

48 
	#MSGTYPE_EBLINK_BATT_QUATERNION
 (10Ë

	)

49 
	#MSGTYPE_EBLINK_QUAT_PRS
 (11Ë

	)

50 
	#MSGTYPE_EBLINK_BATT_QUAT_PRS
 (12Ë

	)

51 
	#MSGTYPE_EBLINK_INFO
 (13Ë

	)

52 
	#MSGTYPE_EBLINK_CHARGING
 (252Ë

	)

53 
	#MSGTYPE_EBLINK_NO_MOTION
 (253Ë

	)

54 
	#MSGTYPE_EBLINK_USER_PAYLOAD
 (255Ë

	)

55 
	#MSGTYPE_EBLINK_BATT_USER_PAYLOAD
 (254Ë

	)

70 
uöt8_t
 
	mfcode
;

71 
uöt8_t
 
	m§cAddr
[
ADDR_BYTE_SIZE
];

72 
uöt8_t
 
	m£qNum
;

73 
uöt8_t
 
	m¸c
[2];

74 } 
	ttdﬂ_uwb_blök_msg
;

75 
tdﬂ_uwb_blök_msg
 
	gtx_uwb_mesßge_èg_blök
;

92 
uöt8_t
 
	mfcode
;

93 
uöt8_t
 
	m§cAddr
[
ADDR_BYTE_SIZE
];

94 
uöt8_t
 
	m£qNum
;

95 
uöt8_t
 
	mmsgTy≥
;

96 } 
	ttdﬂ_uwb_eblök_hódî
;

97 
tdﬂ_uwb_eblök_hódî
 
	gtx_uwb_mesßge_èg_eblök_hódî
;

114 
tdﬂ_uwb_eblök_hódî
 
	mhódî
;

115 
uöt8_t
 
	mb©tVﬁège
;

116 
uöt8_t
 
	m¸c
[2];

117 } 
	ttdﬂ_uwb_eblök_b©t_msg
;

118 
tdﬂ_uwb_eblök_b©t_msg
 
	gtx_uwb_mesßge_èg_eblök_b©t
;

135 
tdﬂ_uwb_eblök_hódî
 
	mhódî
;

136 
uöt8_t
 
	mrﬁl
;

137 
uöt8_t
 
	mpôch
;

138 
uöt8_t
 
	myaw
;

139 
uöt8_t
 
	m¸c
[2];

140 } 
	ttdﬂ_uwb_eblök_‹õ¡_msg
;

141 
tdﬂ_uwb_eblök_‹õ¡_msg
 
	gtx_uwb_mesßge_èg_eblök_‹õ¡
;

160 
tdﬂ_uwb_eblök_hódî
 
	mhódî
;

161 
uöt8_t
 
	mb©tVﬁège
;

162 
uöt8_t
 
	mrﬁl
;

163 
uöt8_t
 
	mpôch
;

164 
uöt8_t
 
	myaw
;

165 
uöt8_t
 
	m¸c
[2];

166 } 
	ttdﬂ_uwb_eblök_b©t_‹õ¡_msg
;

167 
tdﬂ_uwb_eblök_b©t_‹õ¡_msg
 
	gtx_uwb_mesßge_èg_eblök_b©t_‹õ¡
;

183 
tdﬂ_uwb_eblök_hódî
 
	mhódî
;

184 
uöt8_t
 
	m∑ylﬂd_c⁄t
;

185 
uöt8_t
 
	m∑ylﬂd
[24];

186 
uöt8_t
 
	m¸c
[2];

187 } 
	ttdﬂ_uwb_eblök_∑ylﬂd_msg_t
;

188 
tdﬂ_uwb_eblök_∑ylﬂd_msg_t
 
	gtx_uwb_mesßge_èg_eblök_∑ylﬂd
;

204 
tdﬂ_uwb_eblök_hódî
 
	mhódî
;

205 
uöt8_t
 
	mb©tVﬁège
;

206 
uöt8_t
 
	m∑ylﬂd_c⁄t
;

207 
uöt8_t
 
	m∑ylﬂd
[24];

208 
uöt8_t
 
	m¸c
[2];

209 } 
	ttdﬂ_uwb_eblök_b©t_∑ylﬂd_msg_t
;

210 
tdﬂ_uwb_eblök_b©t_∑ylﬂd_msg_t
 
	gtx_uwb_mesßge_èg_eblök_b©t_∑ylﬂd
;

253 #ifde‡
SEND_OLD_INFOBLINK


273 
uöt8_t
 
	mfcode
;

274 
uöt8_t
 
	m§cAddr
[
ADDR_BYTE_SIZE
];

275 
uöt8_t
 
	m£qNum
;

276 
uöt8_t
 
	mmsgTy≥
;

277 
uöt8_t
 
	mb©tVﬁège
;

278 
uöt8_t
 
	m∂©f‹m
;

279 
uöt8_t
 
	mhw_vî
[2];

280 
uöt8_t
 
	mfw_vî
[2];

281 
uöt8_t
 
	mch™√l
;

282 
uöt8_t
 
	md©a_øã
;

283 
uöt8_t
 
	m¥ómbÀ
;

284 
uöt8_t
 
	m¥f
;

285 
uöt8_t
 
	m¥ómCode
;

286 
uöt8_t
 
	mnSfd
;

287 
uöt8_t
 
	mm¸
;

288 
uöt8_t
 
	møndom_dev
;

289 
uöt8_t
 
	mª‰esh_øã
[4];

290 
uöt8_t
 
	mTXpowî
[4];

291 
uöt8_t
 
	mmou¡ed_£ns‹s
;

292 
uöt8_t
 
	ma˘ive_£ns‹s
;

293 
uöt8_t
 
	mm¸_thªshﬁd
[2];

294 
uöt8_t
 
	mIMU_FS_ønge
;

295 
uöt8_t
 
	mBARO_£âög
;

296 
uöt8_t
 
	mRX_≥riod
[4];

297 
uöt8_t
 
	mRX_duøti⁄
[2];

298 
uöt8_t
 
	mAHRS_ª¥e£¡©i⁄
;

299 
uöt8_t
 
	m¸c
[2];

300 } 
	ttdﬂ_uwb_eblök_öfo_msg
;

301 
tdﬂ_uwb_eblök_öfo_msg
 
	gtx_uwb_mesßge_èg_eblök_öfo
;

326 
uöt8_t
 
	mfcode
;

327 
uöt8_t
 
	m§cAddr
[
ADDR_BYTE_SIZE
];

328 
uöt8_t
 
	m£qNum
;

329 
uöt8_t
 
	mmsgTy≥
;

330 
uöt8_t
 
	mb©tVﬁège
;

331 
uöt8_t
 
	m∂©f‹m
;

332 
uöt8_t
 
	mhw_vî
[2];

333 
uöt8_t
 
	mfw_vî
[2];

334 
uöt8_t
 
	mch™√l
;

335 
uöt8_t
 
	md©a_øã
;

336 
uöt8_t
 
	m¥ómbÀ
;

337 
uöt8_t
 
	m¥f
;

338 
uöt8_t
 
	m¥ómCode
;

339 
uöt8_t
 
	mnSfd
;

340 
uöt8_t
 
	mm¸
;

341 
uöt8_t
 
	møndom_dev
;

342 
uöt8_t
 
	mª‰esh_øã
[4];

343 
uöt8_t
 
	mno_mŸ_ª‰esh_øã
[4];

344 
uöt8_t
 
	mTXpowî
[4];

345 
uöt8_t
 
	mmou¡ed_£ns‹s
;

346 
uöt8_t
 
	ma˘ive_£ns‹s
;

347 
uöt8_t
 
	mm¸_thªshﬁd
[2];

348 
uöt8_t
 
	mIMU_FS_ønge
;

349 
uöt8_t
 
	mBARO_£âög
;

350 
uöt8_t
 
	mRX_≥riod
[4];

351 
uöt8_t
 
	mRX_duøti⁄
[2];

352 
uöt8_t
 
	mAHRS_ª¥e£¡©i⁄
;

353 
uöt8_t
 
	m¸c
[2];

354 } 
	ttdﬂ_uwb_eblök_öfo_msg
;

355 
tdﬂ_uwb_eblök_öfo_msg
 
	gtx_uwb_mesßge_èg_eblök_öfo
;

374 
tdﬂ_uwb_eblök_hódî
 
	mhódî
;

375 
öt8_t
 
	mq0
;

376 
öt8_t
 
	mq1
;

377 
öt8_t
 
	mq2
;

378 
öt8_t
 
	mq3
;

379 
uöt8_t
 
	m¸c
[2];

380 } 
	ttdﬂ_uwb_eblök_QUATERNION_msg
;

381 
tdﬂ_uwb_eblök_QUATERNION_msg
 
	gtx_uwb_mesßge_èg_eblök_QUATERNION
;

395 
tdﬂ_uwb_eblök_hódî
 
	mhódî
;

396 
uöt8_t
 
	mb©tVﬁège
;

397 
öt8_t
 
	mq0
;

398 
öt8_t
 
	mq1
;

399 
öt8_t
 
	mq2
;

400 
öt8_t
 
	mq3
;

401 
uöt8_t
 
	m¸c
[2];

402 } 
	ttdﬂ_uwb_eblök_b©t_QUATERNION_msg
;

403 
tdﬂ_uwb_eblök_b©t_QUATERNION_msg
 
	gtx_uwb_mesßge_èg_eblök_b©t_QUATERNION
;

428 
tdﬂ_uwb_eblök_hódî
 
	mhódî
;

429 
uöt8_t
 
	mTMP_PRS
[4];

430 
öt8_t
 
	mq0
;

431 
öt8_t
 
	mq1
;

432 
öt8_t
 
	mq2
;

433 
öt8_t
 
	mq3
;

434 
uöt8_t
 
	m¸c
[2];

435 } 
	ttdﬂ_uwb_eblök_QUAT_PRS_msg
;

436 
tdﬂ_uwb_eblök_QUAT_PRS_msg
 
	gtx_uwb_mesßge_èg_eblök_QUAT_PRS
;

454 
tdﬂ_uwb_eblök_hódî
 
	mhódî
;

455 
uöt8_t
 
	mb©tVﬁège
;

456 
uöt8_t
 
	mTMP_PRS
[4];

457 
öt8_t
 
	mq0
;

458 
öt8_t
 
	mq1
;

459 
öt8_t
 
	mq2
;

460 
öt8_t
 
	mq3
;

461 
öt8_t
 
	m¸c
[2];

462 } 
	ttdﬂ_uwb_eblök_b©t_QUAT_PRS_msg
;

463 
tdﬂ_uwb_eblök_b©t_QUAT_PRS_msg
 
	gtx_uwb_mesßge_èg_eblök_b©t_QUAT_PRS
;

481 
tdﬂ_uwb_eblök_hódî
 
	mhódî
;

482 
uöt8_t
 
	m∑ylﬂd
[(
tdﬂ_uwb_eblök_öfo_msg
)];

483 
uöt8_t
 
	m¸c
[2];

484 } 
	ttdﬂ_uwb_eblök_m¨ked_msg_t
;

485 
tdﬂ_uwb_eblök_m¨ked_msg_t
 
	gtx_uwb_mesßge_èg_eblök_m¨ked
;

487 #ifde‡
USER_PAYLOAD_EN


501 
tdﬂ_uwb_eblök_hódî
 
	mhódî
;

502 
uöt8_t
 
	mb©tVﬁège
;

503 
uöt8_t
 
	mu£rMsgTy≥
;

504 
uöt8_t
 
	m∑ylﬂd
[
USER_PAYLOAD_SIZE
];

505 
uöt8_t
 
	m¸c
[2];

506 } 
	ttdﬂ_uwb_eblök_b©t_u£r_∑ylﬂd_msg_t
;

507 
tdﬂ_uwb_eblök_b©t_u£r_∑ylﬂd_msg_t
 
	gtx_uwb_mesßge_èg_eblök_b©t_u£r_∑ylﬂd
;

522 
tdﬂ_uwb_eblök_hódî
 
	mhódî
;

523 
uöt8_t
 
	mu£rMsgTy≥
;

524 
uöt8_t
 
	m∑ylﬂd
[
USER_PAYLOAD_SIZE
];

525 
uöt8_t
 
	m¸c
[2];

526 } 
	ttdﬂ_uwb_eblök_u£r_∑ylﬂd_msg_t
;

527 
tdﬂ_uwb_eblök_u£r_∑ylﬂd_msg_t
 
	gtx_uwb_mesßge_èg_eblök_u£r_∑ylﬂd
;

539 vﬁ©ûê
uöt8_t
 
	g¥ï¨ed_blök
[128];

542 
tdﬂVÆues_t
 
	gtdﬂVÆues
;

545 
uöt32_t
 
ˇlc_πls_ª‰eshøã
();

546 
öô_Blöks
(
sy°emVÆues_t
 *
sy°emVÆues
);

547 
¥ï¨eRegi°Msg
(
sy°emVÆues_t
* 
sy°emVÆues
);

548 
¥ï¨eNextBlökMsg
(
sy°emVÆues_t
* 
sy°emVÆues
);

549 
°¨t_UWB_TX
();

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\application\TEIA_routines.c

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~"TEIA_routöes.h
"

6 
	~"../∂©f‹m/≥rùhîÆ.h
"

7 
	~"../∂©f‹m/timög.h
"

8 
	~"../∂©f‹m/DWM_routöes.h
"

9 
	~"../∂©f‹m/n⁄_vﬁ©ûe_mem‹y.h
"

10 
	~"TDOA_routöes.h
"

11 
	~"ƒf.h
"

12 
	~"LIS2DH12.h
"

13 
	~"ƒf_≥rùhîÆs.h
"

15 
	~"ƒf_dñay.h
"

16 
	~"ƒf_drv_gpiŸe.h
"

17 
	~"ƒf_drv_comm⁄.h
"

18 
	~"≠p_utû_∂©f‹m.h
"

19 
	~"£âög.h
"

20 
	~"DWM_routöes.h
"

21 
	~"deÁu…_£t.h
"

22 
	~"deˇ_devi˚_≠i.h
"

23 
	~"../../LMS_UWB_2021/maö.h
"

24 
	~"≠p_u¨t.h
"

26 c⁄° 
uöt8_t
 
	g©_cmd_msg
[
AT_SEND_CMD_LENGTH
] = {'A','T','+','L','O','R','A','_','M','S','G','W','=','1',',','<'};

28 
	$MCU_öô
()

30 
	`˛ock_c⁄figuøti⁄
();

31 
	`πc_c⁄figuøti⁄
();

32 
	`GPIOs_öô
();

33 
	`UART_Inô
() ;

34 
	`UWB_SPI_pös_íabÀ
();

35 
baudøã
 = 
	`SPI_öô
(
SPI_BAUDRATE_LOW
);

36 
	`I2C_c⁄fig
(100);

37 
	`dñay_ms
(10);

38 
	}
}

40 
	$HW_öô
()

42 
	`UWB_SPI_pös_íabÀ
();

43 
	`DWM1000_öôAndDoHwRe£tPro˚duª
();

44 
	`DWM1000_öô
();

46 
	`ACC_Inô
();

47 
	}
}

49 
	$ACC_Inô
()

52 
	`lis2dh12_WOM_£âög
(
LIS2DH12_ODR25_Hz
);

53 
	}
}

56 
	$ADC_B©ãry_check
()

58 
ãmp
, 
tmp
 ;

59 
	`ADC_öô
();

60 
	`check_b©ãrySètus
(
åue
);

61 
	`ADC_Unöô
();

62 
b©ãry
 = 
sy°emVÆues
.
a˘uÆ_b©t_vﬁège_øw
;

63 
ãmp
 = ()
b©ãry
 ;

64 
tmp
 = 
ãmp
 /100 ;Åemp =Åemp -Åmp*100 ;

65 
b©ãry_amou¡
[0] = (
uöt8_t
)
tmp
 + 48 ;

66 
tmp
 = 
ãmp
/10 ;Åemp =Åemp -Åmp*10 ;

67 
b©ãry_amou¡
[1] = (
uöt8_t
)
tmp
 + 48 ;

68 
b©ãry_amou¡
[2] = (
uöt8_t
)
ãmp
 + 48 ;

69 
	}
}

71 
	$LORA_Dñay_time
()

73 
uöt32_t
 
time°amp_°¨t
,
time°amp_íd
 ;

75 
time°amp_°¨t
 = 
	`gë_RTC_time°amp
(
åue
);

76 
Êag_©_l‹a_£nd
 = 
åue
;

77 
AT_LORA_FLAG_OK
 = 0 ;

78 !
AT_LORA_FLAG_OK
){

79 
time°amp_íd
 = 
	`gë_RTC_time°amp
(
åue
);

80 if((
time°amp_íd
-
time°amp_°¨t
Ë> 
USER_PB_1s_waô
){

81 
AT_LORA_FLAG_OK
 = 
åue
;

84 
AT_LORA_FLAG_OK
 = 
Ál£
;

85 
	`dñay_us
(200);

86 
	}
}

88 
	$Síd_LoRa_Wakeup_Sètus
()

90 
i
 ;

91 
Êag_©_l‹a_£nd
 = 
åue
 ;

92  
i
 = 0 ; i < 
AT_SEND_CMD_LENGTH
 ; i++Ë
	`≠p_u¨t_put
(
©_cmd_msg
[i]Ë!
NRF_SUCCESS
);

93  
i
 = 0 ; i < 8 ; i++Ë
	`≠p_u¨t_put
(
UWB_MACid
[i]Ë!
NRF_SUCCESS
);

94 
	`≠p_u¨t_put
('B'Ë!
NRF_SUCCESS
);

95  
i
 = 0 ; i < 3 ; i++Ë
	`≠p_u¨t_put
(
b©ãry_amou¡
[i]Ë!
NRF_SUCCESS
);

96 
	`≠p_u¨t_put
('>'Ë!
NRF_SUCCESS
);app_uart_put('\r') != NRF_SUCCESS); app_uart_put('\n') != NRF_SUCCESS);

98 
	}
}

100 
	$Síd_LoRa_U∂ﬂd
()

102 
i
 ;

103 
Êag_©_l‹a_£nd
 = 
åue
 ;

104  
i
 = 0 ; i < 
AT_SEND_CMD_LENGTH
 ; i++Ë
	`≠p_u¨t_put
(
©_cmd_msg
[i]Ë!
NRF_SUCCESS
);

105  
i
 = 1 ; i < 89 ; i++Ë
	`≠p_u¨t_put
(
Êash_rd_Buf
[i]Ë!
NRF_SUCCESS
);

106 
	`≠p_u¨t_put
('>'Ë!
NRF_SUCCESS
);app_uart_put('\r') != NRF_SUCCESS); app_uart_put('\n') != NRF_SUCCESS);

107 
	}
}

109 
	$LORA_Sëtög
()

111 
Êag_©_l‹a_£nd
 = 
åue
 ;

112 
	`¥ötf
("AT+LORA_SCODEW=BB\r\n"); 
	`LORA_Dñay_time
();

113 
	`¥ötf
("AT+LORA_APPSKEYW=0123456789ABCDEF0123456789ABCDEF\r\n"); 
	`LORA_Dñay_time
();

114 
	`¥ötf
("AT+LORA_DEVIDW=07\r\n"); 
	`LORA_Dñay_time
();

115 
	`¥ötf
("AT+LORA_BW=9\r\n"); 
	`LORA_Dñay_time
();

116 
	`¥ötf
("AT+LORA_PWRS=13\r\n"); 
	`LORA_Dñay_time
();

117 
	`¥ötf
("AT+LORA_SFS=12\r\n"); 
	`LORA_Dñay_time
();

118 
	`¥ötf
("AT+LORA_FREQS=26\r\n"); 
	`LORA_Dñay_time
();

119 
	`¥ötf
("AT+LORA_COMPRESSW=2\r\n"); 
	`LORA_Dñay_time
();

121 
	`¥ötf
("AT+LORA_BRIEF=1\r\n"); 
	`LORA_Dñay_time
();

122 
Êag_©_l‹a_£nd
 = 
Ál£
 ;

123 
	}
}

125 
	$C⁄vît_Maˇddªss
()

127 
uöt8_t
 
k
,
tmp
 ;

128 
tmp
 = 0 ;tmp < 6 ;Åmp++){

129 
k
 = (
uöt8_t
)((
UWB_MACaddªss
 >> (8*
tmp
) ) & 0xFF) ;

130 
UWB_MACid
[
tmp
*2] = (
k
 >> 4) & 0x0f ;

131 
UWB_MACid
[
tmp
*2+1] = 
k
 & 0x0f ;

133 
tmp
 = 0 ;tmp < 12 ;Åmp++){

134 if–
UWB_MACid
[
tmp
] < 10 ) UWB_MACid[tmp] = UWB_MACid[tmp]+48 ;

135 
UWB_MACid
[
tmp
] = UWB_MACid[tmp]+55 ;

138 
	}
}

140 
	$LORA_Wakeup
()

142 
	`ƒf_gpio_pö_˛ór
(
LORA_WAKEUP
);
	`dñay_us
(5);

143 
	`ƒf_gpio_pö_£t
(
LORA_WAKEUP
); 
	`dñay_ms
(1) ;

145 
Êag_l‹a_íabÀ
 = 
åue
;

146 
Êag_l‹a_wakeup_°©us
 = 
åue
 ;

147 
Êag_¶ìp_íabÀ
 = 
Ál£
 ;

148 
Êag_l‹a_ª˚ive_íabÀ
 = 
åue
 ;

149 
Êag_©_l‹a_£nd
 = 
åue
 ;

150 
	`¥ötf
("AT\r\n"); 
	`LORA_Dñay_time
();

151 
Êag_©_l‹a_£nd
 = 
Ál£
 ;

152 
	}
}

154 
	$LORA_SÀï
()

156 
	`¥ötf
("AT+LORA_SLEEP=\r\n");

157 
	`dñay_ms
(2);

159 
Êag_l‹a_íabÀ
 = 
Ál£
 ;

160 
Êag_l‹a_wakeup_°©us
 = 
Ál£
 ;

161 
Êag_¶ìp_íabÀ
 = 
åue
 ;

162 
Êag_l‹a_ª˚ive_íabÀ
 = 
Ál£
 ;

163 
	}
}

165 
	$acc_bound¨y_d©a
()

167 
	`lis2dh12_ªad_c‹r_acc_d©a
();

169 
acc_√w_x
 = (
öt32_t
)
£ns‹s_d©a
.
acc_d©a
.
x_axis
;

170 
acc_√w_y
 = (
öt32_t
)
£ns‹s_d©a
.
acc_d©a
.
y_axis
;

171 
acc_√w_z
 = (
öt32_t
)
£ns‹s_d©a
.
acc_d©a
.
z_axis
;

173 if(
acc_√w_x
 <= 0){

174 if(
acc_ﬁd_x
 <0Ë
acc_x
 =ácc_ﬁd_x - 
acc_√w_x
 ;

175 
acc_x
 = 
acc_ﬁd_x
 + 
acc_√w_x
 ;

178 if(
acc_ﬁd_x
 <0Ë
acc_x
 =ácc_ﬁd_x + 
acc_√w_x
 ;

179 
acc_x
 = 
acc_ﬁd_x
 - 
acc_√w_x
 ;

181 if(
acc_√w_y
 <= 0){

182 if(
acc_ﬁd_y
 <0Ë
acc_y
 =ácc_ﬁd_y - 
acc_√w_y
 ;

183 
acc_y
 = 
acc_ﬁd_y
 + 
acc_√w_y
 ;

186 if(
acc_ﬁd_y
 <0Ë
acc_y
 =ácc_ﬁd_y + 
acc_√w_y
 ;

187 
acc_y
 = 
acc_ﬁd_y
 - 
acc_√w_y
 ;

189 if(
acc_√w_z
 <= 0){

190 if(
acc_ﬁd_z
 <0Ë
acc_z
 =ácc_ﬁd_z - 
acc_√w_z
 ;

191 
acc_z
 = 
acc_ﬁd_z
 + 
acc_√w_z
 ;

194 if(
acc_ﬁd_z
 <0Ë
acc_z
 =ácc_ﬁd_z + 
acc_√w_z
 ;

195 
acc_z
 = 
acc_ﬁd_z
 - 
acc_√w_z
 ;

197 
acc_x
 = 
	`abs
◊cc_xË; 
acc_y
 =ábs◊cc_yË; 
acc_z
 =ábs(acc_z) ;

198 
acc_ﬁd_x
 = 
acc_√w_x
 ; 
acc_ﬁd_y
 = 
acc_√w_y
 ; 
acc_ﬁd_z
 = 
acc_√w_z
 ;

199 
	}
}

202 
	$Acc_com∑ª
()

204 if((
acc_x
 <
ACC_Bound¨y
Ë&& (
acc_y
 <ACC_Bound¨yË&& (
acc_z
 <= ACC_Boundary)){

205 
cou¡î_acc_mŸi⁄
++;

208 
cou¡î_acc_mŸi⁄
 = 0;

210 if(
cou¡î_acc_mŸi⁄
 >
ACC_WAKEUP_PERIOD
 ){

211 if–
Êag_l‹a_wakeup_°©us
 ) 
	`LORA_SÀï
();

212 
	`V¨übÀ_Re£t
() ;

215 
öt_Êag
.
mŸi⁄_a˘i⁄_dëe˘ed
 = 
åue
 ;

217 
	}
}

219 
	$UWB_SPI_öô
()

221 
	`Fœsh_SPI_pös_dißbÀ
() ;

222 
	`UWB_SPI_pös_íabÀ
();

223 
baudøã
 = 
	`SPI_öô
(
SPI_BAUDRATE_LOW
);

224 
	}
}

226 
	$MEMORY_SPI_öô
()

228 
	`UWB_SPI_pös_dißbÀ
() ;

229 
	`Fœsh_SPI_pös_íabÀ
();

230 
baudøã
 = 
	`Fœsh_SPI_öô
(
SPI_BAUDRATE_LOW
);

231 
	}
}

233 
	$c⁄figuª_UWB
()

235 
	`UWB_SPI_pös_íabÀ
();

236 
	`DWM_ªc⁄figuª
();

237 
	`GPIO_IRQ_íabÀ
();

238 
	`UWB_IRQ_íabÀ
();

239 
	}
}

241 
	$UWB_ødio_wake_up
()

243 
	`DMW1000_wake_up
();

244 
	}
}

246 
	$UWB_ødio_íãr_¶ìp
()

248 
	`DM1000_íãr_¶ìp
();

249 
	}
}

251 
	$öô_TDOA_∑øms
()

253 
	`ˇlc_πls_ª‰eshøã
();

254 
	`öô_Blöks
(&
sy°emVÆues
);

255 
tdﬂTimög
.
no_mŸi⁄_dñay
 = 
ACC_TIME_TO_WAIT_INMOTION
 /ÅdﬂTimög.
Re‰eshR©e_ms
;

256 
tdﬂTimög
.
øndom_dev_í
 = 
tdﬂP¨amëîs
.
u£_øndom_devüti⁄
;

257 
tdﬂVÆues
.
£nd_Eblök_a·î_RR
 = 
EXTENDED_BLINK_BATT_FREQ
;

258 
tdﬂVÆues
.
RR_cou¡î
 = 0;

259 
tdﬂVÆues
.
is_fú°_blök
 = 
åue
;

260 
tdﬂTimög
.
œ°_Blök_time°amp
 = 
	`gë_RTC_time°amp
(
åue
);

261 
	}
}

263 
	$£nd_Blök
()

265 vﬁ©ûê
boﬁ
 
blök_£¡
;

266 
	`UWB_SPI_pös_íabÀ
();

267 
	`UWB_ødio_wake_up
();

268 
	`¥ï¨eNextBlökMsg
(&
sy°emVÆues
);

269 
	`°¨t_UWB_TX
();

270 !
blök_£¡
);

271 
blök_£¡
 = 
Ál£
;

272 
	`UWB_ødio_íãr_¶ìp
();

273 
	`UWB_SPI_pös_dißbÀ
();

274 
	}
}

275 
	$£nd_Regi°î
()

277 vﬁ©ûê
boﬁ
 
blök_£¡
;

278 
	`UWB_SPI_pös_íabÀ
();

279 
	`UWB_ødio_wake_up
();

280 
	`¥ï¨eRegi°Msg
(&
sy°emVÆues
);

281 
	`°¨t_UWB_TX
();

282 !
blök_£¡
);

283 
blök_£¡
 = 
Ál£
;

284 
	`UWB_ødio_íãr_¶ìp
();

285 
	`UWB_SPI_pös_dißbÀ
();

286 
	}
}

288 
	$check_b©ãrySètus
(
boﬁ
 
fú°_mósuª
)

290 i‡((
sy°emVÆues
.
√ed_to_mósuª_b©ãry
 =
MEAS_BATT_AFTER_RR
Ë|| (
fú°_mósuª
)) {

291 
sy°emVÆues
.
a˘uÆ_b©t_vﬁège_øw
 = 
	`mós_b©ãry_vﬁège_øw
();

292 
sy°emVÆues
.
√ed_to_mósuª_b©ãry
 = 0;

293 if(
fú°_mósuª
Ë
sy°emVÆues
.
lowb©tcou¡
 = 
SLEEP_AFTER_LOW_BATT_MEASURE
 - 1;

295 i‡(
sy°emVÆues
.
a˘uÆ_b©t_vﬁège_øw
 <
MIN_ALLOWED_BATT_VOLTAGE
) {

296 
sy°emVÆues
.
lowb©tcou¡
++;

298 
sy°emVÆues
.
lowb©tcou¡
 = 0;

300 
sy°emVÆues
.
√ed_to_mósuª_b©ãry
++;

301 
	}
}

303 
	$shutdown_èg
()

305 
	`UWB_IRQ_dißbÀ
();

306 
	`PB_IRQ_dißbÀ
();

307 
	`ACC_IRQ_dißbÀ
();

308 
	`RTCs_IRQ_dißbÀ
();

309 
	`CHG_IRQ_dißbÀ
();

310 
	`DM1000_íãr_dìp_¶ìp
();

311 
	`DM1000_íãr_¶ìp
();

312 
	`£t_£ns‹s_¶ìp
();

313 
	}
}

315 
	$ßve_√w_c⁄fig
()

319 
	}
}

322 
	$ßve_deÁu…_c⁄fig
()

325 
u£rD©a_t
 
d©aToSave
;

327 
d©aToSave
.
öô
 = 
SETTING_INIT_CHECK
;

328 
d©aToSave
.
ch™√l
 = 5;

329 
d©aToSave
.
d©a_øã
 = 1;

330 
d©aToSave
.
RF_¥ofûe
 = 4;

331 
d©aToSave
.
¥ómbÀ
 = 5;

332 
d©aToSave
.
¥f
 = 1;

333 
d©aToSave
.
¥ómCode
 = 12;

334 
d©aToSave
.
nSfd
 = 1;

335 
d©aToSave
.
u£_øndom_devüti⁄
 = 1;

336 
d©aToSave
.
acc_mode
 = 2;

337 
d©aToSave
.
acc_£ns
 = 48 | 
LOW_THRESHOLD_FLAG
;

338 
d©aToSave
.
u£r_ª‰esh_øã
 = 100;

339 
d©aToSave
.
no_mŸi⁄_ª‰esh_øã
 = 0;

340 
d©aToSave
.
rx_≥riod
 = 0;

341 
d©aToSave
.
rx_duøti⁄
 = 1000;

342 
d©aToSave
.
tx_pwr_Àvñ
 = 0x0UL;

343 
d©aToSave
.
Eblök_c⁄t
 = 0x00;

344 
d©aToSave
.
£ns_c‹r_d©a
 = 0x00;

345 
d©aToSave
.
GYRO_FS
 = 0;

346 
d©aToSave
.
ACC_FS
 = 0;

347 
d©aToSave
.
BARO_£âög
 = 0;

348 
d©aToSave
.
AHRS_íabÀ
 = 0;

349 
d©aToSave
.
mag_ˇlib_mode
 = 0;

350 
d©aToSave
.
geo_mag_Êux
 = 0;

351 
d©aToSave
.
acc_off£t
.
x_axis
 = 0;

352 
d©aToSave
.
acc_off£t
.
y_axis
 = 0;

353 
d©aToSave
.
acc_off£t
.
z_axis
 = 0;

354 
d©aToSave
.
mag_off£t
.
x_axis
 = 0;

355 
d©aToSave
.
mag_off£t
.
y_axis
 = 0;

356 
d©aToSave
.
mag_off£t
.
z_axis
 = 0;

357 
d©aToSave
.
gyro_off£t
.
x_axis
 = 0;

358 
d©aToSave
.
gyro_off£t
.
y_axis
 = 0;

359 
d©aToSave
.
gyro_off£t
.
z_axis
 = 0;

362 
	}
}

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\application\TEIA_routines.h

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

7 
MCU_öô
();

8 
HW_öô
();

9 
V¨übÀ_Re£t
() ;

10 
Fœsh_GPIO_öô
();

11 
UWB_GPIO_öô
();

12 
UWB_SPI_öô
();

13 
MEMORY_SPI_öô
();

15 
LORA_Sëtög
();

16 
LORA_SÀï
();

17 
LORA_Dñay_time
();

18 
LORA_SW_RESET
();

19 
LORA_Wakeup
();

21 
Síd_LoRa_Wakeup_Sètus
();

22 
Síd_LoRa_U∂ﬂd
() ;

24 
Fœsh_SPI_pös_íabÀ
();

25 
uöt16_t
 
Fœsh_SPI_öô
(uöt16_à
‰eq_kHz
);

26 
Êash_upd©e
() ;

28 
UWB_ødio_wake_up
();

29 
öô_TDOA_∑øms
();

30 
c⁄figuª_UWB
();

31 
boﬁ
 
RX_h™dÀr
(boﬁ 
fú°_rx
);

32 
£nd_Blök
();

33 
£nd_Regi°î
();

34 
TAG_¶ìp_STD
();

35 
TAG_¶ìp_wôh_AHRS
();

36 
buâ⁄_a˘i⁄_h™dÀr
();

37 
uöt8_t
 
no_mŸi⁄_h™dÀr
();

38 
c⁄figuª_£ns‹s
();

39 
check_b©ãrySètus
(
boﬁ
 
fú°_mósuª
);

40 
boﬁ
 
check_NFC_EEPROM
();

41 
ª£tToDeÁu…
();

42 
lﬂdSëtög
();

43 
shutdown_èg
();

44 
¶ìp_whûe_ch¨gög
();

45 
boﬁ
 
check_√w_£âög
(boﬁ 
a·î_°¨t_check
);

46 
íãr_boŸlﬂdî
();

47 
ßve_deÁu…_c⁄fig
();

48 
UWB_ødio_íãr_¶ìp
();

49 
ßve_√w_c⁄fig
();

51 
ADC_B©ãry_check
();

52 
C⁄vît_Maˇddªss
();

53 
ReC⁄vît_Maˇddªss
();

55 
ACC_Inô
();

56 
Acc_com∑ª
();

57 
acc_bound¨y_d©a
();

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\config\sdk_config.h

3 #i‚de‡
SDK_CONFIG_H


4 
	#SDK_CONFIG_H


	)

6 #ifde‡
USE_APP_CONFIG


7 
	~"≠p_c⁄fig.h
"

14 #i‚de‡
CLOCK_ENABLED


15 
	#CLOCK_ENABLED
 1

	)

17 #i‡ 
CLOCK_ENABLED


24 #i‚de‡
CLOCK_CONFIG_XTAL_FREQ


25 
	#CLOCK_CONFIG_XTAL_FREQ
 0

	)

34 #i‚de‡
CLOCK_CONFIG_LF_SRC


35 
	#CLOCK_CONFIG_LF_SRC
 1

	)

47 #i‚de‡
CLOCK_CONFIG_IRQ_PRIORITY


48 
	#CLOCK_CONFIG_IRQ_PRIORITY
 3

	)

62 #i‚de‡
RTC_ENABLED


63 
	#RTC_ENABLED
 1

	)

65 #i‡ 
RTC_ENABLED


69 #i‚de‡
RTC_DEFAULT_CONFIG_FREQUENCY


70 
	#RTC_DEFAULT_CONFIG_FREQUENCY
 32768

	)

76 #i‚de‡
RTC_DEFAULT_CONFIG_RELIABLE


77 
	#RTC_DEFAULT_CONFIG_RELIABLE
 0

	)

89 #i‚de‡
RTC_DEFAULT_CONFIG_IRQ_PRIORITY


90 
	#RTC_DEFAULT_CONFIG_IRQ_PRIORITY
 2

	)

96 #i‚de‡
RTC0_ENABLED


97 
	#RTC0_ENABLED
 0

	)

103 #i‚de‡
RTC1_ENABLED


104 
	#RTC1_ENABLED
 1

	)

110 #i‚de‡
RTC2_ENABLED


111 
	#RTC2_ENABLED
 1

	)

115 #i‚de‡
NRF_MAXIMUM_LATENCY_US


116 
	#NRF_MAXIMUM_LATENCY_US
 1000

	)

131 #i‚de‡
TWI_ENABLED


132 
	#TWI_ENABLED
 1

	)

134 #i‡ 
TWI_ENABLED


141 #i‚de‡
TWI_DEFAULT_CONFIG_FREQUENCY


142 
	#TWI_DEFAULT_CONFIG_FREQUENCY
 26738688

	)

148 #i‚de‡
TWI_DEFAULT_CONFIG_CLR_BUS_INIT


149 
	#TWI_DEFAULT_CONFIG_CLR_BUS_INIT
 0

	)

155 #i‚de‡
TWI_DEFAULT_CONFIG_HOLD_BUS_UNINIT


156 
	#TWI_DEFAULT_CONFIG_HOLD_BUS_UNINIT
 0

	)

172 #i‚de‡
TWI_DEFAULT_CONFIG_IRQ_PRIORITY


173 
	#TWI_DEFAULT_CONFIG_IRQ_PRIORITY
 7

	)

179 #i‚de‡
TWI0_ENABLED


180 
	#TWI0_ENABLED
 0

	)

182 #i‡ 
TWI0_ENABLED


186 #i‚de‡
TWI0_USE_EASY_DMA


187 
	#TWI0_USE_EASY_DMA
 0

	)

194 #i‚de‡
TWI1_ENABLED


195 
	#TWI1_ENABLED
 1

	)

197 #i‡ 
TWI1_ENABLED


201 #i‚de‡
TWI1_USE_EASY_DMA


202 
	#TWI1_USE_EASY_DMA
 1

	)

219 #i‚de‡
WDT_ENABLED


220 
	#WDT_ENABLED
 1

	)

222 #i‡ 
WDT_ENABLED


230 #i‚de‡
WDT_CONFIG_BEHAVIOUR


231 
	#WDT_CONFIG_BEHAVIOUR
 0

	)

237 #i‚de‡
WDT_CONFIG_RELOAD_VALUE


238 
	#WDT_CONFIG_RELOAD_VALUE
 2000

	)

254 #i‚de‡
WDT_CONFIG_IRQ_PRIORITY


255 
	#WDT_CONFIG_IRQ_PRIORITY
 7

	)

260 #i‚de‡
WDT_CONFIG_LOG_ENABLED


261 
	#WDT_CONFIG_LOG_ENABLED
 0

	)

263 #i‡ 
WDT_CONFIG_LOG_ENABLED


272 #i‚de‡
WDT_CONFIG_LOG_LEVEL


273 
	#WDT_CONFIG_LOG_LEVEL
 3

	)

288 #i‚de‡
WDT_CONFIG_INFO_COLOR


289 
	#WDT_CONFIG_INFO_COLOR
 0

	)

304 #i‚de‡
WDT_CONFIG_DEBUG_COLOR


305 
	#WDT_CONFIG_DEBUG_COLOR
 0

	)

329 #i‚de‡
SAADC_ENABLED


330 
	#SAADC_ENABLED
 1

	)

332 #i‡ 
SAADC_ENABLED


340 #i‚de‡
SAADC_CONFIG_RESOLUTION


341 
	#SAADC_CONFIG_RESOLUTION
 0

	)

356 #i‚de‡
SAADC_CONFIG_OVERSAMPLE


357 
	#SAADC_CONFIG_OVERSAMPLE
 0

	)

363 #i‚de‡
SAADC_CONFIG_LP_MODE


364 
	#SAADC_CONFIG_LP_MODE
 0

	)

380 #i‚de‡
SAADC_CONFIG_IRQ_PRIORITY


381 
	#SAADC_CONFIG_IRQ_PRIORITY
 7

	)

386 #i‚de‡
SAADC_CONFIG_LOG_ENABLED


387 
	#SAADC_CONFIG_LOG_ENABLED
 0

	)

389 #i‡ 
SAADC_CONFIG_LOG_ENABLED


398 #i‚de‡
SAADC_CONFIG_LOG_LEVEL


399 
	#SAADC_CONFIG_LOG_LEVEL
 3

	)

414 #i‚de‡
SAADC_CONFIG_INFO_COLOR


415 
	#SAADC_CONFIG_INFO_COLOR
 0

	)

430 #i‚de‡
SAADC_CONFIG_DEBUG_COLOR


431 
	#SAADC_CONFIG_DEBUG_COLOR
 0

	)

480 #i‚de‡
GPIOTE_ENABLED


481 
	#GPIOTE_ENABLED
 1

	)

483 #i‡ 
GPIOTE_ENABLED


485 #i‚de‡
GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS


486 
	#GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS
 5

	)

502 #i‚de‡
GPIOTE_CONFIG_IRQ_PRIORITY


503 
	#GPIOTE_CONFIG_IRQ_PRIORITY
 7

	)

508 #i‚de‡
GPIOTE_CONFIG_LOG_ENABLED


509 
	#GPIOTE_CONFIG_LOG_ENABLED
 0

	)

511 #i‡ 
GPIOTE_CONFIG_LOG_ENABLED


520 #i‚de‡
GPIOTE_CONFIG_LOG_LEVEL


521 
	#GPIOTE_CONFIG_LOG_LEVEL
 3

	)

536 #i‚de‡
GPIOTE_CONFIG_INFO_COLOR


537 
	#GPIOTE_CONFIG_INFO_COLOR
 0

	)

552 #i‚de‡
GPIOTE_CONFIG_DEBUG_COLOR


553 
	#GPIOTE_CONFIG_DEBUG_COLOR
 0

	)

564 #i‚de‡
PERIPHERAL_RESOURCE_SHARING_ENABLED


565 
	#PERIPHERAL_RESOURCE_SHARING_ENABLED
 0

	)

567 #i‡ 
PERIPHERAL_RESOURCE_SHARING_ENABLED


570 #i‚de‡
COMMON_CONFIG_LOG_ENABLED


571 
	#COMMON_CONFIG_LOG_ENABLED
 0

	)

573 #i‡ 
COMMON_CONFIG_LOG_ENABLED


582 #i‚de‡
COMMON_CONFIG_LOG_LEVEL


583 
	#COMMON_CONFIG_LOG_LEVEL
 3

	)

598 #i‚de‡
COMMON_CONFIG_INFO_COLOR


599 
	#COMMON_CONFIG_INFO_COLOR
 0

	)

614 #i‚de‡
COMMON_CONFIG_DEBUG_COLOR


615 
	#COMMON_CONFIG_DEBUG_COLOR
 0

	)

626 #i‚de‡
SPI_ENABLED


627 
	#SPI_ENABLED
 1

	)

629 #i‡ 
SPI_ENABLED


646 #i‚de‡
SPI0_ENABLED


647 
	#SPI0_ENABLED
 1

	)

649 #i‡ 
SPI0_ENABLED


653 #i‚de‡
SPI0_USE_EASY_DMA


654 
	#SPI0_USE_EASY_DMA
 0

	)

667 #i‚de‡
SPI0_DEFAULT_FREQUENCY


668 
	#SPI0_DEFAULT_FREQUENCY
 1073741824

	)

676 #i‚de‡
SPI1_ENABLED


677 
	#SPI1_ENABLED
 0

	)

679 #i‡ 
SPI1_ENABLED


683 #i‚de‡
SPI1_USE_EASY_DMA


684 
	#SPI1_USE_EASY_DMA
 1

	)

697 #i‚de‡
SPI1_DEFAULT_FREQUENCY


698 
	#SPI1_DEFAULT_FREQUENCY
 1073741824

	)

706 #i‚de‡
SPI2_ENABLED


707 
	#SPI2_ENABLED
 0

	)

709 #i‡ 
SPI2_ENABLED


713 #i‚de‡
SPI2_USE_EASY_DMA


714 
	#SPI2_USE_EASY_DMA
 1

	)

720 #i‚de‡
SPI2_DEFAULT_FREQUENCY


721 
	#SPI2_DEFAULT_FREQUENCY
 1

	)

729 #i‚de‡
SPI_CONFIG_LOG_ENABLED


730 
	#SPI_CONFIG_LOG_ENABLED
 0

	)

732 #i‡ 
SPI_CONFIG_LOG_ENABLED


741 #i‚de‡
SPI_CONFIG_LOG_LEVEL


742 
	#SPI_CONFIG_LOG_LEVEL
 3

	)

757 #i‚de‡
SPI_CONFIG_INFO_COLOR


758 
	#SPI_CONFIG_INFO_COLOR
 0

	)

773 #i‚de‡
SPI_CONFIG_DEBUG_COLOR


774 
	#SPI_CONFIG_DEBUG_COLOR
 0

	)

785 #i‚de‡
UART_ENABLED


786 
	#UART_ENABLED
 1

	)

788 #i‡ 
UART_ENABLED


794 #i‚de‡
UART_DEFAULT_CONFIG_HWFC


795 
	#UART_DEFAULT_CONFIG_HWFC
 0

	)

803 #i‚de‡
UART_DEFAULT_CONFIG_PARITY


804 
	#UART_DEFAULT_CONFIG_PARITY
 0

	)

826 #i‚de‡
UART_DEFAULT_CONFIG_BAUDRATE


827 
	#UART_DEFAULT_CONFIG_BAUDRATE
 30801920

	)

843 #i‚de‡
UART_DEFAULT_CONFIG_IRQ_PRIORITY


844 
	#UART_DEFAULT_CONFIG_IRQ_PRIORITY
 7

	)

850 #i‚de‡
UART_EASY_DMA_SUPPORT


851 
	#UART_EASY_DMA_SUPPORT
 1

	)

857 #i‚de‡
UART_LEGACY_SUPPORT


858 
	#UART_LEGACY_SUPPORT
 1

	)

863 #i‚de‡
UART0_ENABLED


864 
	#UART0_ENABLED
 1

	)

866 #i‡ 
UART0_ENABLED


870 #i‚de‡
UART0_CONFIG_USE_EASY_DMA


871 
	#UART0_CONFIG_USE_EASY_DMA
 1

	)

879 #i‚de‡
UART_CONFIG_LOG_ENABLED


880 
	#UART_CONFIG_LOG_ENABLED
 0

	)

882 #i‡ 
UART_CONFIG_LOG_ENABLED


891 #i‚de‡
UART_CONFIG_LOG_LEVEL


892 
	#UART_CONFIG_LOG_LEVEL
 3

	)

907 #i‚de‡
UART_CONFIG_INFO_COLOR


908 
	#UART_CONFIG_INFO_COLOR
 0

	)

923 #i‚de‡
UART_CONFIG_DEBUG_COLOR


924 
	#UART_CONFIG_DEBUG_COLOR
 0

	)

935 #i‚de‡
APP_FIFO_ENABLED


936 
	#APP_FIFO_ENABLED
 0

	)

941 #i‚de‡
APP_UART_ENABLED


942 
	#APP_UART_ENABLED
 1

	)

944 #i‡ 
APP_UART_ENABLED


949 #i‚de‡
APP_UART_DRIVER_INSTANCE


950 
	#APP_UART_DRIVER_INSTANCE
 0

	)

958 #i‚de‡
APP_TIMER_ENABLED


959 
	#APP_TIMER_ENABLED
 1

	)

961 #i‡ 
APP_TIMER_ENABLED


965 #i‚de‡
APP_TIMER_WITH_PROFILER


966 
	#APP_TIMER_WITH_PROFILER
 0

	)

975 #i‚de‡
APP_TIMER_KEEPS_RTC_ACTIVE


976 
	#APP_TIMER_KEEPS_RTC_ACTIVE
 0

	)

985 #i‚de‡
BUTTON_ENABLED


986 
	#BUTTON_ENABLED
 1

	)

997 #i‚de‡
NRF_LOG_ENABLED


998 
	#NRF_LOG_ENABLED
 0

	)

1000 #i‡ 
NRF_LOG_ENABLED


1003 #i‚de‡
NRF_LOG_USES_COLORS


1004 
	#NRF_LOG_USES_COLORS
 0

	)

1006 #i‡ 
NRF_LOG_USES_COLORS


1019 #i‚de‡
NRF_LOG_COLOR_DEFAULT


1020 
	#NRF_LOG_COLOR_DEFAULT
 0

	)

1035 #i‚de‡
NRF_LOG_ERROR_COLOR


1036 
	#NRF_LOG_ERROR_COLOR
 0

	)

1051 #i‚de‡
NRF_LOG_WARNING_COLOR


1052 
	#NRF_LOG_WARNING_COLOR
 0

	)

1066 #i‚de‡
NRF_LOG_DEFAULT_LEVEL


1067 
	#NRF_LOG_DEFAULT_LEVEL
 3

	)

1074 #i‚de‡
NRF_LOG_DEFERRED


1075 
	#NRF_LOG_DEFERRED
 1

	)

1077 #i‡ 
NRF_LOG_DEFERRED


1081 #i‚de‡
NRF_LOG_DEFERRED_BUFSIZE


1082 
	#NRF_LOG_DEFERRED_BUFSIZE
 256

	)

1093 #i‚de‡
NRF_LOG_USES_TIMESTAMP


1094 
	#NRF_LOG_USES_TIMESTAMP
 0

	)

1106 #i‚de‡
NRF_LOG_BACKEND_MAX_STRING_LENGTH


1107 
	#NRF_LOG_BACKEND_MAX_STRING_LENGTH
 256

	)

1113 #i‚de‡
NRF_LOG_TIMESTAMP_DIGITS


1114 
	#NRF_LOG_TIMESTAMP_DIGITS
 8

	)

1119 #i‚de‡
NRF_LOG_BACKEND_SERIAL_USES_UART


1120 
	#NRF_LOG_BACKEND_SERIAL_USES_UART
 1

	)

1122 #i‡ 
NRF_LOG_BACKEND_SERIAL_USES_UART


1142 #i‚de‡
NRF_LOG_BACKEND_SERIAL_UART_BAUDRATE


1143 
	#NRF_LOG_BACKEND_SERIAL_UART_BAUDRATE
 30801920

	)

1147 #i‚de‡
NRF_LOG_BACKEND_SERIAL_UART_TX_PIN


1148 
	#NRF_LOG_BACKEND_SERIAL_UART_TX_PIN
 6

	)

1152 #i‚de‡
NRF_LOG_BACKEND_SERIAL_UART_RX_PIN


1153 
	#NRF_LOG_BACKEND_SERIAL_UART_RX_PIN
 8

	)

1157 #i‚de‡
NRF_LOG_BACKEND_SERIAL_UART_RTS_PIN


1158 
	#NRF_LOG_BACKEND_SERIAL_UART_RTS_PIN
 5

	)

1162 #i‚de‡
NRF_LOG_BACKEND_SERIAL_UART_CTS_PIN


1163 
	#NRF_LOG_BACKEND_SERIAL_UART_CTS_PIN
 7

	)

1171 #i‚de‡
NRF_LOG_BACKEND_SERIAL_UART_FLOW_CONTROL


1172 
	#NRF_LOG_BACKEND_SERIAL_UART_FLOW_CONTROL
 0

	)

1179 #i‚de‡
NRF_LOG_BACKEND_UART_INSTANCE


1180 
	#NRF_LOG_BACKEND_UART_INSTANCE
 0

	)

1188 #i‚de‡
NRF_LOG_BACKEND_SERIAL_USES_RTT


1189 
	#NRF_LOG_BACKEND_SERIAL_USES_RTT
 0

	)

1191 #i‡ 
NRF_LOG_BACKEND_SERIAL_USES_RTT


1197 #i‚de‡
NRF_LOG_BACKEND_RTT_OUTPUT_BUFFER_SIZE


1198 
	#NRF_LOG_BACKEND_RTT_OUTPUT_BUFFER_SIZE
 512

	)

1217 #i‚de‡
SEGGER_RTT_CONFIG_BUFFER_SIZE_UP


1218 
	#SEGGER_RTT_CONFIG_BUFFER_SIZE_UP
 64

	)

1222 #i‚de‡
SEGGER_RTT_CONFIG_MAX_NUM_UP_BUFFERS


1223 
	#SEGGER_RTT_CONFIG_MAX_NUM_UP_BUFFERS
 2

	)

1227 #i‚de‡
SEGGER_RTT_CONFIG_BUFFER_SIZE_DOWN


1228 
	#SEGGER_RTT_CONFIG_BUFFER_SIZE_DOWN
 16

	)

1232 #i‚de‡
SEGGER_RTT_CONFIG_MAX_NUM_DOWN_BUFFERS


1233 
	#SEGGER_RTT_CONFIG_MAX_NUM_DOWN_BUFFERS
 2

	)

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\drivers\radios\DWM\deca_device.c

32 
	~<°dio.h
>

33 
	~"deˇ_ty≥s.h
"

34 
	~"deˇ_∑øm_ty≥s.h
"

35 
	~"deˇ_ªgs.h
"

36 
	~"deˇ_devi˚_≠i.h
"

38 
	~"../../../∂©f‹m/timög.h
"

41 
	#FORCE_SYS_XTI
 0

	)

42 
	#ENABLE_ALL_SEQ
 1

	)

43 
	#FORCE_SYS_PLL
 2

	)

44 
	#READ_ACC_ON
 7

	)

45 
	#READ_ACC_OFF
 8

	)

46 
	#FORCE_OTP_ON
 11

	)

47 
	#FORCE_OTP_OFF
 12

	)

48 
	#FORCE_TX_PLL
 13

	)

54 
	$deˇ_¶ìp
(
uöt32
 
us
){

55 
	`dñay_™d_¶ìp
(
us
,0,
Ál£
);

56 
	}
}

59 
	$dwt_íabÀRXTXtimeMesuª
() {

60 
uöt8
 
buf
[1];

61 
	`dwt_ªad‰omdevi˚
(
GPIO_CTRL_ID
, 0x02, 1, 
buf
);

62 
buf
[0] = 0b00000101;

64 
	`dwt_wrôëodevi˚
(
GPIO_CTRL_ID
, 0x02, 1, 
buf
);

65 
	}
}

75 
_dwt_íabÀ˛ocks
(
˛ocks
) ;

77 
_dwt_c⁄figlde
(
¥f
);

79 
_dwt_lﬂducode‰omrom
();

81 
uöt32
 
_dwt_Ÿ¥ód
(uöt32 
addªss
);

83 
uöt32
 
_dwt_Ÿµrogw‹d32
(uöt32 
d©a
, 
uöt16
 
addªss
);

85 
_dwt_a⁄¨øyu∂ﬂd
();

96 
uöt32
 
	mdevi˚ID
 ;

97 
uöt32
 
	m∑πID
 ;

98 
uöt32
 
	mlŸID
 ;

99 
uöt8
 
	mch™
;

100 
uöt8
 
	ml⁄gFømes
 ;

101 
uöt8
 
	mŸ¥ev
 ;

102 
uöt32
 
	mtxFCTRL
 ;

103 
uöt8
 
	mxåim
;

104 
uöt8
 
	mdblbuff⁄
;

105 
uöt32
 
	msysCFGªg
 ;

106 
uöt16
 
	m¶ìp_mode
;

108 
dwt_ˇŒback_d©a_t
 
	mcd©a
;

110 
uöt8
 
	mwaô4ª•
 ;

111 
	m¥fIndex
 ;

113 (*
	mdwt_txˇŒback
)(c⁄° 
dwt_ˇŒback_d©a_t
 *
	mtxd
);

114 (*
	mdwt_rxˇŒback
)(c⁄° 
dwt_ˇŒback_d©a_t
 *
	mrxd
);

116 } 
	tdwt_loˇl_d©a_t
;

118 
dwt_loˇl_d©a_t
 
	gdw1000loˇl
 ;

143 
	#LDOTUNE_ADDRESS
 (0x04)

	)

144 
	#PARTID_ADDRESS
 (0x06)

	)

145 
	#LOTID_ADDRESS
 (0x07)

	)

146 
	#VBAT_ADDRESS
 (0x08)

	)

147 
	#VTEMP_ADDRESS
 (0x09)

	)

148 
	#XTRIM_ADDRESS
 (0x1E)

	)

150 
	$dwt_öôüli£
(
uöt16
 
c⁄fig
)

152 
uöt8
 
∂Œockdëe˘
 = 
EC_CTRL_PLLLCK
;

153 
uöt16
 
Ÿp_addr
 = 0;

154 
uöt32
 
ldo_tu√
 = 0;

156 
dw1000loˇl
.
dblbuff⁄
 = 0;

157 
dw1000loˇl
.
¥fIndex
 = 0;

158 
dw1000loˇl
.
cd©a
.
Øt£t
 = 0;

159 
dw1000loˇl
.
waô4ª•
 = 0;

160 
dw1000loˇl
.
¶ìp_mode
 = 0;

162 
dw1000loˇl
.
dwt_txˇŒback
 = 
NULL
 ;

163 
dw1000loˇl
.
dwt_rxˇŒback
 = 
NULL
 ;

166 
dw1000loˇl
.
devi˚ID
 = 
	`dwt_ªaddevid
() ;

167 i‡(
DWT_DEVICE_ID
 !
dw1000loˇl
.
devi˚ID
)

169  
DWT_ERROR
 ;

172 
	`_dwt_íabÀ˛ocks
(
FORCE_SYS_XTI
);

175 
	`dwt_wrôëodevi˚
(
EXT_SYNC_ID
, 
EC_CTRL_OFFSET
, 1, &
∂Œockdëe˘
);

178 
Ÿp_addr
 = 
	`_dwt_Ÿ¥ód
(
XTRIM_ADDRESS
) & 0xffff;

179 
dw1000loˇl
.
Ÿ¥ev
 = (
Ÿp_addr
 >> 8) & 0xff;

182 
ldo_tu√
 = 
	`_dwt_Ÿ¥ód
(
LDOTUNE_ADDRESS
);

183 if((
ldo_tu√
 & 0xFF) != 0)

185 
uöt8
 
ldok
 = 
OTP_SF_LDO_KICK
;

187 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
, 
OTP_SF
, 1, &
ldok
);

188 
dw1000loˇl
.
¶ìp_mode
 |
AON_WCFG_ONW_LLDO
;

192 
dw1000loˇl
.
∑πID
 = 
	`_dwt_Ÿ¥ód
(
PARTID_ADDRESS
);

193 
dw1000loˇl
.
lŸID
 = 
	`_dwt_Ÿ¥ód
(
LOTID_ADDRESS
);

196 
dw1000loˇl
.
xåim
 = 
Ÿp_addr
 & 0x1F;

197 i‡(!
dw1000loˇl
.
xåim
)

199 
dw1000loˇl
.
xåim
 = 
FS_XTALT_MIDRANGE
 ;

202 
	`dwt_xè…rim
(
dw1000loˇl
.
xåim
);

205 if(
c⁄fig
 & 
DWT_LOADUCODE
)

207 
	`_dwt_lﬂducode‰omrom
();

208 
dw1000loˇl
.
¶ìp_mode
 |
AON_WCFG_ONW_LLDE
;

212 
uöt16
 
ªga
 = 
	`dwt_ªad16bôoff£åeg
(
PMSC_ID
, 
PMSC_CTRL1_OFFSET
+1) ;

213 
ªga
 &= 0xFDFF ;

214 
	`dwt_wrôe16bôoff£åeg
(
PMSC_ID
, 
PMSC_CTRL1_OFFSET
+1, 
ªga
) ;

217 
	`_dwt_íabÀ˛ocks
(
ENABLE_ALL_SEQ
);

220 
uöt8
 
buf
;

221 
buf
 = 0x00;

222 
	`dwt_wrôëodevi˚
(
AON_ID
, 
AON_CFG1_OFFSET
, 1, &
buf
);

225 
dw1000loˇl
.
sysCFGªg
 = 
	`dwt_ªad32bôªg
(
SYS_CFG_ID
) ;

227  
DWT_SUCCESS
 ;

229 
	}
}

242 
uöt8
 
	$dwt_Ÿ¥evisi⁄
()

244  
dw1000loˇl
.
Ÿ¥ev
 ;

245 
	}
}

258 
	$dwt_£tGPIOf‹EXTTRX
()

260 
uöt8
 
buf
[
GPIO_MODE_LEN
];

263 
	`dwt_ªad‰omdevi˚
(
GPIO_CTRL_ID
, 
GPIO_MODE_OFFSET
, 
GPIO_MODE_LEN
, 
buf
);

265 
buf
[
GPIO_LNA_BYTE_NUM
] |(
GPIO_PIN5_EXTTXE_8
 + 
GPIO_PIN6_EXTRXE_8
);

267 
	`dwt_wrôëodevi˚
(
GPIO_CTRL_ID
, 
GPIO_MODE_OFFSET
, 
GPIO_MODE_LEN
, 
buf
);

268 
	}
}

284 
	$dwt_£tGPIOdúe˘i⁄
(
uöt32
 
gpioNum
, uöt32 
dúe˘i⁄
)

286 
uöt8
 
buf
[
GPIO_DIR_LEN
];

287 
uöt32
 
comm™d
 = 
dúe˘i⁄
 | 
gpioNum
;

289 
buf
[0] = 
comm™d
 & 0xff;

290 
buf
[1] = (
comm™d
 >> 8) & 0xff;

291 
buf
[2] = (
comm™d
 >> 16) & 0xff;

293 
	`dwt_wrôëodevi˚
(
GPIO_CTRL_ID
, 
GPIO_DIR_OFFSET
, 
GPIO_DIR_LEN
, 
buf
);

294 
	}
}

309 
	$dwt_£tGPIOvÆue
(
uöt32
 
gpioNum
, uöt32 
vÆue
)

311 
uöt8
 
buf
[
GPIO_DOUT_LEN
];

312 
uöt32
 
comm™d
 = 
vÆue
 | 
gpioNum
;

314 
buf
[0] = 
comm™d
 & 0xff;

315 
buf
[1] = (
comm™d
 >> 8) & 0xff;

316 
buf
[2] = (
comm™d
 >> 16) & 0xff;

318 
	`dwt_wrôëodevi˚
(
GPIO_CTRL_ID
, 
GPIO_DOUT_OFFSET
, 
GPIO_DOUT_LEN
, 
buf
);

319 
	}
}

332 
uöt32
 
	$dwt_gë∑πid
()

334  
dw1000loˇl
.
∑πID
;

335 
	}
}

348 
uöt32
 
	$dwt_gëlŸid
()

350  
dw1000loˇl
.
lŸID
;

351 
	}
}

364 
uöt32
 
	$dwt_ªaddevid
()

366  
	`dwt_ªad32bôoff£åeg
(
DEV_ID_ID
,0);

367 
	}
}

383 
	$dwt_c⁄figuªtxrf
(
dwt_txc⁄fig_t
 *
c⁄fig
)

387 
	`dwt_wrôëodevi˚
(
TX_CAL_ID
, 
TC_PGDELAY_OFFSET
, 1, &
c⁄fig
->
PGdly
);

390 
	`dwt_wrôe32bôªg
(
TX_POWER_ID
, 
c⁄fig
->
powî
);

392 
	}
}

409 
	$dwt_c⁄figuª
(
dwt_c⁄fig_t
 *
c⁄fig
)

411 
uöt8
 
nsSfd_ªsu…
 = 0;

412 
uöt8
 
u£DWnsSFD
 = 0;

413 
uöt8
 
ch™
 = 
c⁄fig
->chan ;

414 
uöt32
 
ªgvÆ
 ;

415 
uöt16
 
ªg16
 = 
lde_ª∂iˇC€ff
[
c⁄fig
->
rxCode
];

416 
uöt8
 
¥fIndex
 = 
dw1000loˇl
.¥fIndex = 
c⁄fig
->
¥f
 - 
DWT_PRF_16M
;

417 
uöt8
 
bw
 = ((
ch™
 == 4) || (chan == 7)) ? 1 : 0 ;

419 
dw1000loˇl
.
ch™
 = 
c⁄fig
->chan ;

421 #ifde‡
DWT_API_ERROR_CHECK


422 i‡(
c⁄fig
->
d©aR©e
 > 
DWT_BR_6M8
)

424  
DWT_ERROR
 ;

426 i‡((
c⁄fig
->
¥f
 > 
DWT_PRF_64M
Ë|| (c⁄fig->¥‡< 
DWT_PRF_16M
))

428  
DWT_ERROR
 ;

430 i‡(
c⁄fig
->
rxPAC
 > 
DWT_PAC64
)

432  
DWT_ERROR
 ;

434 i‡((
ch™
 < 1) || (chan > 7) || (6 == chan))

436  
DWT_ERROR
 ;

440 i‡(
c⁄fig
->
¥f
 =
DWT_PRF_64M
)

450 
c⁄fig
->
txPªambLígth
)

452 
DWT_PLEN_4096
 :

453 
DWT_PLEN_2048
 :

454 
DWT_PLEN_1536
 :

455 
DWT_PLEN_1024
 :

456 
DWT_PLEN_512
 :

457 
DWT_PLEN_256
 :

458 
DWT_PLEN_128
 :

459 
DWT_PLEN_64
 :  ;

460  :  
DWT_ERROR
 ;

463 if(
c⁄fig
->
phrMode
 > 
DWT_PHRMODE_EXT
)

465  
DWT_ERROR
 ;

470 if(
DWT_BR_110K
 =
c⁄fig
->
d©aR©e
)

472 
dw1000loˇl
.
sysCFGªg
 |
SYS_CFG_RXM110K
 ;

473 
ªg16
 >>= 3;

477 
dw1000loˇl
.
sysCFGªg
 &(~
SYS_CFG_RXM110K
) ;

480 
dw1000loˇl
.
l⁄gFømes
 = 
c⁄fig
->
phrMode
 ;

482 
dw1000loˇl
.
sysCFGªg
 |(
SYS_CFG_PHR_MODE_11
 & (
c⁄fig
->
phrMode
 << 16)) ;

484 
	`dwt_wrôe32bôªg
(
SYS_CFG_ID
,
dw1000loˇl
.
sysCFGªg
) ;

486 
	`dwt_wrôe16bôoff£åeg
(
LDE_IF_ID
, 
LDE_REPC_OFFSET
, 
ªg16
) ;

488 
	`_dwt_c⁄figlde
(
¥fIndex
);

491 
	`dwt_wrôëodevi˚
(
FS_CTRL_ID
, 
FS_PLLCFG_OFFSET
, 5, &
∂l2_c⁄fig
[
ch™_idx
[
ch™
]][0]);

494 
	`dwt_wrôëodevi˚
(
RF_CONF_ID
, 
RF_RXCTRLH_OFFSET
, 1, &
rx_c⁄fig
[
bw
]);

498 
	`dwt_wrôe32bôoff£åeg
(
RF_CONF_ID
, 
RF_TXCTRL_OFFSET
, 
tx_c⁄fig
[
ch™_idx
[
ch™
]]);

502 
	`dwt_wrôe16bôoff£åeg
(
DRX_CONF_ID
, 
DRX_TUNE0b_OFFSET
, 
s·sh
[
c⁄fig
->
d©aR©e
][c⁄fig->
nsSFD
]);

505 
	`dwt_wrôe16bôoff£åeg
(
DRX_CONF_ID
, 
DRX_TUNE1a_OFFSET
, 
dtu√1
[
¥fIndex
]);

507 if(
c⁄fig
->
d©aR©e
 =
DWT_BR_110K
)

509 
	`dwt_wrôe16bôoff£åeg
(
DRX_CONF_ID
, 
DRX_TUNE1b_OFFSET
, 0x64);

513 if(
c⁄fig
->
txPªambLígth
 =
DWT_PLEN_64
)

515 
uöt8
 
ãmp
 = 0x10;

516 
	`dwt_wrôe16bôoff£åeg
(
DRX_CONF_ID
, 
DRX_TUNE1b_OFFSET
, 0x10);

517 
	`dwt_wrôëodevi˚
(
DRX_CONF_ID
, 0x26, 1, &
ãmp
);

521 
uöt8
 
ãmp
 = 0x28;

522 
	`dwt_wrôe16bôoff£åeg
(
DRX_CONF_ID
, 
DRX_TUNE1b_OFFSET
, 0x20);

523 
	`dwt_wrôëodevi˚
(
DRX_CONF_ID
, 0x26, 1, &
ãmp
);

528 
	`dwt_wrôe32bôoff£åeg
(
DRX_CONF_ID
, 
DRX_TUNE2_OFFSET
, 
digôÆ_bb_c⁄fig
[
¥fIndex
][
c⁄fig
->
rxPAC
]);

532 if(
c⁄fig
->
sfdTO
 == 0)

534 
c⁄fig
->
sfdTO
 = 
DWT_SFDTOC_DEF
;

536 
	`dwt_wrôe16bôoff£åeg
(
DRX_CONF_ID
, 
DRX_SFDTOC_OFFSET
, 
c⁄fig
->
sfdTO
);

539 
	`dwt_wrôe32bôoff£åeg
–
AGC_CFG_STS_ID
, 0xC, 
agc_c⁄fig
.
lo32
);

540 
	`dwt_wrôe16bôoff£åeg
–
AGC_CFG_STS_ID
, 0x4, 
agc_c⁄fig
.
èrgë
[
¥fIndex
]);

543 if(
c⁄fig
->
nsSFD
)

546 
	`dwt_wrôëodevi˚
(
USR_SFD_ID
,0x00,1,&
dwnsSFDÀn
[
c⁄fig
->
d©aR©e
]);

547 
nsSfd_ªsu…
 = 3 ;

548 
u£DWnsSFD
 = 1 ;

550 
ªgvÆ
 = (
CHAN_CTRL_TX_CHAN_MASK
 & (
ch™
 << 
CHAN_CTRL_TX_CHAN_SHIFT
)) |

551 (
CHAN_CTRL_RX_CHAN_MASK
 & (
ch™
 << 
CHAN_CTRL_RX_CHAN_SHIFT
)) |

552 (
CHAN_CTRL_RXFPRF_MASK
 & (
c⁄fig
->
¥f
 << 
CHAN_CTRL_RXFPRF_SHIFT
)) |

553 ((
CHAN_CTRL_TNSSFD
|
CHAN_CTRL_RNSSFD
Ë& (
nsSfd_ªsu…
 << 
CHAN_CTRL_TNSSFD_SHIFT
)) |

554 (
CHAN_CTRL_DWSFD
 & (
u£DWnsSFD
 << 
CHAN_CTRL_DWSFD_SHIFT
)) |

555 (
CHAN_CTRL_TX_PCOD_MASK
 & (
c⁄fig
->
txCode
 << 
CHAN_CTRL_TX_PCOD_SHIFT
)) |

556 (
CHAN_CTRL_RX_PCOD_MASK
 & (
c⁄fig
->
rxCode
 << 
CHAN_CTRL_RX_PCOD_SHIFT
)) ;

558 
	`dwt_wrôe32bôªg
(
CHAN_CTRL_ID
,
ªgvÆ
) ;

562 
dw1000loˇl
.
txFCTRL
 = (
c⁄fig
->
txPªambLígth
 | c⁄fig->
¥f
) << 16;

563 
dw1000loˇl
.
txFCTRL
 |(
c⁄fig
->
d©aR©e
 << 
TX_FCTRL_TXBR_SHFT
Ë| 
TX_FCTRL_TR
;

564 
	`dwt_wrôe32bôoff£åeg
(
TX_FCTRL_ID
,0,
dw1000loˇl
.
txFCTRL
) ;

566  
DWT_SUCCESS
 ;

568 
	}
}

583 
	$dwt_£åx™ã¬adñay
(
uöt16
 
rxDñay
)

586 
	`dwt_wrôe16bôoff£åeg
(
LDE_IF_ID
, 
LDE_RXANTD_OFFSET
, 
rxDñay
);

587 
	}
}

602 
	$dwt_£âx™ã¬adñay
(
uöt16
 
txDñay
)

605 
	`dwt_wrôe16bôoff£åeg
(
TX_ANTD_ID
, 0x0, 
txDñay
);

606 
	}
}

628 
	$dwt_wrôëxd©a
(
uöt16
 
txFømeLígth
, 
uöt8
 *
txFømeByãs
, uöt16 
txBuf„rOff£t
)

630 #ifde‡
DWT_API_ERROR_CHECK


631 i‡(
dw1000loˇl
.
l⁄gFømes
)

633 i‡(
txFømeLígth
 > 1023)

635  
DWT_ERROR
 ;

640 i‡(
txFømeLígth
 > 127)

642  
DWT_ERROR
 ;

645 i‡(
txFømeLígth
 < 2)

647  
DWT_ERROR
 ;

651 i‡((
txBuf„rOff£t
 + 
txFømeLígth
) > 1024)

653  
DWT_ERROR
 ;

656 
	`dwt_wrôëodevi˚
–
TX_BUFFER_ID
, 
txBuf„rOff£t
, 
txFømeLígth
-2, 
txFømeByãs
) ;

659  
DWT_SUCCESS
 ;

660 
	}
}

678 
	$dwt_wrôëxf˘æ
(
uöt16
 
txFømeLígth
, uöt16 
txBuf„rOff£t
)

681 #ifde‡
DWT_API_ERROR_CHECK


682 i‡(
dw1000loˇl
.
l⁄gFømes
)

684 i‡(
txFømeLígth
 > 1023)

686  
DWT_ERROR
 ;

691 i‡(
txFømeLígth
 > 127)

693  
DWT_ERROR
 ;

696 i‡(
txFømeLígth
 < 2)

698  
DWT_ERROR
 ;

704 
uöt32
 
ªg32
 = 
dw1000loˇl
.
txFCTRL
 | 
txFømeLígth
 | (
txBuf„rOff£t
 << 22);

705 
	`dwt_wrôe32bôoff£åeg
(
TX_FCTRL_ID
,0,
ªg32
) ;

707  
DWT_SUCCESS
 ;

709 
	}
}

726 
	$dwt_ªadrxd©a
(
uöt8
 *
buf„r
, 
uöt16
 
Àngth
, uöt16 
rxBuf„rOff£t
)

728 
	`dwt_ªad‰omdevi˚
(
RX_BUFFER_ID
,
rxBuf„rOff£t
,
Àngth
,
buf„r
) ;

729 
	}
}

745 
	$dwt_ªadaccd©a
(
uöt8
 *
buf„r
, 
uöt16
 
Àn
, uöt16 
accOff£t
)

748 
	`_dwt_íabÀ˛ocks
(
READ_ACC_ON
);

750 
	`dwt_ªad‰omdevi˚
(
ACC_MEM_ID
,
accOff£t
,
Àn
,
buf„r
) ;

752 
	`_dwt_íabÀ˛ocks
(
READ_ACC_OFF
);

753 
	}
}

767 
	$dwt_ªaddügno°ics
(
dwt_rxdüg_t
 *
dügno°ics
)

770 
dügno°ics
->
fú°P©h
 = 
	`dwt_ªad16bôoff£åeg
(
RX_TIME_ID
, 
RX_TIME_FP_INDEX_OFFSET
);

773 
dügno°ics
->
maxNoi£
 = 
	`dwt_ªad16bôoff£åeg
(
LDE_IF_ID
, 
LDE_THRESH_OFFSET
);

776 
	`dwt_ªad‰omdevi˚
(
RX_FQUAL_ID
, 0x0, 8, (
uöt8
*)&
dügno°ics
->
°dNoi£
);

782 
dügno°ics
->
fú°P©hAmp1
 = 
	`dwt_ªad16bôoff£åeg
(
RX_TIME_ID
, 0x7) ;

784 
dügno°ics
->
rxPªamCou¡
 = (
	`dwt_ªad32bôªg
(
RX_FINFO_ID
Ë& 
RX_FINFO_RXPACC_MASK
Ë>> 
RX_FINFO_RXPACC_SHIFT
 ;

789 
	}
}

803 
	$dwt_ªadtxtime°amp
(
uöt8
 * 
time°amp
)

805 
	`dwt_ªad‰omdevi˚
(
TX_TIME_ID
, 0, 
TX_TIME_TX_STAMP_LEN
, 
time°amp
) ;

806 
	}
}

819 
uöt32
 
	$dwt_ªadtxtime°amphi32
()

821  
	`dwt_ªad32bôoff£åeg
(
TX_TIME_ID
, 1);

822 
	}
}

835 
uöt32
 
	$dwt_ªadtxtime°am∂o32
()

837  
	`dwt_ªad32bôoff£åeg
(
TX_TIME_ID
, 0);

838 
	}
}

852 
	$dwt_ªadrxtime°amp
(
uöt8
 * 
time°amp
)

854 
	`dwt_ªad‰omdevi˚
(
RX_TIME_ID
, 0, 
RX_TIME_RX_STAMP_LEN
, 
time°amp
) ;

855 
	}
}

868 
uöt32
 
	$dwt_ªadrxtime°amphi32
()

870  
	`dwt_ªad32bôoff£åeg
(
RX_TIME_ID
, 1);

871 
	}
}

884 
uöt32
 
	$dwt_ªadrxtime°am∂o32
()

886  
	`dwt_ªad32bôoff£åeg
(
RX_TIME_ID
, 0);

887 
	}
}

900 
uöt32
 
	$dwt_ªadsy°ime°amphi32
()

902  
	`dwt_ªad32bôoff£åeg
(
SYS_TIME_ID
, 1);

903 
	}
}

918 
	$dwt_ªadsy°ime
(
uöt8
 * 
time°amp
)

920 
	`dwt_ªad‰omdevi˚
(
SYS_TIME_ID
, 0, 
SYS_TIME_LEN
, 
time°amp
) ;

921 
	}
}

947 
	gdwt_wrôëodevi˚


949 
uöt16
 
	gªc‹dNumbî
,

950 
uöt16
 
	gödex
,

951 
uöt32
 
	gÀngth
,

952 
uöt8
 *
	gbuf„r


955 
uöt8
 
	ghódî
[3] ;

956 
	g˙t
 = 0;

957 #ifde‡
DWT_API_ERROR_CHECK


958 i‡(
	gªc‹dNumbî
 > 0x3F)

960  
	gDWT_ERROR
 ;

965 i‡(
	gödex
 == 0)

967 
hódî
[
˙t
++] = 0x80 | 
ªc‹dNumbî
 ;

971 #ifde‡
DWT_API_ERROR_CHECK


972 i‡(
	gödex
 > 0x7FFF)

974  
	gDWT_ERROR
 ;

976 i‡((
	gödex
 + 
	gÀngth
)> 0x7FFF)

978  
	gDWT_ERROR
 ;

981 
	ghódî
[
˙t
++] = 0xC0 | 
ªc‹dNumbî
 ;

983 i‡(
	gödex
 <= 127)

985 
hódî
[
˙t
++] = (
uöt8
)
ödex
 ;

989 
	ghódî
[
˙t
++] = 0x80 | (
uöt8
)(
ödex
) ;

990 
	ghódî
[
˙t
++] = (
uöt8
Ë(
ödex
 >> 7) ;

995  
wrôëo•i
(
˙t
,
hódî
,
Àngth
,
buf„r
);

1022 
	gdwt_ªad‰omdevi˚


1024 
uöt16
 
	gªc‹dNumbî
,

1025 
uöt16
 
	gödex
,

1026 
uöt32
 
	gÀngth
,

1027 
uöt8
 *
	gbuf„r


1030 
uöt8
 
	ghódî
[3] ;

1031 
	g˙t
 = 0;

1032 #ifde‡
DWT_API_ERROR_CHECK


1033 i‡(
	gªc‹dNumbî
 > 0x3F)

1035  
	gDWT_ERROR
 ;

1040 i‡(
	gödex
 == 0)

1042 
hódî
[
˙t
++] = (
uöt8
Ë
ªc‹dNumbî
 ;

1046 #ifde‡
DWT_API_ERROR_CHECK


1047 i‡(
	gödex
 > 0x7FFF)

1049  
	gDWT_ERROR
 ;

1051 i‡((
	gödex
 + 
	gÀngth
)> 0x7FFF)

1053  
	gDWT_ERROR
 ;

1056 
	ghódî
[
˙t
++] = (
uöt8
)(0x40 | 
ªc‹dNumbî
) ;

1058 i‡(
	gödex
 <= 127)

1060 
hódî
[
˙t
++] = (
uöt8
Ë
ödex
 ;

1064 
	ghódî
[
˙t
++] = 0x80 | (
uöt8
)(
ödex
) ;

1065 
	ghódî
[
˙t
++] = (
uöt8
Ë(
ödex
 >> 7) ;

1070  
ªad‰om•i
(
˙t
, 
hódî
, 
Àngth
, 
buf„r
);

1089 
uöt32
 
	$dwt_ªad32bôoff£åeg
(
ªgFûeID
,
ªgOff£t
)

1091 
uöt32
 
ªgvÆ
 = 
DWT_ERROR
 ;

1092 
j
 ;

1093 
uöt8
 
buf„r
[4] ;

1095 
ªsu…
 = 
	`dwt_ªad‰omdevi˚
(
ªgFûeID
,
ªgOff£t
,4,
buf„r
);

1097 if(
ªsu…
 =
DWT_SUCCESS
)

1099 
j
 = 3 ; j >= 0 ; j --)

1101 
ªgvÆ
 = (ªgvÆ << 8Ë+ 
buf„r
[
j
] ;

1104  
ªgvÆ
 ;

1106 
	}
}

1121 
uöt16
 
	$dwt_ªad16bôoff£åeg
(
ªgFûeID
,
ªgOff£t
)

1123 
uöt16
 
ªgvÆ
 = 
DWT_ERROR
 ;

1124 
uöt8
 
buf„r
[2] ;

1126 
ªsu…
 = 
	`dwt_ªad‰omdevi˚
(
ªgFûeID
,
ªgOff£t
,2,
buf„r
);

1128 if(
ªsu…
 =
DWT_SUCCESS
)

1130 
ªgvÆ
 = (
buf„r
[1] << 8) + buffer[0] ;

1132  
ªgvÆ
 ;

1134 
	}
}

1150 
	$dwt_wrôe16bôoff£åeg
(
ªgFûeID
,
ªgOff£t
,
uöt16
 
ªgvÆ
)

1152 
ªg
;

1153 
uöt8
 
buf„r
[2] ;

1155 
buf„r
[0] = 
ªgvÆ
 & 0xFF;

1156 
buf„r
[1] = 
ªgvÆ
 >> 8 ;

1158 
ªg
 = 
	`dwt_wrôëodevi˚
(
ªgFûeID
,
ªgOff£t
,2,
buf„r
);

1160  
ªg
;

1162 
	}
}

1178 
	$dwt_wrôe32bôoff£åeg
(
ªgFûeID
,
ªgOff£t
,
uöt32
 
ªgvÆ
)

1180 
j
 ;

1181 
ªg
;

1182 
uöt8
 
buf„r
[4] ;

1184  
j
 = 0 ; j < 4 ; j++ )

1186 
buf„r
[
j
] = 
ªgvÆ
 & 0xff ;

1187 
ªgvÆ
 >>= 8 ;

1190 
ªg
 = 
	`dwt_wrôëodevi˚
(
ªgFûeID
,
ªgOff£t
,4,
buf„r
);

1192  
ªg
;

1194 
	}
}

1216 
	$dwt_íabÀ‰amefûãr
(
uöt16
 
íabÀ
)

1218 
uöt32
 
sysc⁄fig
 = 
SYS_CFG_MASK
 & 
	`dwt_ªad32bôªg
(
SYS_CFG_ID
) ;

1220 if(
íabÀ
)

1223 
sysc⁄fig
 &~(
SYS_CFG_FF_ALL_EN
);

1224 
sysc⁄fig
 |(
íabÀ
 & 
SYS_CFG_FF_ALL_EN
Ë| 
SYS_CFG_FFE
;

1228 
sysc⁄fig
 &~(
SYS_CFG_FFE
);

1231 
dw1000loˇl
.
sysCFGªg
 = 
sysc⁄fig
 ;

1232 
	`dwt_wrôe32bôªg
(
SYS_CFG_ID
,
sysc⁄fig
) ;

1233 
	}
}

1247 
	$dwt_£ç™id
(
uöt16
 
∑nID
)

1250 
	`dwt_wrôe16bôoff£åeg
(
PANADR_ID
, 2, 
∑nID
) ;

1251 
	}
}

1265 
	$dwt_£èddªss16
(
uöt16
 
sh‹tAddªss
)

1268 
	`dwt_wrôe16bôoff£åeg
(
PANADR_ID
, 0, 
sh‹tAddªss
) ;

1269 
	}
}

1283 
	$dwt_£ãui
(
uöt8
 *
eui64
)

1285 
	`dwt_wrôëodevi˚
(
EUI_64_ID
, 0x0, 8, 
eui64
);

1286 
	}
}

1300 
	$dwt_gëeui
(
uöt8
 *
eui64
)

1302 
	`dwt_ªad‰omdevi˚
(
EUI_64_ID
, 0x0, 8, 
eui64
);

1303 
	}
}

1319 
	$dwt_Ÿ¥ód
(
uöt32
 
addªss
, uöt32 *
¨øy
, 
uöt8
 
Àngth
)

1321 
i
;

1323 
	`_dwt_íabÀ˛ocks
(
FORCE_SYS_XTI
);

1325 
i
=0; i<
Àngth
; i++)

1327 
¨øy
[
i
] = 
	`_dwt_Ÿ¥ód
(
addªss
 + i) ;

1330 
	`_dwt_íabÀ˛ocks
(
ENABLE_ALL_SEQ
);

1333 
	}
}

1347 
uöt32
 
	$_dwt_Ÿ¥ód
(
uöt32
 
addªss
)

1349 
uöt8
 
buf
[4];

1350 
uöt32
 
ªt_d©a
;

1352 
buf
[1] = (
addªss
>>8) & 0xff;

1353 
buf
[0] = 
addªss
 & 0xff;

1356 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
,
OTP_ADDR
,2,
buf
);

1359 
buf
[0] = 0x03;

1360 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
,
OTP_CTRL
,1,
buf
);

1361 
buf
[0] = 0x00;

1362 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
,
OTP_CTRL
,1,
buf
);

1365 
ªt_d©a
=
	`dwt_ªad32bôoff£åeg
(
OTP_IF_ID
,
OTP_RDAT
);

1368  (
ªt_d©a
);

1369 
	}
}

1391 
uöt32
 
	$_dwt_Ÿp£tmºegs
(
mode
)

1393 
uöt8
 
rd_buf
[4];

1394 
uöt8
 
wr_buf
[4];

1395 
uöt32
 
mø
=0,
mrb
=0,
mr
=0;

1400 
wr_buf
[0] = 0x03;

1401 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
, 
OTP_CTRL
+1,1,
wr_buf
);

1404 
mode
&0x0f) {

1406 
mr
 =0x0000;

1407 
mø
=0x0000;

1408 
mrb
=0x0000;

1411 
mr
 =0x1024;

1412 
mø
=0x9220;

1413 
mrb
=0x000e;

1416 
mr
 =0x1824;

1417 
mø
=0x9220;

1418 
mrb
=0x0003;

1421 
mr
 =0x1824;

1422 
mø
=0x9220;

1423 
mrb
=0x004e;

1426 
mr
 =0x0000;

1427 
mø
=0x0000;

1428 
mrb
=0x0003;

1431 
mr
 =0x0024;

1432 
mø
=0x0000;

1433 
mrb
=0x0003;

1437  
DWT_ERROR
;

1440 
wr_buf
[0] = 
mø
 & 0x00ff;

1441 
wr_buf
[1] = (
mø
 & 0xff00)>>8;

1442 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
, 
OTP_WDAT
,2,
wr_buf
);

1446 
wr_buf
[0] = 0x08;

1447 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
, 
OTP_CTRL
,1,
wr_buf
);

1452 
wr_buf
[0] = 0x02;

1453 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
,
OTP_CTRL
+1,1,
wr_buf
);

1456 
wr_buf
[0] = 0x88;

1457 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
, 
OTP_CTRL
,1,
wr_buf
);

1459 
wr_buf
[0] = 0x80;

1460 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
, 
OTP_CTRL
,1,
wr_buf
);

1462 
wr_buf
[0] = 0x00;

1463 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
, 
OTP_CTRL
,1,
wr_buf
);

1468 
wr_buf
[0] = 0x05;

1469 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
,
OTP_CTRL
+1,1,
wr_buf
);

1471 
wr_buf
[0] = 
mrb
 & 0x00ff;

1472 
wr_buf
[1] = (
mrb
 & 0xff00)>>8;

1473 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
, 
OTP_WDAT
,2,
wr_buf
);

1476 
wr_buf
[0] = 0x08;

1477 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
, 
OTP_CTRL
,1,
wr_buf
);

1482 
wr_buf
[0] = 0x04;

1483 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
,
OTP_CTRL
+1,1,
wr_buf
);

1486 
wr_buf
[0] = 0x88;

1487 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
, 
OTP_CTRL
,1,
wr_buf
);

1489 
wr_buf
[0] = 0x80;

1490 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
, 
OTP_CTRL
,1,
wr_buf
);

1492 
wr_buf
[0] = 0x00;

1493 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
, 
OTP_CTRL
,1,
wr_buf
);

1498 
wr_buf
[0] = 0x01;

1499 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
,
OTP_CTRL
+1,1,
wr_buf
);

1502 
wr_buf
[0] = 
mr
 & 0x00ff;

1503 
wr_buf
[1] = (
mr
 & 0xff00)>>8;

1504 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
, 
OTP_WDAT
,2,
wr_buf
);

1507 
wr_buf
[0] = 0x08;

1508 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
, 
OTP_CTRL
,1,
wr_buf
);

1511 
	`deˇ_¶ìp
(10);

1513 
wr_buf
[0] = 0x00;

1514 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
,
OTP_CTRL
+1,1,
wr_buf
);

1518 
wr_buf
[0] = 
OTP_CTRL_OTPRDEN
;

1519 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
, 
OTP_CTRL
,1,
wr_buf
);

1520 
wr_buf
[0] = 0x02;

1521 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
,
OTP_CTRL
+1,1,
wr_buf
);

1523 
wr_buf
[0] = 0x04;

1524 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
,
OTP_CTRL
+1,1,
wr_buf
);

1525 
	`deˇ_¶ìp
(100);

1528 
wr_buf
[0] = 0x00;

1529 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
,
OTP_CTRL
+1,1,
wr_buf
);

1531 
wr_buf
[0] = 0x00;

1532 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
, 
OTP_CTRL
,1,
wr_buf
);

1534 
	`deˇ_¶ìp
(10);

1536 i‡(((
mode
&0x0f) == 0x1)||((mode&0x0f) == 0x2))

1539 
	`dwt_ªad‰omdevi˚
(
OTP_IF_ID
, 
OTP_STAT
,1,
rd_buf
);

1542  
DWT_SUCCESS
;

1543 
	}
}

1559 
uöt32
 
	$_dwt_Ÿµrogw‹d32
(
uöt32
 
d©a
, 
uöt16
 
addªss
)

1561 
uöt8
 
rd_buf
[1];

1562 
uöt8
 
wr_buf
[4];

1563 
uöt8
 
Ÿp_d⁄e
;

1566 
	`dwt_ªad‰omdevi˚
(
OTP_IF_ID
, 
OTP_STAT
, 1, 
rd_buf
);

1568 if((
rd_buf
[0] & 0x02) != 0x02)

1571  
DWT_ERROR
;

1575 
wr_buf
[3] = (
d©a
>>24) & 0xff;

1576 
wr_buf
[2] = (
d©a
>>16) & 0xff;

1577 
wr_buf
[1] = (
d©a
>>8) & 0xff;

1578 
wr_buf
[0] = 
d©a
 & 0xff;

1579 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
, 
OTP_WDAT
, 4, 
wr_buf
);

1582 
wr_buf
[1] = (
addªss
>>8) & 0x07;

1583 
wr_buf
[0] = 
addªss
 & 0xff;

1584 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
, 
OTP_ADDR
, 2, 
wr_buf
);

1587 
wr_buf
[0] = 
OTP_CTRL_OTPPROG
;

1588 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
, 
OTP_CTRL
, 1, 
wr_buf
);

1589 
wr_buf
[0] = 0x00;

1590 
	`dwt_wrôëodevi˚
(
OTP_IF_ID
, 
OTP_CTRL
, 1, 
wr_buf
);

1593 
Ÿp_d⁄e
 = 0;

1594 
Ÿp_d⁄e
 == 0)

1596 
	`deˇ_¶ìp
(1);

1597 
	`dwt_ªad‰omdevi˚
(
OTP_IF_ID
, 
OTP_STAT
, 1, 
rd_buf
);

1599 if((
rd_buf
[0] & 0x01) == 0x01)

1601 
Ÿp_d⁄e
 = 1;

1605  
DWT_SUCCESS
;

1606 
	}
}

1621 
uöt32
 
	$dwt_Ÿpwrôóndvîify
(
uöt32
 
vÆue
, 
uöt16
 
addªss
)

1623 
¥og_ok
 = 
DWT_SUCCESS
;

1624 
ªåy
 = 0;

1626 
	`_dwt_íabÀ˛ocks
(
FORCE_SYS_XTI
);

1633 
	`_dwt_Ÿp£tmºegs
(1);

1638 
	`_dwt_Ÿµrogw‹d32
(
vÆue
, 
addªss
);

1640 if(
	`_dwt_Ÿ¥ód
(
addªss
Ë=
vÆue
)

1644 
ªåy
++;

1645 if(
ªåy
==5)

1653 
	`_dwt_Ÿp£tmºegs
(4);

1655 if(
	`_dwt_Ÿ¥ód
(
addªss
Ë!
vÆue
)

1657 
¥og_ok
 = 
DWT_ERROR
;

1660 
	`_dwt_Ÿp£tmºegs
(0);

1662  
¥og_ok
;

1663 
	}
}

1676 
	$_dwt_a⁄c⁄figu∂ﬂd
()

1678 
uöt8
 
buf
[1];

1680 
buf
[0] = 0x04;

1681 
	`dwt_wrôëodevi˚
(
AON_ID
,
AON_CTRL_OFFSET
,1,
buf
);

1682 
buf
[0] = 0x00;

1683 
	`dwt_wrôëodevi˚
(
AON_ID
,
AON_CTRL_OFFSET
,1,
buf
);

1684 
	}
}

1698 
	$_dwt_a⁄¨øyu∂ﬂd
()

1700 
uöt8
 
buf
[1];

1702 
buf
[0] = 0x00;

1703 
	`dwt_wrôëodevi˚
(
AON_ID
,
AON_CTRL_OFFSET
,1,
buf
);

1704 
buf
[0] = 0x02;

1705 
	`dwt_wrôëodevi˚
(
AON_ID
,
AON_CTRL_OFFSET
,1,
buf
);

1706 
	}
}

1720 
	$dwt_íãr¶ìp
()

1723 
	`_dwt_a⁄¨øyu∂ﬂd
();

1724 
	}
}

1740 
	$dwt_c⁄figuª¶ìp˙t
(
uöt16
 
¶ìp˙t
)

1742 
uöt8
 
buf
[2];

1744 
buf
[0] = 0x01;

1745 
	`dwt_wrôëodevi˚
(
PMSC_ID
,
PMSC_CTRL0_OFFSET
,1,
buf
);

1747 
buf
[0] = 0;

1748 
	`dwt_wrôëodevi˚
(
AON_ID
, 
AON_CFG0_OFFSET
, 1, 
buf
);

1750 
buf
[0] = 0;

1751 
	`dwt_wrôëodevi˚
(
AON_ID
, 
AON_CFG1_OFFSET
, 1, 
buf
);

1753 
	`_dwt_a⁄c⁄figu∂ﬂd
();

1756 
buf
[0] = 
¶ìp˙t
 & 0xFF;

1757 
buf
[1] = (
¶ìp˙t
 >> 8) & 0xFF;

1758 
	`dwt_wrôëodevi˚
(
AON_ID
, (
AON_CFG0_OFFSET
+2Ë, 2, 
buf
);

1759 
	`_dwt_a⁄c⁄figu∂ﬂd
();

1762 
buf
[0] = 1;

1763 
	`dwt_wrôëodevi˚
(
AON_ID
, 
AON_CFG1_OFFSET
, 1, 
buf
);

1764 
	`_dwt_a⁄c⁄figu∂ﬂd
();

1766 
buf
[0] = 0x00;

1767 
	`dwt_wrôëodevi˚
(
PMSC_ID
,
PMSC_CTRL0_OFFSET
,1,
buf
);

1768 
	}
}

1784 
uöt16
 
	$dwt_ˇlibøã¶ìp˙t
()

1786 
uöt8
 
buf
[2];

1787 
uöt16
 
ªsu…
;

1790 
buf
[0] = 4;

1791 
	`dwt_wrôëodevi˚
(
AON_ID
, 
AON_CFG1_OFFSET
, 1, 
buf
);

1792 
	`_dwt_a⁄c⁄figu∂ﬂd
();

1795 
buf
[0] = 0;

1796 
	`dwt_wrôëodevi˚
(
AON_ID
, 
AON_CFG1_OFFSET
, 1, 
buf
);

1797 
	`_dwt_a⁄c⁄figu∂ﬂd
();

1799 
buf
[0] = 0x01;

1800 
	`dwt_wrôëodevi˚
(
PMSC_ID
,
PMSC_CTRL0_OFFSET
,1,
buf
);

1801 
	`deˇ_¶ìp
(1);

1805 
buf
[0] = 118;

1806 
	`dwt_wrôëodevi˚
(
AON_ID
, 
AON_ADDR_OFFSET
, 1,
buf
);

1809 
buf
[0] = 0x80;

1810 
	`dwt_wrôëodevi˚
(
AON_ID
, 
AON_CTRL_OFFSET
, 1,
buf
);

1813 
buf
[0] = 0x88;

1814 
	`dwt_wrôëodevi˚
(
AON_ID
, 
AON_CTRL_OFFSET
, 1,
buf
);

1817 
	`dwt_ªad‰omdevi˚
(
AON_ID
, 
AON_RDAT_OFFSET
, 1,
buf
);

1818 
ªsu…
 = 
buf
[0];

1819 
ªsu…
 =Ñesult << 8;

1822 
buf
[0] = 117;

1823 
	`dwt_wrôëodevi˚
(
AON_ID
, 
AON_ADDR_OFFSET
, 1,
buf
);

1826 
buf
[0] = 0x80;

1827 
	`dwt_wrôëodevi˚
(
AON_ID
, 
AON_CTRL_OFFSET
, 1,
buf
);

1830 
buf
[0] = 0x88;

1831 
	`dwt_wrôëodevi˚
(
AON_ID
, 
AON_CTRL_OFFSET
, 1,
buf
);

1834 
	`dwt_ªad‰omdevi˚
(
AON_ID
, 
AON_RDAT_OFFSET
, 1,
buf
);

1835 
ªsu…
 |
buf
[0];

1837 
buf
[0] = 0x00;

1838 
	`dwt_wrôëodevi˚
(
AON_ID
,
AON_CTRL_OFFSET
,1,
buf
);

1840 
buf
[0] = 0x00;

1841 
	`dwt_wrôëodevi˚
(
PMSC_ID
,
PMSC_CTRL0_OFFSET
,1,
buf
);

1845  
ªsu…
;

1846 
	}
}

1881 
	$dwt_c⁄figuª¶ìp
(
uöt16
 
mode
, 
uöt8
 
wake
)

1883 
uöt8
 
buf
[1];

1886 
mode
 |
dw1000loˇl
.
¶ìp_mode
;

1887 
	`dwt_wrôe16bôoff£åeg
(
AON_ID
, 
AON_WCFG_OFFSET
, 
mode
);

1889 
buf
[0] = 
wake
;

1891 
	`dwt_wrôëodevi˚
(
AON_ID
, 
AON_CFG0_OFFSET
, 1, 
buf
);

1892 
	}
}

1910 
	$dwt_íãr¶ì∑·îtx
(
íabÀ
)

1912 
uöt32
 
ªg
 = 
	`dwt_ªad32bôoff£åeg
(
PMSC_ID
, 
PMSC_CTRL1_OFFSET
);

1914 if(
íabÀ
)

1916 
ªg
 |
PMSC_CTRL1_ATXSLP
;

1920 
ªg
 &~(
PMSC_CTRL1_ATXSLP
);

1922 
	`dwt_wrôe32bôoff£åeg
(
PMSC_ID
, 
PMSC_CTRL1_OFFSET
, 
ªg
);

1923 
	}
}

1949 
	$dwt_•icswakeup
(
uöt8
 *
buff
, 
uöt16
 
Àngth
)

1951 if(
	`dwt_ªaddevid
(Ë!
DWT_DEVICE_ID
)

1954 
	`dwt_ªad‰omdevi˚
(0x0, 0x0, 
Àngth
, 
buff
);

1958 
	`deˇ_¶ìp
(5);

1962  
DWT_SUCCESS
;

1965 if(
	`dwt_ªaddevid
(Ë!
DWT_DEVICE_ID
)

1967  
DWT_ERROR
;

1970  
DWT_SUCCESS
;

1971 
	}
}

1985 
	$_dwt_c⁄figlde
(
¥fIndex
)

1987 
uöt8
 
x
 = 
LDE_PARAM1
;

1989 
	`dwt_wrôëodevi˚
–
LDE_IF_ID
, 
LDE_CFG1_OFFSET
, 1, &
x
 );

1991 if(
¥fIndex
)

1993 
	`dwt_wrôe16bôoff£åeg
–
LDE_IF_ID
, 
LDE_CFG2_OFFSET
, (
uöt16
Ë
LDE_PARAM3_64
);

1997 
	`dwt_wrôe16bôoff£åeg
–
LDE_IF_ID
, 
LDE_CFG2_OFFSET
, (
uöt16
Ë
LDE_PARAM3_16
);

1999 
	}
}

2013 
	$_dwt_lﬂducode‰omrom
()

2015 
uöt8
 
wr_buf
[2];

2018 
wr_buf
[1] = 0x03;

2019 
wr_buf
[0] = 0x01;

2020 
	`dwt_wrôëodevi˚
(
PMSC_ID
, 
PMSC_CTRL0_OFFSET
, 2, 
wr_buf
);

2022 
	`dwt_wrôe16bôoff£åeg
(
OTP_IF_ID
, 
OTP_CTRL
, 
OTP_CTRL_LDELOAD
);

2024 
	`deˇ_¶ìp
(1);

2027 
	`_dwt_íabÀ˛ocks
(
ENABLE_ALL_SEQ
);

2028 
	}
}

2045 
	$dwt_lﬂd›£âab‰omŸp
(
uöt8
 
gèb_£l
)

2047 
uöt8
 
wr_buf
[2];

2048 
uöt16
 
ªg
 = (((
gèb_£l
 & 0x3) << 5) | 0x1);

2050 
wr_buf
[1] = 0x03;

2051 
wr_buf
[0] = 0x01;

2052 
	`dwt_wrôëodevi˚
(
PMSC_ID
, 
PMSC_CTRL0_OFFSET
, 2, 
wr_buf
);

2054 
	`dwt_wrôe16bôoff£åeg
(
OTP_IF_ID
, 
OTP_SF
, 
ªg
);

2057 
	`_dwt_íabÀ˛ocks
(
ENABLE_ALL_SEQ
);

2059 
	}
}

2073 
	$dwt_£tsm¨âxpowî
(
íabÀ
)

2076 
dw1000loˇl
.
sysCFGªg
 = 
	`dwt_ªad32bôªg
(
SYS_CFG_ID
) ;

2079 if(
íabÀ
) {

2080 
dw1000loˇl
.
sysCFGªg
 &~(
SYS_CFG_DIS_STXP
) ;

2083 
dw1000loˇl
.
sysCFGªg
 |
SYS_CFG_DIS_STXP
 ;

2086 
	`dwt_wrôe32bôªg
(
SYS_CFG_ID
,
dw1000loˇl
.
sysCFGªg
) ;

2087 
	}
}

2104 
	$dwt_íabÀautﬂck
(
uöt8
 
ª•⁄£DñayTime
)

2107 
	`dwt_wrôe16bôoff£åeg
(
ACK_RESP_T_ID
, 0x2, (
ª•⁄£DñayTime
 << 8) ) ;

2109 
dw1000loˇl
.
sysCFGªg
 |
SYS_CFG_AUTOACK
;

2110 
	`dwt_wrôe32bôªg
(
SYS_CFG_ID
,
dw1000loˇl
.
sysCFGªg
) ;

2111 
	}
}

2125 
	$dwt_£tdbÃxbuffmode
(
íabÀ
)

2127 if(
íabÀ
)

2130 
dw1000loˇl
.
sysCFGªg
 &~
SYS_CFG_DIS_DRXB
;

2131 
dw1000loˇl
.
dblbuff⁄
 = 1;

2136 
dw1000loˇl
.
sysCFGªg
 |
SYS_CFG_DIS_DRXB
;

2137 
dw1000loˇl
.
dblbuff⁄
 = 0;

2140 
	`dwt_wrôe32bôªg
(
SYS_CFG_ID
,
dw1000loˇl
.
sysCFGªg
) ;

2141 
	}
}

2155 
	$dwt_£èut‹xªíabÀ
(
íabÀ
)

2157 
uöt8
 
byã
 = 0;

2159 if(
íabÀ
)

2162 
dw1000loˇl
.
sysCFGªg
 |
SYS_CFG_RXAUTR
;

2167 
dw1000loˇl
.
sysCFGªg
 &~
SYS_CFG_RXAUTR
;

2170 
byã
 = 
dw1000loˇl
.
sysCFGªg
 >> 24;

2172 
	`dwt_wrôëodevi˚
(
SYS_CFG_ID
, 3, 1, &
byã
) ;

2173 
	}
}

2187 
	$dwt_£åxa·îtxdñay
(
uöt32
 
rxDñayTime
)

2189 
uöt32
 
vÆ
 = 
	`dwt_ªad32bôªg
(
ACK_RESP_T_ID
) ;

2191 
vÆ
 &~(
ACK_RESP_T_W4R_TIM_MASK
) ;

2193 
vÆ
 |(
rxDñayTime
 & 
ACK_RESP_T_W4R_TIM_MASK
) ;

2195 
	`dwt_wrôe32bôªg
(
ACK_RESP_T_ID
, 
vÆ
) ;

2196 
	}
}

2211 
dwt_£tˇŒbacks
((*
txˇŒback
)(c⁄° 
dwt_ˇŒback_d©a_t
 *), (*
rxˇŒback
)(const dwt_callback_data_t *))

2213 
dw1000loˇl
.
dwt_txˇŒback
 = 
txˇŒback
;

2215 
dw1000loˇl
.
dwt_rxˇŒback
 = 
rxˇŒback
;

2216 
	}
}

2229 
uöt8
 
	$dwt_checkIRQ
()

2231 
uöt8
 
ãmp
;

2233 
	`dwt_ªad‰omdevi˚
(
SYS_STATUS_ID
, 0, 1, &
ãmp
);

2235  (
ãmp
 & 0x1) ;

2236 
	}
}

2254 
	$dwt_i§
()

2256 
uöt32
 
°©us
 = 0;

2257 
uöt32
 
˛ór
 = 0;

2259 
dw1000loˇl
.
cd©a
.
evít
 = 0;

2260 
dw1000loˇl
.
cd©a
.
dblbuff
 = dw1000loˇl.
dblbuff⁄
 ;

2262 
°©us
 = 
dw1000loˇl
.
cd©a
.°©u†
	`dwt_ªad32bôªg
(
SYS_STATUS_ID
) ;

2278 if((
°©us
 & 
SYS_STATUS_LDEDONE
Ë&& (
dw1000loˇl
.
dblbuff⁄
 == 0))

2280 if((
°©us
 & (
SYS_STATUS_LDEDONE
 | 
SYS_STATUS_RXPHD
 | 
SYS_STATUS_RXSFDD
)) != (SYS_STATUS_LDEDONE | SYS_STATUS_RXPHD | SYS_STATUS_RXSFDD))

2284 
	`dwt_f‹˚åxoff
();

2286 
	`dwt_rxª£t
();

2289 
°©us
 &
SYS_STATUS_ALL_TX
;

2291 if(
dw1000loˇl
.
sysCFGªg
 & 
SYS_CFG_RXAUTR
)

2293 
	`dwt_wrôe16bôoff£åeg
(
SYS_CTRL_ID
,0,(
uöt16
)
SYS_CTRL_RXENAB
) ;

2297 
dw1000loˇl
.
cd©a
.
evít
 = 
DWT_SIG_RX_ERROR
 ;

2299 if(
dw1000loˇl
.
dwt_rxˇŒback
 !
NULL
)

2300 
dw1000loˇl
.
	`dwt_rxˇŒback
(&dw1000loˇl.
cd©a
);

2302 
	`¥ötf
("DW_IRQ_Error\r\n") ;

2305 
	`dwt_rxíabÀ
(0);

2314 if(
°©us
 & 
SYS_STATUS_RXFCG
)

2317 if(
°©us
 & 
SYS_STATUS_LDEDONE
)

2323 
uöt16
 
Àn
 = 0;

2325 i‡(
°©us
 & 
SYS_STATUS_RXOVRR
)

2330 
	`dwt_f‹˚åxoff
();

2332 
	`dwt_rxª£t
();

2334 if(
dw1000loˇl
.
sysCFGªg
 & 
SYS_CFG_RXAUTR
)

2336 
	`dwt_wrôe16bôoff£åeg
(
SYS_CTRL_ID
,0,(
uöt16
)
SYS_CTRL_RXENAB
) ;

2340 
dw1000loˇl
.
cd©a
.
evít
 = 
DWT_SIG_RX_ERROR
 ;

2342 if(
dw1000loˇl
.
dwt_rxˇŒback
 !
NULL
)

2344 
dw1000loˇl
.
	`dwt_rxˇŒback
(&dw1000loˇl.
cd©a
);

2352 
uöt8
 
‰ame
[255] ;

2353 
Àn
 = 
	`dwt_ªad16bôoff£åeg
(
RX_FINFO_ID
, 0) & 0x3FF;

2354 
	`dwt_ªad‰omdevi˚
(
RX_BUFFER_ID
,0,2,
dw1000loˇl
.
cd©a
.
f˘æ
) ;

2355 i‡(
dw1000loˇl
.
l⁄gFømes
==0)

2357 
Àn
 &= 0x7F ;

2359 
	`dwt_ªad‰omdevi˚
(
RX_BUFFER_ID
,0,
Àn
,&
‰ame
[0]) ;

2361 
dw1000loˇl
.
cd©a
.
d©Æígth
 = 
Àn
 ;

2362 
	`¥ötf
("%d = ",
Àn
);

2363 
uöt16
 
k
=0;k<(
Àn
);k++){

2364 
	`¥ötf
("%02x ", 
‰ame
[
k
]);

2367 if((
°©us
 & 
SYS_STATUS_AAT
)

2368 && (((
dw1000loˇl
.
cd©a
.
f˘æ
[0] & 0x20) == 0) || (dw1000local.cdata.fctrl[0] == 0x02))

2371 
˛ór
 |
SYS_STATUS_AAT
 ;

2372 
dw1000loˇl
.
cd©a
.
Øt£t
 = 0 ;

2373 
dw1000loˇl
.
waô4ª•
 = 0;

2377 
dw1000loˇl
.
cd©a
.
Øt£t
 = (
°©us
 & 
SYS_STATUS_AAT
) ;

2380 
dw1000loˇl
.
cd©a
.
evít
 = 
DWT_SIG_RX_OKAY
 ;

2382 if(
dw1000loˇl
.
dblbuff⁄
 == 0)

2385 
˛ór
 |
°©us
 & 
SYS_STATUS_ALL_RX_GOOD
 ;

2386 
	`dwt_wrôe32bôªg
(
SYS_STATUS_ID
,
˛ór
) ;

2391 if(
dw1000loˇl
.
dwt_rxˇŒback
 !
NULL
)

2393 
dw1000loˇl
.
	`dwt_rxˇŒback
(&dw1000loˇl.
cd©a
);

2398 
uöt8
 
buff
 ;

2399 
uöt8
 
h§b
 = 0x01 ;

2403 
	`dwt_ªad‰omdevi˚
(
SYS_STATUS_ID
, 3, 1, &
buff
);

2405 if((
buff
 & (
SYS_STATUS_ICRBP
 >> 24)) ==

2406 ((
buff
 & (
SYS_STATUS_HSRBP
 >> 24)) << 1))

2409 
˛ór
 |
°©us
 & 
SYS_STATUS_ALL_DBLBUFF
;

2410 
	`dwt_wrôe32bôªg
(
SYS_STATUS_ID
,
˛ór
);

2414 if((
dw1000loˇl
.
sysCFGªg
 & 
SYS_CFG_RXAUTR
) == 0)

2416 
	`dwt_wrôe16bôoff£åeg
(
SYS_CTRL_ID
,0,(
uöt16
)
SYS_CTRL_RXENAB
) ;

2420 if(
dw1000loˇl
.
dwt_rxˇŒback
 !
NULL
)

2422 
dw1000loˇl
.
	`dwt_rxˇŒback
(&dw1000loˇl.
cd©a
);

2426 if(
	`dwt_checkovîrun
() == 0)

2429 
	`dwt_wrôëodevi˚
(
SYS_CTRL_ID
, 
SYS_CTRL_HRBT_OFFSET
, 1, &
h§b
) ;

2435 
	`dwt_f‹˚åxoff
();

2437 
	`dwt_rxª£t
();

2439 if(
dw1000loˇl
.
sysCFGªg
 & 
SYS_CFG_RXAUTR
)

2441 
	`dwt_wrôe16bôoff£åeg
(
SYS_CTRL_ID
,0,(
uöt16
)
SYS_CTRL_RXENAB
) ;

2451 if(!(
dw1000loˇl
.
sysCFGªg
 & 
SYS_CFG_RXAUTR
))

2453 
	`dwt_f‹˚åxoff
();

2455 
	`dwt_rxª£t
();

2456 
dw1000loˇl
.
waô4ª•
 = 0;

2457 
dw1000loˇl
.
cd©a
.
evít
 = 
DWT_SIG_RX_ERROR
 ;

2458 if(
dw1000loˇl
.
dwt_rxˇŒback
 !
NULL
)

2460 
dw1000loˇl
.
	`dwt_rxˇŒback
(&dw1000loˇl.
cd©a
);

2463 
	`¥ötf
("DW_IRQ_Rx\r\n") ;

2464 
	`dwt_f‹˚åxoff
();

2465 
	`dwt_rxª£t
();

2466 
	`dwt_rxíabÀ
(0);

2472 i‡(
°©us
 & 
SYS_STATUS_TXFRS
)

2475 
˛ór
 |
SYS_STATUS_ALL_TX
;

2476 
	`dwt_wrôe32bôªg
(
SYS_STATUS_ID
,
˛ór
);

2479 if(
dw1000loˇl
.
cd©a
.
Øt£t
)

2481 
dw1000loˇl
.
cd©a
.
Øt£t
 = 0;

2482 if(
dw1000loˇl
.
dblbuff⁄
 == 0)

2484 if(
dw1000loˇl
.
waô4ª•
)

2489 
	`dwt_f‹˚åxoff
();

2495 
dw1000loˇl
.
cd©a
.
evít
 = 
DWT_SIG_TX_DONE
 ;

2498 if(
dw1000loˇl
.
dwt_txˇŒback
 !
NULL
)

2500 
dw1000loˇl
.
	`dwt_txˇŒback
(&dw1000loˇl.
cd©a
);

2506 i‡(
°©us
 & 
SYS_STATUS_RXRFTO
)

2508 
˛ór
 |
°©us
 & 
SYS_STATUS_RXRFTO
 ;

2509 
	`dwt_wrôe32bôªg
(
SYS_STATUS_ID
,
˛ór
) ;

2510 
dw1000loˇl
.
cd©a
.
evít
 = 
DWT_SIG_RX_TIMEOUT
 ;

2511 if(
dw1000loˇl
.
dwt_rxˇŒback
 !
NULL
)

2513 
dw1000loˇl
.
	`dwt_rxˇŒback
(&dw1000loˇl.
cd©a
);

2515 
dw1000loˇl
.
waô4ª•
 = 0;

2516 
	`¥ötf
("DW_IRQ_Timeout\r\n") ;

2517 
	`dwt_f‹˚åxoff
();

2518 
	`dwt_rxª£t
();

2522 if(
°©us
 & 
SYS_STATUS_ALL_RX_ERR
)

2524 
˛ór
 |
°©us
 & 
SYS_STATUS_ALL_RX_ERR
;

2525 
	`dwt_wrôe32bôªg
(
SYS_STATUS_ID
,
˛ór
) ;

2527 
dw1000loˇl
.
waô4ª•
 = 0;

2532 if(!(
dw1000loˇl
.
sysCFGªg
 & 
SYS_CFG_RXAUTR
))

2534 
	`dwt_f‹˚åxoff
();

2536 
	`dwt_rxª£t
();

2539 if(
°©us
 & 
SYS_STATUS_RXPHE
)

2541 
dw1000loˇl
.
cd©a
.
evít
 = 
DWT_SIG_RX_PHR_ERROR
 ;

2543 if(
°©us
 & 
SYS_STATUS_RXFCE
)

2545 
dw1000loˇl
.
cd©a
.
evít
 = 
DWT_SIG_RX_ERROR
 ;

2547 if(
°©us
 & 
SYS_STATUS_RXRFSL
)

2549 
dw1000loˇl
.
cd©a
.
evít
 = 
DWT_SIG_RX_SYNCLOSS
 ;

2551 if(
°©us
 & 
SYS_STATUS_RXSFDTO
)

2553 
dw1000loˇl
.
cd©a
.
evít
 = 
DWT_SIG_RX_SFDTIMEOUT
 ;

2555 if(
°©us
 & 
SYS_STATUS_RXPTO
)

2557 
dw1000loˇl
.
cd©a
.
evít
 = 
DWT_SIG_RX_PTOTIMEOUT
 ;

2561 
dw1000loˇl
.
cd©a
.
evít
 = 
DWT_SIG_RX_ERROR
 ;

2563 if(
dw1000loˇl
.
dwt_rxˇŒback
 !
NULL
)

2565 
dw1000loˇl
.
	`dwt_rxˇŒback
(&dw1000loˇl.
cd©a
);

2567 
°©us
 &
SYS_STATUS_ALL_TX
;

2571 
	}
}

2588 
	$dwt_£éeds
(
uöt8
 
ã°
)

2590 
uöt8
 
buf
[2];

2592 if(
ã°
 & 0x1)

2595 
	`dwt_ªad‰omdevi˚
(
GPIO_CTRL_ID
,0x00,2,
buf
);

2596 
buf
[1] &= ~0x3C;

2597 
buf
[1] |= 0x14;

2598 
	`dwt_wrôëodevi˚
(
GPIO_CTRL_ID
,0x01,1,&
buf
[1]);

2601 
	`dwt_ªad‰omdevi˚
(
PMSC_ID
,0x02,1,
buf
);

2602 
buf
[0] |= 0x84;

2603 
	`dwt_wrôëodevi˚
(
PMSC_ID
,0x02,1,
buf
);

2606 
buf
[0] = 0x10;

2607 
buf
[1] = 0x01;

2608 
	`dwt_wrôëodevi˚
(
PMSC_ID
,
PMSC_LEDC_OFFSET
,2,
buf
);

2611 i‡((
ã°
 & 0x1)== 0)

2614 
	`dwt_ªad‰omdevi˚
(
GPIO_CTRL_ID
,0x00,2,
buf
);

2615 
buf
[1] &= ~(0x14);

2616 
	`dwt_wrôëodevi˚
(
GPIO_CTRL_ID
,0x00,2,
buf
);

2620 if(
ã°
 & 0x2)

2622 
buf
[0] = 0x0f;

2623 
	`dwt_wrôëodevi˚
(
PMSC_ID
,0x2a,1,
buf
);

2624 
buf
[0] = 0x00;

2625 
	`dwt_wrôëodevi˚
(
PMSC_ID
,0x2a,1,
buf
);

2628 
	}
}

2642 
	$_dwt_íabÀ˛ocks
(
˛ocks
)

2644 
uöt8
 
ªg
[2];

2646 
	`dwt_ªad‰omdevi˚
(
PMSC_ID
, 
PMSC_CTRL0_OFFSET
, 2, 
ªg
);

2647 
˛ocks
)

2649 
ENABLE_ALL_SEQ
:

2651 
ªg
[0] = 0x00 ;

2652 
ªg
[1] =Ñeg[1] & 0xfe;

2655 
FORCE_SYS_XTI
:

2658 
ªg
[0] = 0x01 | (reg[0] & 0xfc);

2661 
FORCE_SYS_PLL
:

2664 
ªg
[0] = 0x02 | (reg[0] & 0xfc);

2667 
READ_ACC_ON
:

2669 
ªg
[0] = 0x48 | (reg[0] & 0xb3);

2670 
ªg
[1] = 0x80 |Ñeg[1];

2673 
READ_ACC_OFF
:

2675 
ªg
[0] =Ñeg[0] & 0xb3;

2676 
ªg
[1] = 0x7f &Ñeg[1];

2680 
FORCE_OTP_ON
:

2682 
ªg
[1] = 0x02 |Ñeg[1];

2685 
FORCE_OTP_OFF
:

2687 
ªg
[1] =Ñeg[1] & 0xfd;

2690 
FORCE_TX_PLL
:

2692 
ªg
[0] = 0x20| (reg[0] & 0xcf);

2701 
	`dwt_wrôëodevi˚
(
PMSC_ID
, 
PMSC_CTRL0_OFFSET
, 1, &
ªg
[0]);

2702 
	`dwt_wrôëodevi˚
(
PMSC_ID
, 0x1, 1, &
ªg
[1]);

2704 
	}
}

2717 
	$_dwt_dißbÀ£quícög
()

2719 
	`_dwt_íabÀ˛ocks
(
FORCE_SYS_XTI
);

2721 
	`dwt_wrôe16bôoff£åeg
(
PMSC_ID
, 
PMSC_CTRL1_OFFSET
, 
PMSC_CTRL1_PKTSEQ_DISABLE
);

2722 
	}
}

2737 
	$dwt_£tdñayedåxtime
(
uöt32
 
°¨âime
)

2739 
	`dwt_wrôe32bôoff£åeg
(
DX_TIME_ID
, 1, 
°¨âime
) ;

2741 
	}
}

2758 
	$dwt_°¨âx
(
uöt8
 
mode
)

2760 
ªtvÆ
 = 
DWT_SUCCESS
 ;

2761 
uöt8
 
ãmp
 = 0x00;

2762 
uöt16
 
checkTxOK
 = 0 ;

2764 if(
mode
 & 
DWT_RESPONSE_EXPECTED
)

2766 
ãmp
 = (
uöt8
)
SYS_CTRL_WAIT4RESP
 ;

2767 
	`dwt_wrôëodevi˚
(
SYS_CTRL_ID
,0,1,&
ãmp
) ;

2768 
dw1000loˇl
.
waô4ª•
 = 1;

2771 i‡(
mode
 & 
DWT_START_TX_DELAYED
)

2776 
ãmp
 |(
uöt8
)(
SYS_CTRL_TXDLYS
 | 
SYS_CTRL_TXSTRT
) ;

2777 
	`dwt_wrôëodevi˚
(
SYS_CTRL_ID
,0,1,&
ãmp
) ;

2778 
checkTxOK
 = 
	`dwt_ªad16bôoff£åeg
(
SYS_STATUS_ID
,3) ;

2780 i‡((
checkTxOK
 & 
SYS_STATUS_TXERR
) == 0)

2783 
ªtvÆ
 = 
DWT_SUCCESS
 ;

2789 
ãmp
 = (
uöt8
)
SYS_CTRL_TRXOFF
;

2790 
	`dwt_wrôëodevi˚
(
SYS_CTRL_ID
,0,1,&
ãmp
) ;

2796 
	`dwt_íãr¶ì∑·îtx
(0);

2797 
dw1000loˇl
.
waô4ª•
 = 0;

2798 
ªtvÆ
 = 
DWT_ERROR
 ;

2804 
ãmp
 |(
uöt8
)
SYS_CTRL_TXSTRT
 ;

2805 
	`dwt_wrôëodevi˚
(
SYS_CTRL_ID
,0,1,&
ãmp
) ;

2808  
ªtvÆ
;

2810 
	}
}

2823 
	$dwt_checkovîrun
()

2825  ((
	`dwt_ªad16bôoff£åeg
(
SYS_STATUS_ID
, 2Ë& (
SYS_STATUS_RXOVRR
 >> 16)) == (SYS_STATUS_RXOVRR >> 16));

2826 
	}
}

2839 
	$dwt_f‹˚åxoff
()

2842 
uöt8
 
ãmp
 ;

2843 
uöt32
 
mask
;

2845 
ãmp
 = (
uöt8
)
SYS_CTRL_TRXOFF
 ;

2847 
mask
 = 
	`dwt_ªad32bôªg
(
SYS_MASK_ID
) ;

2855 
	`dwt_wrôe32bôªg
(
SYS_MASK_ID
, 0) ;

2857 
	`dwt_wrôëodevi˚
(
SYS_CTRL_ID
,0,1,&
ãmp
) ;

2860 
	`dwt_wrôe32bôªg
(
SYS_STATUS_ID
,(
SYS_STATUS_ALL_TX
 | 
SYS_STATUS_ALL_RX_ERR
 | 
SYS_STATUS_ALL_RX_GOOD
)) ;

2862 
	`dwt_syn¸xbuÂås
();

2864 
	`dwt_wrôe32bôªg
(
SYS_MASK_ID
, 
mask
) ;

2868 
dw1000loˇl
.
waô4ª•
 = 0;

2870 
	}
}

2884 
	$dwt_syn¸xbuÂås
()

2886 
uöt8
 
buff
 ;

2888 
	`dwt_ªad‰omdevi˚
(
SYS_STATUS_ID
, 3, 1, &
buff
);

2890 if((
buff
 & (
SYS_STATUS_ICRBP
 >> 24)) !=

2891 ((
buff
 & (
SYS_STATUS_HSRBP
>>24)) << 1) )

2893 
uöt8
 
h§b
 = 0x01;

2894 
	`dwt_wrôëodevi˚
(
SYS_CTRL_ID
, 
SYS_CTRL_HRBT_OFFSET
 , 1, &
h§b
) ;

2896 
	}
}

2915 
	$dwt_£åxmode
(
mode
, 
uöt8
 
rxON
, uöt8 
rxOFF
)

2917 
uöt16
 
ªg16
 = 
RX_SNIFF_MASK
 & ((
rxOFF
 << 8Ë| 
rxON
);

2919 if(
mode
 & 
DWT_RX_SNIFF
)

2922 
	`dwt_wrôe16bôoff£åeg
(
RX_SNIFF_ID
, 0x00, 
ªg16
) ;

2926 
	`dwt_wrôe16bôoff£åeg
(
RX_SNIFF_ID
, 0x00, 0x0000) ;

2929 
	}
}

2943 
	$dwt_rxíabÀ
(
dñayed
)

2945 
uöt16
 
ãmp
 ;

2946 
uöt8
 
ãmp1
 = 0;

2947 
	`dwt_syn¸xbuÂås
();

2949 
ãmp
 = (
uöt16
)
SYS_CTRL_RXENAB
 ;

2951 i‡(
dñayed
)

2953 
ãmp
 |(
uöt16
)
SYS_CTRL_RXDLYE
 ;

2956 
	`dwt_wrôe16bôoff£åeg
(
SYS_CTRL_ID
,0,
ãmp
) ;

2958 i‡(
dñayed
)

2962 
	`dwt_ªad‰omdevi˚
(
SYS_STATUS_ID
,3,1,&
ãmp1
) ;

2964 i‡(
ãmp1
 & (
SYS_STATUS_HPDWARN
 >> 24))

2966 
	`dwt_f‹˚åxoff
();

2967 
ãmp
 = (
uöt16
)
SYS_CTRL_RXENAB
;

2968 
	`dwt_wrôe16bôoff£åeg
(
SYS_CTRL_ID
,0,
ãmp
) ;

2969  
DWT_ERROR
;

2973  
DWT_SUCCESS
;

2974 
	}
}

2990 
	$dwt_£åxtimeout
(
uöt16
 
time
)

2992 
uöt8
 
ãmp
 ;

2994 
	`dwt_ªad‰omdevi˚
(
SYS_CFG_ID
,3,1,&
ãmp
) ;

2996 if(
time
 > 0)

2998 
	`dwt_wrôe16bôoff£åeg
(
RX_FWTO_ID
, 0x0, 
time
) ;

3000 
ãmp
 |(
uöt8
)(
SYS_CFG_RXWTOE
>>24);

3002 
dw1000loˇl
.
sysCFGªg
 |
SYS_CFG_RXWTOE
;

3004 
	`dwt_wrôëodevi˚
(
SYS_CFG_ID
,3,1,&
ãmp
) ;

3008 
ãmp
 &~((
uöt8
)(
SYS_CFG_RXWTOE
>>24));

3010 
dw1000loˇl
.
sysCFGªg
 &~(
SYS_CFG_RXWTOE
);

3012 
	`dwt_wrôëodevi˚
(
SYS_CFG_ID
,3,1,&
ãmp
) ;

3017 
	}
}

3032 
	$dwt_£çªambÀdëe˘timeout
(
uöt16
 
timeout
)

3034 
	`dwt_wrôe16bôoff£åeg
(
DRX_CONF_ID
, 
DRX_PRETOC_OFFSET
, 
timeout
);

3035 
	}
}

3061 
	$dwt_£töãºu±
(
uöt32
 
bômask
, 
uöt8
 
íabÀ
)

3069 
uöt32
 
mask
 = 
	`dwt_ªad32bôªg
(
SYS_MASK_ID
) ;

3071 if(
íabÀ
)

3073 
mask
 |
bômask
 ;

3077 
mask
 &~
bômask
 ;

3079 
	`dwt_wrôe32bôªg
(
SYS_MASK_ID
,
mask
) ;

3082 
	}
}

3095 
	$dwt_c⁄figevítcou¡îs
(
íabÀ
)

3097 
uöt8
 
ãmp
 = 0x0;

3099 
ãmp
 = (
uöt8
)(
EVC_CLR
);

3100 
	`dwt_wrôëodevi˚
(
DIG_DIAG_ID
, 
EVC_CTRL_OFFSET
, 1, &
ãmp
) ;

3102 if(
íabÀ
)

3104 
ãmp
 = (
uöt8
)(
EVC_EN
);

3105 
	`dwt_wrôëodevi˚
(
DIG_DIAG_ID
, 
EVC_CTRL_OFFSET
, 1, &
ãmp
) ;

3107 
	}
}

3121 
	$dwt_ªadevítcou¡îs
(
dwt_devi˚ít˙ts_t
 *
cou¡îs
)

3123 
uöt32
 
ãmp
;

3125 
ãmp

	`dwt_ªad32bôoff£åeg
(
DIG_DIAG_ID
, 
EVC_PHE_OFFSET
);

3126 
cou¡îs
->
PHE
 = 
ãmp
 & 0xFFF;

3127 
cou¡îs
->
RSL
 = (
ãmp
 >> 16) & 0xFFF;

3129 
ãmp
 = 
	`dwt_ªad32bôoff£åeg
(
DIG_DIAG_ID
, 
EVC_FCG_OFFSET
);

3130 
cou¡îs
->
CRCG
 = 
ãmp
 & 0xFFF;

3131 
cou¡îs
->
CRCB
 = (
ãmp
 >> 16) & 0xFFF;

3133 
ãmp
 = 
	`dwt_ªad32bôoff£åeg
(
DIG_DIAG_ID
, 
EVC_FFR_OFFSET
);

3134 
cou¡îs
->
ARFE
 = 
ãmp
 & 0xFFF;

3135 
cou¡îs
->
OVER
 = (
ãmp
 >> 16) & 0xFFF;

3137 
ãmp
 = 
	`dwt_ªad32bôoff£åeg
(
DIG_DIAG_ID
, 
EVC_STO_OFFSET
);

3138 
cou¡îs
->
PTO
 = (
ãmp
 >> 16) & 0xFFF;

3139 
cou¡îs
->
SFDTO
 = 
ãmp
 & 0xFFF;

3141 
ãmp
 = 
	`dwt_ªad32bôoff£åeg
(
DIG_DIAG_ID
, 
EVC_FWTO_OFFSET
);

3142 
cou¡îs
->
TXF
 = (
ãmp
 >> 16) & 0xFFF;

3143 
cou¡îs
->
RTO
 = 
ãmp
 & 0xFFF;

3145 
ãmp
 = 
	`dwt_ªad32bôoff£åeg
(
DIG_DIAG_ID
, 
EVC_HPW_OFFSET
);

3146 
cou¡îs
->
HPW
 = 
ãmp
 & 0xFFF;

3147 
cou¡îs
->
TXW
 = (
ãmp
 >> 16) & 0xFFF;

3149 
	}
}

3162 
	$dwt_rxª£t
()

3164 
uöt8
 
ª£åx
 = 0xe0;

3166 
	`dwt_wrôëodevi˚
(
PMSC_ID
, 0x3, 1, &
ª£åx
);

3168 
ª£åx
 = 0xf0;

3169 
	`dwt_wrôëodevi˚
(
PMSC_ID
, 0x3, 1, &
ª£åx
);

3170 
	}
}

3183 
	$dwt_so·ª£t
()

3185 
uöt8
 
ãmp
[1] = {0};

3187 
	`_dwt_dißbÀ£quícög
();

3191 
	`dwt_wrôe16bôoff£åeg
(
AON_ID
, 
AON_WCFG_OFFSET
, 0x0);

3193 
	`dwt_wrôëodevi˚
(
AON_ID
, 
AON_CFG0_OFFSET
, 1, 
ãmp
);

3195 
	`_dwt_a⁄¨øyu∂ﬂd
();

3198 
	`dwt_ªad‰omdevi˚
(
PMSC_ID
, 0x3, 1, 
ãmp
) ;

3200 
ãmp
[0] &= 0x0F;

3201 
	`dwt_wrôëodevi˚
(
PMSC_ID
, 0x3, 1, &
ãmp
[0]) ;

3205 
	`deˇ_¶ìp
(10);

3207 
ãmp
[0] |= 0xF0;

3208 
	`dwt_wrôëodevi˚
(
PMSC_ID
, 0x3, 1, &
ãmp
[0]) ;

3210 
dw1000loˇl
.
waô4ª•
 = 0;

3212 
	}
}

3226 
	$dwt_xè…rim
(
uöt8
 
vÆue
)

3228 
uöt8
 
wrôe_buf
;

3230 
	`dwt_ªad‰omdevi˚
(
FS_CTRL_ID
,
FS_XTALT_OFFSET
,1,&
wrôe_buf
);

3232 
wrôe_buf
 &~
FS_XTALT_MASK
 ;

3234 
wrôe_buf
 |(
FS_XTALT_MASK
 & 
vÆue
) ;

3236 
	`dwt_wrôëodevi˚
(
FS_CTRL_ID
,
FS_XTALT_OFFSET
,1,&
wrôe_buf
);

3237 
	}
}

3252 
	$dwt_c⁄figcwmode
(
uöt8
 
ch™
)

3254 
uöt8
 
wrôe_buf
[1];

3255 #ifde‡
DWT_API_ERROR_CHECK


3256 i‡((
ch™
 < 1) || (chan > 7) || (6 == chan))

3258  
DWT_ERROR
 ;

3265 
	`_dwt_dißbÀ£quícög
();

3269 
	`dwt_wrôëodevi˚
(
FS_CTRL_ID
, 
FS_PLLCFG_OFFSET
, 5, &
∂l2_c⁄fig
[
ch™_idx
[
ch™
]][0]);

3273 
	`dwt_wrôe32bôoff£åeg
(
RF_CONF_ID
, 
RF_TXCTRL_OFFSET
, 
tx_c⁄fig
[
ch™_idx
[
ch™
]]);

3279 
	`dwt_wrôe32bôªg
(
RF_CONF_ID
, 
RF_CONF_TXPLLPOWEN_MASK
);

3280 
	`dwt_wrôe32bôªg
(
RF_CONF_ID
, 
RF_CONF_TXALLEN_MASK
);

3285 
wrôe_buf
[0] = 0x22;

3286 
	`dwt_wrôëodevi˚
(
PMSC_ID
,
PMSC_CTRL0_OFFSET
,1,
wrôe_buf
);

3287 
wrôe_buf
[0] = 0x07;

3288 
	`dwt_wrôëodevi˚
(
PMSC_ID
,0x1,1,
wrôe_buf
);

3291 
	`dwt_wrôe16bôoff£åeg
(
PMSC_ID
, 
PMSC_TXFINESEQ_OFFSET
, 
PMSC_TXFINESEQ_DIS_MASK
);

3294 
wrôe_buf
[0] = 
TC_PGTEST_CW
;

3297 
	`dwt_wrôëodevi˚
(
TX_CAL_ID
, 
TC_PGTEST_OFFSET
, 
TC_PGTEST_LEN
, 
wrôe_buf
);

3300  
DWT_SUCCESS
 ;

3301 
	}
}

3316 
	$dwt_c⁄figc⁄töuous‰amemode
(
uöt32
 
‰amîïëôi⁄øã
)

3318 
uöt8
 
wrôe_buf
[4];

3323 
	`_dwt_dißbÀ£quícög
();

3328 
	`dwt_wrôe32bôªg
(
RF_CONF_ID
, 
RF_CONF_TXPLLPOWEN_MASK
);

3329 
	`dwt_wrôe32bôªg
(
RF_CONF_ID
, 
RF_CONF_TXALLEN_MASK
);

3334 
	`_dwt_íabÀ˛ocks
(
FORCE_SYS_PLL
);

3335 
	`_dwt_íabÀ˛ocks
(
FORCE_TX_PLL
);

3338 if(
‰amîïëôi⁄øã
 < 4)

3340 
‰amîïëôi⁄øã
 = 4;

3342 
	`dwt_wrôe32bôoff£åeg
(
DX_TIME_ID
, 0, 
‰amîïëôi⁄øã
) ;

3346 
wrôe_buf
[0] = (
uöt8
)(
DIAG_TMC_TX_PSTM
) ;

3347 
	`dwt_wrôëodevi˚
(
DIG_DIAG_ID
, 
DIAG_TMC_OFFSET
, 1,
wrôe_buf
);

3348 
	}
}

3371 
uöt16
 
	$dwt_ªadãmpvb©
(
uöt8
 
Á°SPI
)

3373 
uöt8
 
wr_buf
[2];

3374 
uöt8
 
vb©_øw
;

3375 
uöt8
 
ãmp_øw
;

3378 
wr_buf
[0] = 0x80;

3379 
	`dwt_wrôëodevi˚
(
RF_CONF_ID
,0x11,1,
wr_buf
);

3381 
wr_buf
[0] = 0x0A;

3382 
	`dwt_wrôëodevi˚
(
RF_CONF_ID
,0x12,1,
wr_buf
);

3384 
wr_buf
[0] = 0x0f;

3385 
	`dwt_wrôëodevi˚
(
RF_CONF_ID
,0x12,1,
wr_buf
);

3388 
wr_buf
[0] = 0x00;

3389 
	`dwt_wrôëodevi˚
(
TX_CAL_ID
, 
TC_SARL_SAR_C
,1,
wr_buf
);

3390 
wr_buf
[0] = 0x01;

3391 
	`dwt_wrôëodevi˚
(
TX_CAL_ID
, 
TC_SARL_SAR_C
,1,
wr_buf
);

3393 if(
Á°SPI
 == 1)

3395 
	`deˇ_¶ìp
(1);

3397 
	`dwt_ªad‰omdevi˚
(
TX_CAL_ID
, 
TC_SARL_SAR_LVBAT_OFFSET
,2,
wr_buf
);

3401 
	`_dwt_íabÀ˛ocks
(
FORCE_SYS_XTI
);

3403 
	`dwt_ªad‰omdevi˚
(
TX_CAL_ID
, 
TC_SARL_SAR_LVBAT_OFFSET
,2,
wr_buf
);

3405 
	`_dwt_íabÀ˛ocks
(
ENABLE_ALL_SEQ
);

3408 
vb©_øw
 = 
wr_buf
[0];

3409 
ãmp_øw
 = 
wr_buf
[1];

3411 
wr_buf
[0] = 0x00;

3412 
	`dwt_wrôëodevi˚
(
TX_CAL_ID
, 
TC_SARL_SAR_C
,1,
wr_buf
);

3414  ((
ãmp_øw
<<8)|(
vb©_øw
));

3415 
	}
}

3430 
uöt8
 
	$dwt_ªadwakeu±emp
()

3432 
uöt8
 
ãmp_øw
;

3433 
	`dwt_ªad‰omdevi˚
(
TX_CAL_ID
,
TC_SARL_SAR_LTEMP_OFFSET
,1,&
ãmp_øw
);

3434  (
ãmp_øw
);

3435 
	}
}

3450 
uöt8
 
	$dwt_ªadwakeupvb©
()

3452 
uöt8
 
vb©_øw
;

3453 
	`dwt_ªad‰omdevi˚
(
TX_CAL_ID
,
TC_SARL_SAR_LVBAT_OFFSET
,1,&
vb©_øw
);

3454  (
vb©_øw
);

3455 
	}
}

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\drivers\radios\DWM\deca_device_api.h

13 #i‚de‡
_DECA_DEVICE_API_H_


14 
	#_DECA_DEVICE_API_H_


	)

16 #ifde‡
__˝lu•lus


20 
	~<°döt.h
>

22 #i‚de‡
uöt8


23 #i‚de‡
_DECA_UINT8_


24 
	#_DECA_UINT8_


	)

25 
	tuöt8
;

29 #i‚de‡
uöt16


30 #i‚de‡
_DECA_UINT16_


31 
	#_DECA_UINT16_


	)

32 
	tuöt16
;

36 #i‚de‡
uöt32


37 #i‚de‡
_DECA_UINT32_


38 
	#_DECA_UINT32_


	)

39 
	tuöt32
;

43 #i‚de‡
öt8


44 #i‚de‡
_DECA_INT8_


45 
	#_DECA_INT8_


	)

46 sig√d 
	töt8
;

50 #i‚de‡
öt16


51 #i‚de‡
_DECA_INT16_


52 
	#_DECA_INT16_


	)

53 sig√d 
	töt16
;

57 #i‚de‡
öt32


58 #i‚de‡
_DECA_INT32_


59 
	#_DECA_INT32_


	)

60 sig√d 
	töt32
;

64 
	#DWT_SUCCESS
 (0)

	)

65 
	#DWT_ERROR
 (-1)

	)

67 
	#DWT_TIME_UNITS
 (1.0/499.2e6/128.0)

68 

	)

69 
	#DWT_DEVICE_ID
 (0xDECA0130)

70 

	)

73 
	#DWT_BR_110K
 0

74 
	#DWT_BR_850K
 1

75 
	#DWT_BR_6M8
 2

76 

	)

79 
	#DWT_PRF_16M
 1

80 
	#DWT_PRF_64M
 2

81 

	)

83 
	#DWT_PAC8
 0

84 
	#DWT_PAC16
 1

85 
	#DWT_PAC32
 2

86 
	#DWT_PAC64
 3

87 

	)

91 
	#DWT_PLEN_4096
 0x0C

92 
	#DWT_PLEN_2048
 0x28

93 
	#DWT_PLEN_1536
 0x18

94 
	#DWT_PLEN_1024
 0x08

95 
	#DWT_PLEN_512
 0x34

96 
	#DWT_PLEN_256
 0x24

97 
	#DWT_PLEN_128
 0x14

98 
	#DWT_PLEN_64
 0x04

99 

	)

101 
	#DWT_SIG_RX_NOERR
 0

	)

102 
	#DWT_SIG_TX_DONE
 1

103 
	#DWT_SIG_RX_OKAY
 2

104 
	#DWT_SIG_RX_ERROR
 3

105 
	#DWT_SIG_RX_TIMEOUT
 4

106 
	#DWT_SIG_TX_AA_DONE
 6

107 

	)

108 
	#DWT_SIG_RX_PHR_ERROR
 8

109 
	#DWT_SIG_RX_SYNCLOSS
 9

110 
	#DWT_SIG_RX_SFDTIMEOUT
 10

111 
	#DWT_SIG_RX_PTOTIMEOUT
 11

112 
	#DWT_SIG_TX_PENDING
 12

113 
	#DWT_SIG_TX_ERROR
 13

114 
	#DWT_SIG_RX_PENDING
 14

115 

	)

116 
	#DWT_SFDTOC_DEF
 0x1041

117 

	)

118 
	#DWT_PHRMODE_STD
 0x0

119 
	#DWT_PHRMODE_EXT
 0x3

120 

	)

122 
	#DWT_START_TX_IMMEDIATE
 0

	)

123 
	#DWT_START_TX_DELAYED
 1

	)

124 
	#DWT_RESPONSE_EXPECTED
 2

	)

128 
	#DWT_FF_NOTYPE_EN
 0x000

129 
	#DWT_FF_COORD_EN
 0x002

130 
	#DWT_FF_BEACON_EN
 0x004

131 
	#DWT_FF_DATA_EN
 0x008

132 
	#DWT_FF_ACK_EN
 0x010

133 
	#DWT_FF_MAC_EN
 0x020

134 
	#DWT_FF_RSVD_EN
 0x040

135 

	)

137 
	#DWT_INT_TFRS
 0x00000080

138 
	#DWT_INT_LDED
 0x00000400

139 
	#DWT_INT_RFCG
 0x00004000

140 
	#DWT_INT_RPHE
 0x00001000

141 
	#DWT_INT_RFCE
 0x00008000

142 
	#DWT_INT_RFSL
 0x00010000

143 
	#DWT_INT_RFTO
 0x00020000

144 
	#DWT_INT_RXOVRR
 0x00100000

145 
	#DWT_INT_RXPTO
 0x00200000

146 
	#DWT_INT_SFDT
 0x04000000

147 
	#DWT_INT_ARFE
 0x20000000

148 

	)

151 
	#DWT_PRESRV_SLEEP
 0x0100

152 
	#DWT_LOADOPSET
 0x0080

153 
	#DWT_CONFIG
 0x0040

154 
	#DWT_TANDV
 0x0001

155 

	)

156 
	#DWT_XTAL_EN
 0x10

157 
	#DWT_WAKE_SLPCNT
 0x8

158 
	#DWT_WAKE_CS
 0x4

159 
	#DWT_WAKE_WK
 0x2

160 
	#DWT_SLP_EN
 0x1

161 

	)

163 
	#DWT_LOADUCODE
 0x1

	)

164 
	#DWT_LOADNONE
 0x0

	)

167 
	#DWT_OPSET_64LEN
 0x0

	)

168 
	#DWT_OPSET_TIGHT
 0x1

	)

169 
	#DWT_OPSET_DEFLT
 0x2

	)

173 
uöt32
 
°©us
;

174 
uöt8
 
evít
;

175 
uöt8
 
Øt£t
;

176 
uöt16
 
d©Æígth
;

177 
uöt8
 
f˘æ
[2];

178 
uöt8
 
dblbuff
 ;

180 }
	tdwt_ˇŒback_d©a_t
;

184 
CHAN_CTRL_TXCHAN_1
 = 0x01,

185 
CHAN_CTRL_TXCHAN_2
 = 0x02,

186 
CHAN_CTRL_TXCHAN_3
 = 0x03,

187 
CHAN_CTRL_TXCHAN_4
 = 0x04,

188 
CHAN_CTRL_TXCHAN_5
 = 0x05,

189 
CHAN_CTRL_TXCHAN_7
 = 0x07

190 }
	teCHAN
;

200 #¥agm®
∑ck
(1)

203 
uöt8
 
ch™
 ;

204 
uöt8
 
¥f
 ;

205 
uöt8
 
txPªambLígth
 ;

206 
uöt8
 
rxPAC
 ;

207 
uöt8
 
txCode
 ;

208 
uöt8
 
rxCode
 ;

209 
uöt8
 
nsSFD
 ;

210 
uöt8
 
d©aR©e
 ;

211 
uöt8
 
phrMode
 ;

212 
uöt16
 
sfdTO
 ;

213 }
	t__©åibuã__
 ((
	t∑cked
)Ë
	tdwt_c⁄fig_t
 ;

214 #¥agm®
∑ck
()

219 
uöt8
 
PGdly
;

225 
uöt32
 
powî
;

227 
	tdwt_txc⁄fig_t
 ;

233 
uöt16
 
maxNoi£
 ;

234 
uöt16
 
fú°P©hAmp1
 ;

235 
uöt16
 
°dNoi£
 ;

236 
uöt16
 
fú°P©hAmp2
 ;

237 
uöt16
 
fú°P©hAmp3
 ;

238 
uöt16
 
maxGrowthCIR
 ;

239 
uöt16
 
rxPªamCou¡
 ;

242 
uöt16
 
fú°P©h
 ;

243 }
	tdwt_rxdüg_t
 ;

249 
uöt16
 
PHE
 ;

250 
uöt16
 
RSL
 ;

251 
uöt16
 
CRCG
 ;

252 
uöt16
 
CRCB
 ;

253 
uöt16
 
ARFE
 ;

254 
uöt16
 
OVER
 ;

255 
uöt16
 
SFDTO
 ;

256 
uöt16
 
PTO
 ;

257 
uöt16
 
RTO
 ;

258 
uöt16
 
TXF
 ;

259 
uöt16
 
HPW
 ;

260 
uöt16
 
TXW
 ;

262 } 
	tdwt_devi˚ít˙ts_t
 ;

265 
dwt_íabÀRXTXtimeMesuª
();

279 
uöt32
 
dwt_gë∑πid
();

292 
uöt32
 
dwt_gëlŸid
();

305 
uöt32
 
dwt_ªaddevid
();

318 
uöt8
 
dwt_Ÿ¥evisi⁄
();

331 
dwt_£tGPIOf‹EXTTRX
();

346 
dwt_£tGPIOdúe˘i⁄
(
uöt32
 
gpioNum
, uöt32 
dúe˘i⁄
);

361 
dwt_£tGPIOvÆue
(
uöt32
 
gpioNum
, uöt32 
vÆue
);

385 
dwt_öôüli£
(
uöt16
 
c⁄fig
) ;

402 
dwt_c⁄figuª
(
dwt_c⁄fig_t
 *
c⁄fig
) ;

418 
dwt_c⁄figuªtxrf
(
dwt_txc⁄fig_t
 *
c⁄fig
) ;

433 
dwt_£åx™ã¬adñay
(
uöt16
 
™ã¬aDly
);

448 
dwt_£âx™ã¬adñay
(
uöt16
 
™ã¬aDly
);

462 
dwt_£tsm¨âxpowî
(
íabÀ
);

484 
dwt_wrôëxd©a
(
uöt16
 
txFømeLígth
, 
uöt8
 *
txFømeByãs
, uöt16 
txBuf„rOff£t
) ;

502 
dwt_wrôëxf˘æ
(
uöt16
 
txFømeLígth
, uöt16 
txBuf„rOff£t
) ;

519 
dwt_°¨âx
(
uöt8
 
mode
) ;

534 
dwt_£tdñayedåxtime
(
uöt32
 
°¨âime
) ;

548 
dwt_ªadtxtime°amp
(
uöt8
 * 
time°amp
);

561 
uöt32
 
dwt_ªadtxtime°amphi32
();

574 
uöt32
 
dwt_ªadtxtime°am∂o32
();

588 
dwt_ªadrxtime°amp
(
uöt8
 * 
time°amp
);

601 
uöt32
 
dwt_ªadrxtime°amphi32
();

614 
uöt32
 
dwt_ªadrxtime°am∂o32
();

627 
uöt32
 
dwt_ªadsy°ime°amphi32
();

642 
dwt_ªadsy°ime
(
uöt8
 * 
time°amp
);

655 
dwt_checkovîrun
();

668 
dwt_f‹˚åxoff
();

682 
dwt_syn¸xbuÂås
();

696 
dwt_rxíabÀ
(
dñayed
) ;

716 
	#DWT_RX_NORMAL
 (0x0)

	)

717 
	#DWT_RX_SNIFF
 (0x1)

	)

719 
dwt_£åxmode
(
mode
, 
uöt8
 
rxON
, uöt8 
rxOFF
);

733 
dwt_£èut‹xªíabÀ
(
íabÀ
);

747 
dwt_£tdbÃxbuffmode
(
íabÀ
);

763 
dwt_£åxtimeout
(
uöt16
 
time
);

777 
dwt_£çªambÀdëe˘timeout
(
uöt16
 
timeout
);

793 
uöt16
 
dwt_ˇlibøã¶ìp˙t
();

809 
dwt_c⁄figuª¶ìp˙t
(
uöt16
 
¶ìp˙t
);

844 
dwt_c⁄figuª¶ìp
(
uöt16
 
mode
, 
uöt8
 
wake
);

858 
dwt_íãr¶ìp
();

876 
dwt_íãr¶ì∑·îtx
(
íabÀ
);

901 
dwt_•icswakeup
(
uöt8
 *
buff
, 
uöt16
 
Àngth
);

916 
dwt_£tˇŒbacks
((*
txˇŒback
)(c⁄° 
dwt_ˇŒback_d©a_t
 *), (*
rxˇŒback
)(const dwt_callback_data_t *));

929 
uöt8
 
dwt_checkIRQ
();

947 
dwt_i§
();

973 
dwt_£töãºu±
–
uöt32
 
bômask
, 
uöt8
 
íabÀ
);

987 
dwt_£ç™id
(
uöt16
 
∑nID
);

1001 
dwt_£èddªss16
(
uöt16
 
sh‹tAddªss
);

1015 
dwt_£ãui
(
uöt8
 *
eui64
);

1029 
dwt_gëeui
(
uöt8
 *
eui64
);

1045 
dwt_Ÿ¥ód
(
uöt32
 
addªss
, uöt32 *
¨øy
, 
uöt8
 
Àngth
);

1067 
dwt_íabÀ‰amefûãr
(
uöt16
 
bômask
);

1083 
dwt_íabÀautﬂck
(
uöt8
 
ª•⁄£DñayTime
);

1097 
dwt_£åxa·îtxdñay
(
uöt32
 
rxDñayTime
);

1110 
dwt_rxª£t
();

1123 
dwt_so·ª£t
() ;

1139 
dwt_ªadrxd©a
(
uöt8
 *
buf„r
, 
uöt16
 
Àngth
, uöt16 
rxBuf„rOff£t
);

1155 
dwt_ªadaccd©a
(
uöt8
 *
buf„r
, 
uöt16
 
Àngth
, uöt16 
rxBuf„rOff£t
);

1169 
dwt_ªaddügno°ics
(
dwt_rxdüg_t
 * 
dügno°ics
);

1186 
dwt_lﬂd›£âab‰omŸp
(
uöt8
 
gèb_£l
);

1199 
dwt_c⁄figevítcou¡îs
(
íabÀ
);

1213 
dwt_ªadevítcou¡îs
(
dwt_devi˚ít˙ts_t
 *
cou¡îs
);

1228 
uöt32
 
dwt_Ÿpwrôóndvîify
(uöt32 
vÆue
, 
uöt16
 
addªss
);

1245 
dwt_£éeds
(
uöt8
 
ã°
);

1259 
dwt_xè…rim
(
uöt8
 
vÆue
);

1273 
dwt_c⁄figcwmode
(
uöt8
 
ch™
);

1288 
dwt_c⁄figc⁄töuous‰amemode
(
uöt32
 
‰amîïëôi⁄øã
);

1311 
uöt16
 
dwt_ªadãmpvb©
(
uöt8
 
Á°SPI
);

1326 
uöt8
 
dwt_ªadwakeu±emp
() ;

1341 
uöt8
 
dwt_ªadwakeupvb©
() ;

1366 
dwt_wrôëodevi˚


1368 
uöt16
 
ªc‹dNumbî
,

1369 
uöt16
 
ödex
,

1370 
uöt32
 
Àngth
,

1371 
uöt8
 *
buf„r


1397 
dwt_ªad‰omdevi˚


1399 
uöt16
 
ªc‹dNumbî
,

1400 
uöt16
 
ödex
,

1401 
uöt32
 
Àngth
,

1402 
uöt8
 *
buf„r


1418 
uöt32
 
dwt_ªad32bôoff£åeg
(
ªgFûeID
, 
ªgOff£t
) ;

1434 
dwt_wrôe32bôoff£åeg
(
ªgFûeID
, 
ªgOff£t
, 
uöt32
 
ªgvÆ
);

1449 
uöt16
 
dwt_ªad16bôoff£åeg
(
ªgFûeID
, 
ªgOff£t
);

1465 
dwt_wrôe16bôoff£åeg
(
ªgFûeID
, 
ªgOff£t
, 
uöt16
 
ªgvÆ
) ;

1467 
	#dwt_wrôe32bôªg
(
x
,
y
Ë
	`dwt_wrôe32bôoff£åeg
(x,0,y)

	)

1468 
	#dwt_ªad32bôªg
(
x
Ë
	`dwt_ªad32bôoff£åeg
(x,0)

	)

1493 
wrôëo•i


1495 
uöt16
 
hódîLígth
,

1496 
uöt8
 *
hódîBuf„r
,

1497 
uöt32
 
bodyÀngth
,

1498 
uöt8
 *
bodyBuf„r


1501 
	gwrôëo•i1


1503 
uöt16
 
	ghódîLígth
,

1504 
uöt8
 *
	ghódîBuf„r
,

1505 
uöt32
 
	gbodyÀngth
,

1506 
uöt8
 *
	gbodyBuf„r


1531 
ªad‰om•i


1533 
uöt16
 
hódîLígth
,

1534 
uöt8
 *
hódîBuf„r
,

1535 
uöt32
 
ªadÀngth
,

1536 
uöt8
 *
ªadBuf„r


1553 
dwt_gëøngebüs
(
uöt8
 
ch™
, 
ønge
, uöt8 
¥f
);

1570 
	tdeˇIrqSètus_t
 ;

1587 
deˇIrqSètus_t
 
deˇmuãx⁄
() ;

1604 
deˇmuãxoff
(
deˇIrqSètus_t
 
s
) ;

1607 #ifde‡
__˝lu•lus


	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\drivers\radios\DWM\deca_param_types.h

12 #i‚de‡
_DECA_PARAM_TYPES_H_


13 
	#_DECA_PARAM_TYPES_H_


	)

15 #ifde‡
__˝lu•lus


18 
	~"deˇ_ty≥s.h
"

20 
	#NUM_BR
 3

	)

21 
	#NUM_PRF
 2

	)

22 
	#NUM_PACS
 4

	)

23 
	#NUM_BW
 2

24 
	#NUM_SFD
 2

25 
	#NUM_CH
 6

26 
	#NUM_CH_SUPPORTED
 8

27 
	#PCODES
 25

28 

	)

31 
uöt32
 
lo32
;

32 
uöt16
 
èrgë
[
NUM_PRF
];

33 } 
	tagc_cfg_°ru˘
 ;

35 c⁄° 
agc_cfg_°ru˘
 
agc_c⁄fig
 ;

38 c⁄° 
uöt16
 
s·sh
[
NUM_BR
][
NUM_SFD
];

40 c⁄° 
uöt16
 
dtu√1
[
NUM_PRF
];

42 
	#XMLPARAMS_VERSION
 (1.17f)

	)

44 
uöt8
 
∂l2_c⁄fig
[
NUM_CH
][5];

45 
uöt8
 
rx_c⁄fig
[
NUM_BW
];

46 
uöt32
 
tx_c⁄fig
[
NUM_CH
];

47 
uöt8
 
dwnsSFDÀn
[
NUM_BR
];

48 
uöt32
 
digôÆ_bb_c⁄fig
[
NUM_PRF
][
NUM_PACS
];

49 
uöt8
 
ch™_idx
[
NUM_CH_SUPPORTED
];

51 
	#PEAK_MULTPLIER
 (0x60)

52 
	#N_STD_FACTOR
 (13)

	)

53 
	#LDE_PARAM1
 (
PEAK_MULTPLIER
 | 
N_STD_FACTOR
)

	)

55 
	#LDE_PARAM3_16
 (0x1607)

	)

56 
	#LDE_PARAM3_64
 (0x0607)

	)

58 c⁄° 
uöt16
 
lde_ª∂iˇC€ff
[
PCODES
];

60 #ifde‡
__˝lu•lus


	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\drivers\radios\DWM\deca_params_init.c

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

37 
	~"deˇ_ªgs.h
"

38 
	~"deˇ_devi˚_≠i.h
"

39 
	~"deˇ_∑øm_ty≥s.h
"

45 
uöt8
 
	gch™_idx
[
NUM_CH_SUPPORTED
] = {0, 0, 1, 2, 3, 4, 0, 5};

48 
uöt32
 
	gtx_c⁄fig
[
NUM_CH
] =

50 
RF_TXCTRL_CH1
,

51 
RF_TXCTRL_CH2
,

52 
RF_TXCTRL_CH3
,

53 
RF_TXCTRL_CH4
,

54 
RF_TXCTRL_CH5
,

55 
RF_TXCTRL_CH7
,

59 
uöt8
 
	g∂l2_c⁄fig
[
NUM_CH
][5] =

76 
uöt8
 
	grx_c⁄fig
[
NUM_BW
] =

83 c⁄° 
agc_cfg_°ru˘
 
	gagc_c⁄fig
 =

85 
AGC_TUNE2_VAL
,

87 { 
AGC_TUNE1_16M
 , 
AGC_TUNE1_64M
 }

91 
uöt8
 
	gdwnsSFDÀn
[
NUM_BR
] = { 0x40, 0x10, 0x08 };

94 c⁄° 
uöt16
 
	gs·sh
[
NUM_BR
][
NUM_SFD
] =

113 c⁄° 
uöt16
 
	gdtu√1
[
NUM_PRF
] =

119 
uöt32
 
	gdigôÆ_bb_c⁄fig
[
NUM_PRF
][
NUM_PACS
] =

145 c⁄° 
uöt16
 
	glde_ª∂iˇC€ff
[
PCODES
] = {

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\drivers\radios\DWM\deca_range_tables.c

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

35 
	~"deˇ_devi˚_≠i.h
"

36 
	~"deˇ_∑øm_ty≥s.h
"

38 
	#NUM_16M_OFFSET
 (37)

	)

39 
	#NUM_16M_OFFSETWB
 (68)

	)

40 
	#NUM_64M_OFFSET
 (26)

	)

41 
	#NUM_64M_OFFSETWB
 (59)

	)

43 c⁄° 
uöt8
 
	gch™_idxnb
[
NUM_CH_SUPPORTED
] = {0, 0, 1, 2, 0, 3, 0, 0};

44 c⁄° 
uöt8
 
	gch™_idxwb
[
NUM_CH_SUPPORTED
] = {0, 0, 0, 0, 0, 0, 0, 1};

52 
	#CM_OFFSET_16M_NB
 (-23)

53 
	#CM_OFFSET_16M_WB
 (-28)

54 
	#CM_OFFSET_64M_NB
 (-17)

55 
	#CM_OFFSET_64M_WB
 (-30)

56 

	)

62 c⁄° 
uöt8
 
	gønge25cm16PRFnb
[4][
NUM_16M_OFFSET
] =

234 c⁄° 
uöt8
 
	gønge25cm16PRFwb
[2][
NUM_16M_OFFSETWB
] =

385 c⁄° 
uöt8
 
	gønge25cm64PRFnb
[4][
NUM_64M_OFFSET
] =

512 c⁄° 
uöt8
 
	gønge25cm64PRFwb
[2][
NUM_64M_OFFSETWB
] =

656 
	$dwt_gëøngebüs
(
uöt8
 
ch™
, 
ønge
, uöt8 
¥f
)

659 
i
 = 0 ;

660 
ch™Idx
 ;

661 
cmoff£ti
 ;

663 
mOff£t
 ;

667 
øngeöt25cm
 = (Ë(
ønge
 * 4.00) ;

669 i‡(
øngeöt25cm
 > 255)Ñangeint25cm = 255 ;

671 i‡(
¥f
 =
DWT_PRF_16M
)

673 
ch™
)

678 
ch™Idx
 = 
ch™_idxwb
[
ch™
];

679 
øngeöt25cm
 > 
ønge25cm16PRFwb
[
ch™Idx
][
i
]) i++ ;

680 
cmoff£ti
 = 
i
 + 
CM_OFFSET_16M_WB
 ;

685 
ch™Idx
 = 
ch™_idxnb
[
ch™
];

686 
øngeöt25cm
 > 
ønge25cm16PRFnb
[
ch™Idx
][
i
]) i++ ;

687 
cmoff£ti
 = 
i
 + 
CM_OFFSET_16M_NB
 ;

693 
ch™
)

698 
ch™Idx
 = 
ch™_idxwb
[
ch™
];

699 
øngeöt25cm
 > 
ønge25cm64PRFwb
[
ch™Idx
][
i
]) i++ ;

700 
cmoff£ti
 = 
i
 + 
CM_OFFSET_64M_WB
 ;

705 
ch™Idx
 = 
ch™_idxnb
[
ch™
];

706 
øngeöt25cm
 > 
ønge25cm64PRFnb
[
ch™Idx
][
i
]) i++ ;

707 
cmoff£ti
 = 
i
 + 
CM_OFFSET_64M_NB
 ;

713 
mOff£t
 = (Ë
cmoff£ti
 ;

715 
mOff£t
 *= 0.01 ;

717  (
mOff£t
) ;

718 
	}
}

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\drivers\radios\DWM\deca_regs.h

14 #i‚de‡
_DECA_REGS_H_


15 
	#_DECA_REGS_H_


	)

17 #ifde‡
__˝lu•lus


21 
	~"deˇ_vîsi⁄.h
"

27 
	#DEV_ID_ID
 0x00

	)

28 
	#DEV_ID_LEN
 (4)

	)

30 
	#DEV_ID_REV_MASK
 0x0000000FUL

	)

31 
	#DEV_ID_VER_MASK
 0x000000F0UL

	)

32 
	#DEV_ID_MODEL_MASK
 0x0000FF00UL

	)

33 
	#DEV_ID_RIDTAG_MASK
 0xFFFF0000UL

	)

38 
	#EUI_64_ID
 0x01

	)

39 
	#EUI_64_LEN
 (8)

	)

44 
	#PANADR_ID
 0x03

	)

45 
	#PANADR_LEN
 (4)

	)

47 
	#PANADR_SHORT_ADDR_MASK
 0x0000FFFFUL

	)

48 
	#PANADR_PAN_ID_MASK
 0xFFFF00F0UL

	)

53 
	#REG_05_ID_RESERVED
 0x05

	)

58 
	#SYS_CFG_ID
 0x04

	)

59 
	#SYS_CFG_LEN
 (4)

	)

61 
	#SYS_CFG_MASK
 0xF047FFFFUL

	)

62 
	#SYS_CFG_FF_ALL_EN
 0x000001FEUL

	)

64 
	#SYS_CFG_FFE
 0x00000001UL

	)

65 
	#SYS_CFG_FFBC
 0x00000002UL

	)

66 
	#SYS_CFG_FFAB
 0x00000004UL

	)

67 
	#SYS_CFG_FFAD
 0x00000008UL

	)

68 
	#SYS_CFG_FFAA
 0x00000010UL

	)

69 
	#SYS_CFG_FFAM
 0x00000020UL

	)

70 
	#SYS_CFG_FFAR
 0x00000040UL

	)

71 
	#SYS_CFG_FFA4
 0x00000080UL

	)

73 
	#SYS_CFG_FFA5
 0x00000100UL

	)

74 
	#SYS_CFG_HIRQ_POL
 0x00000200UL

	)

75 
	#SYS_CFG_SPI_EDGE
 0x00000400UL

	)

76 
	#SYS_CFG_DIS_FCE
 0x00000800UL

	)

77 
	#SYS_CFG_DIS_DRXB
 0x00001000UL

	)

78 
	#SYS_CFG_DIS_PHE
 0x00002000UL

	)

79 
	#SYS_CFG_DIS_RSDE
 0x00004000UL

	)

80 
	#SYS_CFG_FCS_INIT2F
 0x00008000UL

	)

82 
	#SYS_CFG_PHR_MODE_00
 0x00000000UL

	)

83 
	#SYS_CFG_PHR_MODE_11
 0x00030000UL

	)

84 
	#SYS_CFG_DIS_STXP
 0x00040000UL

	)

85 
	#SYS_CFG_RXM110K
 0x00400000UL

	)

87 
	#SYS_CFG_RXWTOE
 0x10000000UL

	)

88 
	#SYS_CFG_RXAUTR
 0x20000000UL

	)

89 
	#SYS_CFG_AUTOACK
 0x40000000UL

	)

90 
	#SYS_CFG_AACKPEND
 0x80000000UL

	)

96 
	#SYS_TIME_ID
 0x06

	)

97 
	#SYS_TIME_LEN
 (5Ë

	)

103 
	#REG_07_ID_RESERVED
 0x07

	)

108 
	#TX_FCTRL_ID
 0x08

	)

109 
	#TX_FCTRL_LEN
 (5Ë

	)

111 
	#TX_FCTRL_TFLEN_MASK
 0x0000007FUL

	)

112 
	#TX_FCTRL_TFLE_MASK
 0x00000380UL

	)

113 
	#TX_FCTRL_FLE_MASK
 0x000003FFUL

	)

114 
	#TX_FCTRL_TXBR_MASK
 0x00006000UL

	)

115 
	#TX_FCTRL_TXPRF_MASK
 0x00030000UL

	)

116 
	#TX_FCTRL_TXPSR_MASK
 0x000C0000UL

	)

117 
	#TX_FCTRL_PE_MASK
 0x00300000UL

	)

118 
	#TX_FCTRL_TXPSR_PE_MASK
 0x003C0000UL

	)

119 
	#TX_FCTRL_SAFE_MASK_32
 0xFFFFE3FFUL

	)

122 
	#TX_FCTRL_TXBR_110k
 0x00000000UL

	)

123 
	#TX_FCTRL_TXBR_850k
 0x00002000UL

	)

124 
	#TX_FCTRL_TXBR_6M
 0x00004000UL

	)

125 
	#TX_FCTRL_TXBR_SHFT
 (13Ë

	)

126 
	#TX_FCTRL_TR
 0x00008000UL

	)

127 
	#TX_FCTRL_TR_SHFT
 (15Ë

	)

129 
	#TX_FCTRL_TXPRF_SHFT
 (16Ë

	)

130 
	#TX_FCTRL_TXPRF_4M
 0x00000000UL

	)

131 
	#TX_FCTRL_TXPRF_16M
 0x00010000UL

	)

132 
	#TX_FCTRL_TXPRF_64M
 0x00020000UL

	)

133 
	#TX_FCTRL_TXPSR_SHFT
 (18Ë

	)

134 
	#TX_FCTRL_PE_SHFT
 (20Ë

	)

135 
	#TX_FCTRL_TXPSR_PE_16
 0x00000000UL

	)

136 
	#TX_FCTRL_TXPSR_PE_64
 0x00040000UL

	)

137 
	#TX_FCTRL_TXPSR_PE_128
 0x00140000UL

	)

138 
	#TX_FCTRL_TXPSR_PE_256
 0x00240000UL

	)

139 
	#TX_FCTRL_TXPSR_PE_512
 0x00340000UL

	)

140 
	#TX_FCTRL_TXPSR_PE_1024
 0x00080000UL

	)

141 
	#TX_FCTRL_TXPSR_PE_1536
 0x00180000UL

	)

142 
	#TX_FCTRL_TXPSR_PE_2048
 0x00280000UL

	)

143 
	#TX_FCTRL_TXPSR_PE_4096
 0x000C0000UL

	)

145 
	#TX_FCTRL_TXBOFFS_MASK
 0xFF000000UL

	)

147 
	#TX_FCTRL_IFSDELAY_MASK
 0xFF00000000ULL

	)

152 
	#TX_BUFFER_ID
 0x09

	)

153 
	#TX_BUFFER_LEN
 (1024)

	)

158 
	#DX_TIME_ID
 0x0A

	)

159 
	#DX_TIME_LEN
 (5)

	)

164 
	#REG_0B_ID_RESERVED
 0x0B

	)

169 
	#RX_FWTO_ID
 0x0C

	)

170 
	#RX_FWTO_LEN
 (2Ë

	)

172 
	#RX_FWTO_MASK
 0xFFFF

	)

177 
	#SYS_CTRL_ID
 0x0D

	)

178 
	#SYS_CTRL_LEN
 (4)

	)

180 
	#SYS_CTRL_MASK_32
 0x010003CFUL

	)

182 
	#SYS_CTRL_SFCST
 0x00000001UL

	)

183 
	#SYS_CTRL_TXSTRT
 0x00000002UL

	)

184 
	#SYS_CTRL_TXDLYS
 0x00000004UL

	)

185 
	#SYS_CTRL_CANSFCS
 0x00000008UL

	)

186 
	#SYS_CTRL_TRXOFF
 0x00000040UL

	)

187 
	#SYS_CTRL_WAIT4RESP
 0x00000080UL

	)

189 
	#SYS_CTRL_RXENAB
 0x00000100UL

	)

190 
	#SYS_CTRL_RXDLYE
 0x00000200UL

	)

193 
	#SYS_CTRL_HSRBTOGGLE
 0x01000000UL

	)

194 
	#SYS_CTRL_HRBT
 (
SYS_CTRL_HSRBTOGGLE
)

	)

195 
	#SYS_CTRL_HRBT_OFFSET
 (3)

	)

200 
	#SYS_MASK_ID
 0x0E

	)

201 
	#SYS_MASK_LEN
 (4)

	)

203 
	#SYS_MASK_MASK_32
 0x3FF7FFFEUL

	)

205 
	#SYS_MASK_MCPLOCK
 0x00000002UL

	)

206 
	#SYS_MASK_MESYNCR
 0x00000004UL

	)

207 
	#SYS_MASK_MAAT
 0x00000008UL

	)

208 
	#SYS_MASK_MTXFRB
 0x00000010UL

	)

209 
	#SYS_MASK_MTXPRS
 0x00000020UL

	)

210 
	#SYS_MASK_MTXPHS
 0x00000040UL

	)

211 
	#SYS_MASK_MTXFRS
 0x00000080UL

	)

213 
	#SYS_MASK_MRXPRD
 0x00000100UL

	)

214 
	#SYS_MASK_MRXSFDD
 0x00000200UL

	)

215 
	#SYS_MASK_MLDEDONE
 0x00000400UL

	)

216 
	#SYS_MASK_MRXPHD
 0x00000800UL

	)

217 
	#SYS_MASK_MRXPHE
 0x00001000UL

	)

218 
	#SYS_MASK_MRXDFR
 0x00002000UL

	)

219 
	#SYS_MASK_MRXFCG
 0x00004000UL

	)

220 
	#SYS_MASK_MRXFCE
 0x00008000UL

	)

222 
	#SYS_MASK_MRXRFSL
 0x00010000UL

	)

223 
	#SYS_MASK_MRXRFTO
 0x00020000UL

	)

224 
	#SYS_MASK_MLDEERR
 0x00040000UL

	)

225 
	#SYS_MASK_MRXOVRR
 0x00100000UL

	)

226 
	#SYS_MASK_MRXPTO
 0x00200000UL

	)

227 
	#SYS_MASK_MGPIOIRQ
 0x00400000UL

	)

228 
	#SYS_MASK_MSLP2INIT
 0x00800000UL

	)

230 
	#SYS_MASK_MRFPLLLL
 0x01000000UL

	)

231 
	#SYS_MASK_MCPLLLL
 0x02000000UL

	)

232 
	#SYS_MASK_MRXSFDTO
 0x04000000UL

	)

233 
	#SYS_MASK_MHPDWARN
 0x08000000UL

	)

234 
	#SYS_MASK_MTXBERR
 0x10000000UL

	)

235 
	#SYS_MASK_MAFFREJ
 0x20000000UL

	)

240 
	#SYS_STATUS_ID
 0x0F

	)

241 
	#SYS_STATUS_LEN
 (5Ë

	)

243 
	#SYS_STATUS_MASK_32
 0xFFF7FFFFUL

	)

245 
	#SYS_STATUS_IRQS
 0x00000001UL

	)

246 
	#SYS_STATUS_CPLOCK
 0x00000002UL

	)

247 
	#SYS_STATUS_ESYNCR
 0x00000004UL

	)

248 
	#SYS_STATUS_AAT
 0x00000008UL

	)

249 
	#SYS_STATUS_TXFRB
 0x00000010UL

	)

250 
	#SYS_STATUS_TXPRS
 0x00000020UL

	)

251 
	#SYS_STATUS_TXPHS
 0x00000040UL

	)

252 
	#SYS_STATUS_TXFRS
 0x00000080UL

	)

254 
	#SYS_STATUS_RXPRD
 0x00000100UL

	)

255 
	#SYS_STATUS_RXSFDD
 0x00000200UL

	)

256 
	#SYS_STATUS_LDEDONE
 0x00000400UL

	)

257 
	#SYS_STATUS_RXPHD
 0x00000800UL

	)

258 
	#SYS_STATUS_RXPHE
 0x00001000UL

	)

259 
	#SYS_STATUS_RXDFR
 0x00002000UL

	)

260 
	#SYS_STATUS_RXFCG
 0x00004000UL

	)

261 
	#SYS_STATUS_RXFCE
 0x00008000UL

	)

263 
	#SYS_STATUS_RXRFSL
 0x00010000UL

	)

264 
	#SYS_STATUS_RXRFTO
 0x00020000UL

	)

265 
	#SYS_STATUS_LDEERR
 0x00040000UL

	)

266 
	#SYS_STATUS_ª£rved
 0x00080000UL

	)

267 
	#SYS_STATUS_RXOVRR
 0x00100000UL

	)

268 
	#SYS_STATUS_RXPTO
 0x00200000UL

	)

269 
	#SYS_STATUS_GPIOIRQ
 0x00400000UL

	)

270 
	#SYS_STATUS_SLP2INIT
 0x00800000UL

	)

272 
	#SYS_STATUS_RFPLL_LL
 0x01000000UL

	)

273 
	#SYS_STATUS_CLKPLL_LL
 0x02000000UL

	)

274 
	#SYS_STATUS_RXSFDTO
 0x04000000UL

	)

275 
	#SYS_STATUS_HPDWARN
 0x08000000UL

	)

276 
	#SYS_STATUS_TXBERR
 0x10000000UL

	)

277 
	#SYS_STATUS_AFFREJ
 0x20000000UL

	)

278 
	#SYS_STATUS_HSRBP
 0x40000000UL

	)

279 
	#SYS_STATUS_ICRBP
 0x80000000UL

	)

281 
	#SYS_STATUS_RXRSCS
 0x0100000000ULL

	)

282 
	#SYS_STATUS_RXPREJ
 0x0200000000ULL

	)

283 
	#SYS_STATUS_TXPUTE
 0x0400000000ULL

	)

285 
	#SYS_STATUS_TXERR
 (0x0408Ë

	)

288 
	#SYS_STATUS_ALL_RX_GOOD
 (
SYS_STATUS_RXDFR
 | 
SYS_STATUS_RXFCG
 | 
SYS_STATUS_RXPRD
 | \

289 
SYS_STATUS_RXSFDD
 | 
SYS_STATUS_RXPHD
 | 
SYS_STATUS_LDEDONE
)

	)

292 
	#SYS_STATUS_ALL_DBLBUFF
 (
SYS_STATUS_RXDFR
 | 
SYS_STATUS_RXFCG
)

	)

295 
	#SYS_STATUS_ALL_RX_ERR
 (
SYS_STATUS_RXPHE
 | 
SYS_STATUS_RXFCE
 | 
SYS_STATUS_RXRFSL
 | 
SYS_STATUS_RXSFDTO
 \

296 | 
SYS_STATUS_RXRFTO
 | 
SYS_STATUS_RXPTO
 | 
SYS_STATUS_AFFREJ
 | 
SYS_STATUS_LDEERR
)

	)

299 
	#SYS_STATUS_ALL_TX
 (
SYS_STATUS_AAT
 | 
SYS_STATUS_TXFRB
 | 
SYS_STATUS_TXPRS
 | \

300 
SYS_STATUS_TXPHS
 | 
SYS_STATUS_TXFRS
 )

	)

306 
	#RX_FINFO_ID
 0x10

	)

307 
	#RX_FINFO_LEN
 (4)

	)

309 
	#RX_FINFO_MASK_32
 0xFFFFFBFFUL

	)

310 
	#RX_FINFO_RXFLEN_MASK
 0x0000007FUL

	)

311 
	#RX_FINFO_RXFLE_MASK
 0x00000380UL

	)

312 
	#RX_FINFO_RXFL_MASK_1023
 0x000003FFUL

	)

314 
	#RX_FINFO_RXNSPL_MASK
 0x00001800UL

	)

315 
	#RX_FINFO_RXPSR_MASK
 0x000C0000UL

	)

317 
	#RX_FINFO_RXPEL_MASK
 0x000C1800UL

	)

318 
	#RX_FINFO_RXPEL_64
 0x00040000UL

	)

319 
	#RX_FINFO_RXPEL_128
 0x00040800UL

	)

320 
	#RX_FINFO_RXPEL_256
 0x00041000UL

	)

321 
	#RX_FINFO_RXPEL_512
 0x00041800UL

	)

322 
	#RX_FINFO_RXPEL_1024
 0x00080000UL

	)

323 
	#RX_FINFO_RXPEL_1536
 0x00080800UL

	)

324 
	#RX_FINFO_RXPEL_2048
 0x00081000UL

	)

325 
	#RX_FINFO_RXPEL_4096
 0x000C0000UL

	)

327 
	#RX_FINFO_RXBR_MASK
 0x00006000UL

	)

328 
	#RX_FINFO_RXBR_110k
 0x00000000UL

	)

329 
	#RX_FINFO_RXBR_850k
 0x00002000UL

	)

330 
	#RX_FINFO_RXBR_6M
 0x00004000UL

	)

331 
	#RX_FINFO_RXBR_SHIFT
 (13)

	)

333 
	#RX_FINFO_RNG
 0x00008000UL

	)

334 
	#RX_FINFO_RNG_SHIFT
 (15)

	)

336 
	#RX_FINFO_RXPRF_MASK
 0x00030000UL

	)

337 
	#RX_FINFO_RXPRF_16M
 0x00010000UL

	)

338 
	#RX_FINFO_RXPRF_64M
 0x00020000UL

	)

339 
	#RX_FINFO_RXPRF_SHIFT
 (16)

	)

341 
	#RX_FINFO_RXPACC_MASK
 0xFFF00000UL

	)

342 
	#RX_FINFO_RXPACC_SHIFT
 (20)

	)

348 
	#RX_BUFFER_ID
 0x11

	)

349 
	#RX_BUFFER_LEN
 (1024)

	)

355 
	#RX_FQUAL_ID
 0x12

	)

356 
	#RX_FQUAL_LEN
 (8Ë

	)

359 
	#RX_EQUAL_STD_NOISE_MASK
 0x0000FFFFULL

	)

360 
	#RX_EQUAL_STD_NOISE_SHIFT
 (0)

	)

361 
	#STD_NOISE_MASK
 
RX_EQUAL_STD_NOISE_MASK


	)

362 
	#STD_NOISE_SHIFT
 
RX_EQUAL_STD_NOISE_SHIFT


	)

364 
	#RX_EQUAL_FP_AMPL2_MASK
 0xFFFF0000ULL

	)

365 
	#RX_EQUAL_FP_AMPL2_SHIFT
 (16)

	)

366 
	#FP_AMPL2_MASK
 
RX_EQUAL_FP_AMPL2_MASK


	)

367 
	#FP_AMPL2_SHIFT
 
RX_EQUAL_FP_AMPL2_SHIFT


	)

369 
	#RX_EQUAL_PP_AMPL3_MASK
 0x0000FFFF00000000ULL

	)

370 
	#RX_EQUAL_PP_AMPL3_SHIFT
 (32)

	)

371 
	#PP_AMPL3_MASK
 
RX_EQUAL_PP_AMPL3_MASK


	)

372 
	#PP_AMPL3_SHIFT
 
RX_EQUAL_PP_AMPL3_SHIFT


	)

374 
	#RX_EQUAL_CIR_MXG_MASK
 0xFFFF000000000000ULL

	)

375 
	#RX_EQUAL_CIR_MXG_SHIFT
 (48)

	)

376 
	#CIR_MXG_MASK
 
RX_EQUAL_CIR_MXG_MASK


	)

377 
	#CIR_MXG_SHIFT
 
RX_EQUAL_CIR_MXG_SHIFT


	)

389 
	#RX_TTCKI_ID
 0x13

	)

390 
	#RX_TTCKI_LEN
 (4)

	)

395 
	#RX_TTCKO_ID
 0x14

	)

396 
	#RX_TTCKO_LEN
 (5Ë

	)

398 
	#RX_TTCKO_MASK_32
 0xFF07FFFFUL

	)

400 
	#RX_TTCKO_RXTOFS_MASK
 0x0007FFFFUL

	)

402 
	#RX_TTCKO_RSMPDEL_MASK
 0xFF000000UL

	)

404 
	#RX_TTCKO_RCPHASE_MASK
 0x7F0000000000ULL

	)

410 
	#RX_TIME_ID
 0x15

	)

411 
	#RX_TIME_LLEN
 (14)

	)

412 
	#RX_TIME_RX_STAMP_LEN
 (5Ë

	)

413 
	#RX_STAMP_LEN
 
RX_TIME_RX_STAMP_LEN


	)

415 
	#RX_TIME_RX_STAMP_OFFSET
 (0Ë

	)

416 
	#RX_TIME_FP_INDEX_OFFSET
 (5Ë

	)

417 
	#RX_TIME_FP_AMPL1_OFFSET
 (7Ë

	)

418 
	#RX_TIME_FP_RAWST_OFFSET
 (9Ë

	)

424 
	#REG_16_ID_RESERVED
 0x16

	)

430 
	#TX_TIME_ID
 0x17

	)

431 
	#TX_TIME_LLEN
 (10)

	)

432 
	#TX_TIME_TX_STAMP_LEN
 (5Ë

	)

433 
	#TX_STAMP_LEN
 
TX_TIME_TX_STAMP_LEN


	)

435 
	#TX_TIME_TX_STAMP_OFFSET
 (0Ë

	)

436 
	#TX_TIME_TX_RAWST_OFFSET
 (5Ë

	)

444 
	#TX_ANTD_ID
 0x18

	)

445 
	#TX_ANTD_LEN
 (2Ë

	)

455 
	#SYS_STATE_ID
 0x19

	)

456 
	#SYS_STATE_LEN
 (5)

	)

462 
	#ACK_RESP_T_ID
 0x1A

	)

463 
	#ACK_RESP_T_LEN
 (4)

	)

465 
	#ACK_RESP_T_MASK
 0xFF0FFFFFUL

	)

466 
	#ACK_RESP_T_W4R_TIM_MASK
 0x000FFFFFUL

	)

467 
	#W4R_TIM_MASK
 
ACK_RESP_T_W4R_TIM_MASK


	)

468 
	#ACK_RESP_T_ACK_TIM_MASK
 0xFF000000UL

	)

469 
	#ACK_TIM_MASK
 
ACK_RESP_T_ACK_TIM_MASK


	)

476 
	#REG_1B_ID_RESERVED
 0x1B

	)

477 
	#REG_1C_ID_RESERVED
 0x1C

	)

483 
	#RX_SNIFF_ID
 0x1D

	)

484 
	#RX_SNIFF_LEN
 (4)

	)

486 
	#RX_SNIFF_MASK
 0x0000FF0FUL

	)

487 
	#RX_SNIFF_SNIFF_ONT_MASK
 0x0000000FUL

	)

488 
	#SNIFF_ONT_MASK
 
RX_SNIFF_SNIFF_ONT_MASK


	)

489 
	#RX_SNIFF_SNIFF_OFFT_MASK
 0x0000FF00UL

	)

490 
	#SNIFF_OFFT_MASK
 
RX_SNIFF_SNIFF_OFFT_MASK


	)

497 
	#TX_POWER_ID
 0x1E

	)

498 
	#TX_POWER_LEN
 (4)

	)

500 
	#TX_POWER_BOOSTNORM_MASK
 0x00000000UL

	)

501 
	#BOOSTNORM_MASK
 
TX_POWER_BOOSTNORM_MASK


	)

502 
	#TX_POWER_BOOSTNORM_SHIFT
 (0)

	)

503 
	#TX_POWER_BOOSTP500_MASK
 0x00000000UL

	)

504 
	#BOOSTP500_MASK
 
TX_POWER_BOOSTP500_MASK


	)

505 
	#TX_POWER_BOOSTP500_SHIFT
 (8)

	)

506 
	#TX_POWER_BOOSTP250_MASK
 0x00000000UL

	)

507 
	#BOOSTP250_MASK
 
TX_POWER_BOOSTP250_MASK


	)

508 
	#TX_POWER_BOOSTP250_SHIFT
 (16)

	)

509 
	#TX_POWER_BOOSTP125_MASK
 0x00000000UL

	)

510 
	#BOOSTP125_MASK
 
TX_POWER_BOOSTP125_MASK


	)

511 
	#TX_POWER_BOOSTP125_SHIFT
 (24)

	)

513 
	#TX_POWER_MAN_DEFAULT
 0x0E080222UL

	)

514 
	#TX_POWER_TXPOWPHR_MASK
 0x0000FF00UL

	)

515 
	#TX_POWER_TXPOWSD_MASK
 0x00FF0000UL

	)

521 
	#CHAN_CTRL_ID
 0x1F

	)

522 
	#CHAN_CTRL_LEN
 (4)

	)

524 
	#CHAN_CTRL_MASK
 0xFFFF00FFUL

	)

525 
	#CHAN_CTRL_TX_CHAN_MASK
 0x0000000FUL

	)

526 
	#CHAN_CTRL_TX_CHAN_SHIFT
 (0Ë

	)

528 
	#CHAN_CTRL_RX_CHAN_MASK
 0x000000F0UL

	)

529 
	#CHAN_CTRL_RX_CHAN_SHIFT
 (4Ë

	)

531 
	#CHAN_CTRL_RXFPRF_MASK
 0x000C0000UL

	)

532 
	#CHAN_CTRL_RXFPRF_SHIFT
 (18)

	)

534 
	#CHAN_CTRL_RXFPRF_4
 0x00000000UL

	)

535 
	#CHAN_CTRL_RXFPRF_16
 0x00040000UL

	)

536 
	#CHAN_CTRL_RXFPRF_64
 0x00080000UL

	)

537 
	#CHAN_CTRL_TX_PCOD_MASK
 0x07C00000UL

	)

538 
	#CHAN_CTRL_TX_PCOD_SHIFT
 (22)

	)

539 
	#CHAN_CTRL_RX_PCOD_MASK
 0xF8000000UL

	)

540 
	#CHAN_CTRL_RX_PCOD_SHIFT
 (27)

	)

542 
	#CHAN_CTRL_DWSFD
 0x00020000UL

	)

543 
	#CHAN_CTRL_DWSFD_SHIFT
 (17)

	)

544 
	#CHAN_CTRL_TNSSFD
 0x00100000UL

	)

545 
	#CHAN_CTRL_TNSSFD_SHIFT
 (20)

	)

546 
	#CHAN_CTRL_RNSSFD
 0x00200000UL

	)

547 
	#CHAN_CTRL_RNSSFD_SHIFT
 (21)

	)

555 
	#REG_20_ID_RESERVED
 0x20

	)

561 
	#USR_SFD_ID
 0x21

	)

562 
	#USR_SFD_LEN
 (41)

	)

568 
	#REG_22_ID_RESERVED
 0x22

	)

574 
	#AGC_CTRL_ID
 0x23

	)

575 
	#AGC_CTRL_LEN
 (32)

	)

576 
	#AGC_CFG_STS_ID
 
AGC_CTRL_ID


	)

578 
	#AGC_CTRL1_OFFSET
 (0x02)

	)

579 
	#AGC_CTRL1_LEN
 (2)

	)

580 
	#AGC_CTRL1_MASK
 0x0001

	)

581 
	#AGC_CTRL1_DIS_AM
 0x0001

	)

584 
	#AGC_TUNE1_OFFSET
 (0x04)

	)

585 
	#AGC_TUNE1_LEN
 (2)

	)

586 
	#AGC_TUNE1_MASK
 0xFFFF

	)

587 
	#AGC_TUNE1_16M
 0x8870

	)

588 
	#AGC_TUNE1_64M
 0x889B

	)

591 
	#AGC_TUNE2_OFFSET
 (0x0C)

	)

592 
	#AGC_TUNE2_LEN
 (4)

	)

593 
	#AGC_TUNE2_MASK
 0xFFFFFFFFUL

	)

594 
	#AGC_TUNE2_VAL
 0X2502A907UL

	)

597 
	#AGC_TUNE3_OFFSET
 (0x12)

	)

598 
	#AGC_TUNE3_LEN
 (2)

	)

599 
	#AGC_TUNE3_MASK
 0xFFFF

	)

600 
	#AGC_TUNE3_VAL
 0X0055

	)

602 
	#AGC_STAT1_OFFSET
 (0x1E)

	)

603 
	#AGC_STAT1_LEN
 (3)

	)

604 
	#AGC_STAT1_MASK
 0x0FFFFF

	)

605 
	#AGC_STAT1_EDG1_MASK
 0x0007C0

	)

606 
	#AGC_STAT1_EDG2_MASK
 0x0FF800

	)

611 
	#EXT_SYNC_ID
 0x24

	)

612 
	#EXT_SYNC_LEN
 (12)

	)

614 
	#EC_CTRL_OFFSET
 (0x00)

	)

615 
	#EC_CTRL_LEN
 (4)

	)

616 
	#EC_CTRL_MASK
 0x00000FFBUL

	)

617 
	#EC_CTRL_OSTSM
 0x00000001UL

	)

618 
	#EC_CTRL_OSRSM
 0x00000002UL

	)

619 
	#EC_CTRL_PLLLCK
 0x04

	)

620 
	#EC_CTRL_OSTRM
 0x00000800UL

	)

621 
	#EC_CTRL_WAIT_MASK
 0x000007F8UL

	)

623 
	#EC_RXTC_OFFSET
 (0x04)

	)

624 
	#EC_RXTC_LEN
 (4)

	)

625 
	#EC_RXTC_MASK
 0xFFFFFFFFUL

	)

627 
	#EC_GOLP
 (0x08)

	)

628 
	#EC_GOLP_LEN
 (4)

	)

629 
	#EC_GOLP_MASK
 0x0000003FUL

	)

630 
	#EC_GOLP_OFFSET_EXT_MASK
 0x0000003FUL

	)

636 
	#ACC_MEM_ID
 0x25

	)

637 
	#ACC_MEM_LEN
 (4064)

	)

643 
	#GPIO_CTRL_ID
 0x26

	)

644 
	#GPIO_CTRL_LEN
 (44)

	)

647 
	#GPIO_MODE_OFFSET
 0x00

	)

648 
	#GPIO_MODE_LEN
 (4)

	)

649 
	#GPIO_MODE_MASK
 0x00FFFFC0UL

	)

651 
	#GPIO_MSGP0_MASK
 0x000000C0UL

	)

652 
	#GPIO_MSGP1_MASK
 0x00000300UL

	)

653 
	#GPIO_MSGP2_MASK
 0x00000C00UL

	)

654 
	#GPIO_MSGP3_MASK
 0x00003000UL

	)

655 
	#GPIO_MSGP4_MASK
 0x0000C000UL

	)

656 
	#GPIO_MSGP5_MASK
 0x00030000UL

	)

657 
	#GPIO_MSGP6_MASK
 0x000C0000UL

	)

658 
	#GPIO_MSGP7_MASK
 0x00300000UL

	)

659 
	#GPIO_MSGP8_MASK
 0x00C00000UL

	)

661 
	#GPIO_PIN5_EXTTXE
 0x00010000UL

	)

662 
	#GPIO_PIN6_EXTRXE
 0x00040000UL

	)

664 
	#GPIO_LNA_BYTE_NUM
 (2Ë

	)

665 
	#GPIO_PIN5_EXTTXE_8
 0x01

	)

666 
	#GPIO_PIN6_EXTRXE_8
 0x04

	)

669 
	#GPIO_DIR_OFFSET
 0x08

	)

670 
	#GPIO_DIR_LEN
 (3)

	)

671 
	#GPIO_DIR_MASK
 0x0011FFFFUL

	)

673 
	#GxP0
 0x00000001UL

	)

674 
	#GxP1
 0x00000002UL

	)

675 
	#GxP2
 0x00000004UL

	)

676 
	#GxP3
 0x00000008UL

	)

677 
	#GxP4
 0x00000100UL

	)

678 
	#GxP5
 0x00000200UL

	)

679 
	#GxP6
 0x00000400UL

	)

680 
	#GxP7
 0x00000800UL

	)

681 
	#GxP8
 0x00010000UL

	)

683 
	#GxM0
 0x00000010UL

	)

684 
	#GxM1
 0x00000020UL

	)

685 
	#GxM2
 0x00000040UL

	)

686 
	#GxM3
 0x00000080UL

	)

687 
	#GxM4
 0x00001000UL

	)

688 
	#GxM5
 0x00002000UL

	)

689 
	#GxM6
 0x00004000UL

	)

690 
	#GxM7
 0x00008000UL

	)

691 
	#GxM8
 0x00100000UL

	)

693 
	#GDP0
 
GxP0


	)

694 
	#GDP1
 
GxP1


	)

695 
	#GDP2
 
GxP2


	)

696 
	#GDP3
 
GxP3


	)

697 
	#GDP4
 
GxP4


	)

698 
	#GDP5
 
GxP5


	)

699 
	#GDP6
 
GxP6


	)

700 
	#GDP7
 
GxP7


	)

701 
	#GDP8
 
GxP8


	)

703 
	#GDM0
 
GxM0


	)

704 
	#GDM1
 
GxM1


	)

705 
	#GDM2
 
GxM2


	)

706 
	#GDM3
 
GxM3


	)

707 
	#GDM4
 
GxM4


	)

708 
	#GDM5
 
GxM5


	)

709 
	#GDM6
 
GxM6


	)

710 
	#GDM7
 
GxM7


	)

711 
	#GDM8
 
GxM8


	)

714 
	#GPIO_DOUT_OFFSET
 0x0C

	)

715 
	#GPIO_DOUT_LEN
 (3)

	)

716 
	#GPIO_DOUT_MASK
 
GPIO_DIR_MASK


	)

719 
	#GPIO_IRQE_OFFSET
 0x10

	)

720 
	#GPIO_IRQE_LEN
 (4)

	)

721 
	#GPIO_IRQE_MASK
 0x000001FFUL

	)

722 
	#GIRQx0
 0x00000001UL

	)

723 
	#GIRQx1
 0x00000002UL

	)

724 
	#GIRQx2
 0x00000004UL

	)

725 
	#GIRQx3
 0x00000008UL

	)

726 
	#GIRQx4
 0x00000010UL

	)

727 
	#GIRQx5
 0x00000020UL

	)

728 
	#GIRQx6
 0x00000040UL

	)

729 
	#GIRQx7
 0x00000080UL

	)

730 
	#GIRQx8
 0x00000100UL

	)

731 
	#GIRQE0
 
GIRQx0


	)

732 
	#GIRQE1
 
GIRQx1


	)

733 
	#GIRQE2
 
GIRQx2


	)

734 
	#GIRQE3
 
GIRQx3


	)

735 
	#GIRQE4
 
GIRQx4


	)

736 
	#GIRQE5
 
GIRQx5


	)

737 
	#GIRQE6
 
GIRQx6


	)

738 
	#GIRQE7
 
GIRQx7


	)

739 
	#GIRQE8
 
GIRQx8


	)

742 
	#GPIO_ISEN_OFFSET
 0x14

	)

743 
	#GPIO_ISEN_LEN
 (4)

	)

744 
	#GPIO_ISEN_MASK
 
GPIO_IRQE_MASK


	)

745 
	#GISEN0
 
GIRQx0


	)

746 
	#GISEN1
 
GIRQx1


	)

747 
	#GISEN2
 
GIRQx2


	)

748 
	#GISEN3
 
GIRQx3


	)

749 
	#GISEN4
 
GIRQx4


	)

750 
	#GISEN5
 
GIRQx5


	)

751 
	#GISEN6
 
GIRQx6


	)

752 
	#GISEN7
 
GIRQx7


	)

753 
	#GISEN8
 
GIRQx8


	)

756 
	#GPIO_IMODE_OFFSET
 0x18

	)

757 
	#GPIO_IMODE_LEN
 (4)

	)

758 
	#GPIO_IMODE_MASK
 
GPIO_IRQE_MASK


	)

759 
	#GIMOD0
 
GIRQx0


	)

760 
	#GIMOD1
 
GIRQx1


	)

761 
	#GIMOD2
 
GIRQx2


	)

762 
	#GIMOD3
 
GIRQx3


	)

763 
	#GIMOD4
 
GIRQx4


	)

764 
	#GIMOD5
 
GIRQx5


	)

765 
	#GIMOD6
 
GIRQx6


	)

766 
	#GIMOD7
 
GIRQx7


	)

767 
	#GIMOD8
 
GIRQx8


	)

770 
	#GPIO_IBES_OFFSET
 0x1C

	)

771 
	#GPIO_IBES_LEN
 (4)

	)

772 
	#GPIO_IBES_MASK
 
GPIO_IRQE_MASK


	)

773 
	#GIBES0
 
GIRQx0


	)

774 
	#GIBES1
 
GIRQx1


	)

775 
	#GIBES2
 
GIRQx2


	)

776 
	#GIBES3
 
GIRQx3


	)

777 
	#GIBES4
 
GIRQx4


	)

778 
	#GIBES5
 
GIRQx5


	)

779 
	#GIBES6
 
GIRQx6


	)

780 
	#GIBES7
 
GIRQx7


	)

781 
	#GIBES8
 
GIRQx8


	)

784 
	#GPIO_ICLR_OFFSET
 0x20

	)

785 
	#GPIO_ICLR_LEN
 (4)

	)

786 
	#GPIO_ICLR_MASK
 
GPIO_IRQE_MASK


	)

787 
	#GICLR0
 
GIRQx0


	)

788 
	#GICLR1
 
GIRQx1


	)

789 
	#GICLR2
 
GIRQx2


	)

790 
	#GICLR3
 
GIRQx3


	)

791 
	#GICLR4
 
GIRQx4


	)

792 
	#GICLR5
 
GIRQx5


	)

793 
	#GICLR6
 
GIRQx6


	)

794 
	#GICLR7
 
GIRQx7


	)

795 
	#GICLR8
 
GIRQx8


	)

798 
	#GPIO_IDBE_OFFSET
 0x24

	)

799 
	#GPIO_IDBE_LEN
 (4)

	)

800 
	#GPIO_IDBE_MASK
 
GPIO_IRQE_MASK


	)

801 
	#GIDBE0
 
GIRQx0


	)

802 
	#GIDBE1
 
GIRQx1


	)

803 
	#GIDBE2
 
GIRQx2


	)

804 
	#GIDBE3
 
GIRQx3


	)

805 
	#GIDBE4
 
GIRQx4


	)

806 
	#GIDBE5
 
GIRQx5


	)

807 
	#GIDBE6
 
GIRQx6


	)

808 
	#GIDBE7
 
GIRQx7


	)

809 
	#GIDBE8
 
GIRQx8


	)

812 
	#GPIO_RAW_OFFSET
 0x28

	)

813 
	#GPIO_RAW_LEN
 (4)

	)

814 
	#GPIO_RAW_MASK
 
GPIO_IRQE_MASK


	)

815 
	#GRAWP0
 
GIRQx0


	)

816 
	#GRAWP1
 
GIRQx1


	)

817 
	#GRAWP2
 
GIRQx2


	)

818 
	#GRAWP3
 
GIRQx3


	)

819 
	#GRAWP4
 
GIRQx4


	)

820 
	#GRAWP5
 
GIRQx5


	)

821 
	#GRAWP6
 
GIRQx6


	)

822 
	#GRAWP7
 
GIRQx7


	)

823 
	#GRAWP8
 
GIRQx8


	)

829 
	#DRX_CONF_ID
 0x27

	)

830 
	#DRX_CONF_LEN
 (44)

	)

832 
	#DRX_TUNE0b_OFFSET
 (0x02Ë

	)

833 
	#DRX_TUNE0b_LEN
 (2)

	)

834 
	#DRX_TUNE0b_MASK
 0xFFFF

	)

837 
	#DRX_TUNE1a_OFFSET
 0x04

	)

838 
	#DRX_TUNE1a_LEN
 (2)

	)

839 
	#DRX_TUNE1a_MASK
 0xFFFF

	)

842 
	#DRX_TUNE1b_OFFSET
 0x06

	)

843 
	#DRX_TUNE1b_LEN
 (2)

	)

844 
	#DRX_TUNE1b_MASK
 0xFFFF

	)

847 
	#DRX_TUNE2_OFFSET
 0x08

	)

848 
	#DRX_TUNE2_LEN
 (4)

	)

849 
	#DRX_TUNE2_MASK
 0xFFFFFFFFUL

	)

855 
	#DRX_SFDTOC_OFFSET
 0x20

	)

856 
	#DRX_SFDTOC_LEN
 (2)

	)

857 
	#DRX_SFDTOC_MASK
 0xFFFF

	)

860 
	#DRX_PRETOC_OFFSET
 0x24

	)

861 
	#DRX_PRETOC_LEN
 (2)

	)

862 
	#DRX_PRETOC_MASK
 0xFFFF

	)

865 
	#DRX_DRX_TUNE4HOFFSET
 0x26

	)

866 
	#DRX_DRX_TUNE4H_LEN
 (2)

	)

867 
	#DRX_DRX_TUNE4H_MASK
 0xFFFF

	)

876 
	#RF_CONF_ID
 0x28

	)

877 
	#RF_CONF_LEN
 (58)

	)

878 
	#RF_CONF_TXEN_MASK
 0x00400000UL

	)

879 
	#RF_CONF_RXEN_MASK
 0x00200000UL

	)

880 
	#RF_CONF_TXPOW_MASK
 0x001F0000UL

	)

881 
	#RF_CONF_PLLEN_MASK
 0x0000E000UL

	)

882 
	#RF_CONF_TXBLOCKSEN_MASK
 0x00001F00UL

	)

883 
	#RF_CONF_TXPLLPOWEN_MASK
 (
RF_CONF_PLLEN_MASK
 | 
RF_CONF_TXPOW_MASK
)

	)

884 
	#RF_CONF_TXALLEN_MASK
 (
RF_CONF_TXEN_MASK
 | 
RF_CONF_TXPOW_MASK
 | 
RF_CONF_PLLEN_MASK
 | 
RF_CONF_TXBLOCKSEN_MASK
)

	)

886 
	#RF_RXCTRLH_OFFSET
 0x0B

	)

888 
	#RF_TXCTRL_OFFSET
 0x0C

	)

889 
	#RF_TXCTRL_LEN
 (4)

	)

890 
	#RF_TXCTRL_TXMTUNE_MASK
 0x000001E0UL

	)

891 
	#RF_TXCTRL_TXTXMQ_MASK
 0x00000E00UL

	)

892 
	#RF_TXCTRL_CH1
 0x00005C40UL

	)

893 
	#RF_TXCTRL_CH2
 0x00045CA0UL

	)

894 
	#RF_TXCTRL_CH3
 0x00086CC0UL

	)

895 
	#RF_TXCTRL_CH4
 0x00045C80UL

	)

896 
	#RF_TXCTRL_CH5
 0x001E3FE3UL

	)

897 
	#RF_TXCTRL_CH7
 0x001E7DE0UL

	)

900 
	#RF_STATUS_OFFSET
 0x2C

	)

908 
	#REG_29_ID_RESERVED
 0x29

	)

914 
	#TX_CAL_ID
 0x2A

	)

915 
	#TX_CAL_LEN
 (52)

	)

917 
	#TC_SARL_SAR_C
 (0Ë

	)

921 
	#TC_SARL_SAR_LVBAT_OFFSET
 (3Ë

	)

922 
	#TC_SARL_SAR_LTEMP_OFFSET
 (4Ë

	)

926 
	#TC_SARW_SAR_WTEMP_OFFSET
 0x06

	)

927 
	#TC_SARW_SAR_WVBAT_OFFSET
 0x07

	)

929 
	#TC_PGDELAY_OFFSET
 0x0B

	)

930 
	#TC_PGDELAY_LEN
 (1)

	)

931 
	#TC_PGDELAY_CH1
 0xC9

	)

932 
	#TC_PGDELAY_CH2
 0xC2

	)

933 
	#TC_PGDELAY_CH3
 0xC5

	)

934 
	#TC_PGDELAY_CH4
 0x95

	)

935 
	#TC_PGDELAY_CH5
 0xC0

	)

936 
	#TC_PGDELAY_CH7
 0x93

	)

938 
	#TC_PGTEST_OFFSET
 0x0C

	)

939 
	#TC_PGTEST_LEN
 (1)

	)

940 
	#TC_PGTEST_NORMAL
 0x00

	)

941 
	#TC_PGTEST_CW
 0x13

	)

947 
	#FS_CTRL_ID
 0x2B

	)

948 
	#FS_CTRL_LEN
 (21)

	)

950 
	#FS_RES1_OFFSET
 0x00

	)

951 
	#FS_RES1_LEN
 (7)

	)

953 
	#FS_PLLCFG_OFFSET
 0x07

	)

954 
	#FS_PLLCFG_LEN
 (5)

	)

955 
	#FS_PLLCFG_CH1
 0x09000407UL

	)

956 
	#FS_PLLCFG_CH2
 0x08400508UL

	)

957 
	#FS_PLLCFG_CH3
 0x08401009UL

	)

958 
	#FS_PLLCFG_CH4
 0x08400508UL

	)

959 
	#FS_PLLCFG_CH5
 0x0800041DUL

	)

960 
	#FS_PLLCFG_CH7
 0x0800041DUL

	)

962 
	#FS_PLLTUNE_OFFSET
 0x0B

	)

963 
	#FS_PLLTUNE_LEN
 (1)

	)

964 
	#FS_PLLTUNE_CH1
 0x1E

	)

965 
	#FS_PLLTUNE_CH2
 0x26

	)

966 
	#FS_PLLTUNE_CH3
 0x5E

	)

967 
	#FS_PLLTUNE_CH4
 0x26

	)

968 
	#FS_PLLTUNE_CH5
 0xA6

	)

969 
	#FS_PLLTUNE_CH7
 0xA6

	)

971 
	#FS_RES2_OFFSET
 0x0C

	)

972 
	#FS_RES2_LEN
 (2)

	)

974 
	#FS_XTALT_OFFSET
 0x0E

	)

975 
	#FS_XTALT_LEN
 (1)

	)

976 
	#FS_XTALT_MASK
 0x1F

	)

977 
	#FS_XTALT_MIDRANGE
 0x10

	)

979 
	#FS_RES3_OFFSET
 0x0F

	)

980 
	#FS_RES3_LEN
 (6)

	)

985 
	#AON_ID
 0x2C

	)

986 
	#AON_LEN
 (12)

	)

988 
	#AON_WCFG_OFFSET
 0x00

	)

989 
	#AON_WCFG_LEN
 (2)

	)

990 
	#AON_WCFG_MASK
 0x09CB

	)

991 
	#AON_WCFG_ONW_RADC
 0x0001

	)

992 
	#AON_WCFG_ONW_RX
 0x0002

	)

993 
	#AON_WCFG_ONW_LEUI
 0x0008

	)

994 
	#AON_WCFG_ONW_LDC
 0x0040

	)

995 
	#AON_WCFG_ONW_L64P
 0x0080

	)

996 
	#AON_WCFG_PRES_SLEEP
 0x0100

	)

997 
	#AON_WCFG_ONW_LLDE
 0x0800

	)

998 
	#AON_WCFG_ONW_LLDO
 0x1000

	)

1000 
	#AON_CTRL_OFFSET
 0x02

	)

1001 
	#AON_CTRL_LEN
 (1)

	)

1002 
	#AON_CTRL_MASK
 0x8F

	)

1003 
	#AON_CTRL_RESTORE
 0x01

	)

1004 
	#AON_CTRL_SAVE
 0x02

	)

1005 
	#AON_CTRL_UPL_CFG
 0x04

	)

1006 
	#AON_CTRL_DCA_READ
 0x08

	)

1007 
	#AON_CTRL_DCA_ENAB
 0x80

	)

1009 
	#AON_RDAT_OFFSET
 0x03

	)

1010 
	#AON_RDAT_LEN
 (1)

	)

1012 
	#AON_ADDR_OFFSET
 0x04

	)

1013 
	#AON_ADDR_LEN
 (1)

	)

1016 
	#AON_CFG0_OFFSET
 0x06

	)

1017 
	#AON_CFG0_LEN
 (4)

	)

1018 
	#AON_CFG0_SLEEP_EN
 0x00000001UL

	)

1019 
	#AON_CFG0_WAKE_PIN
 0x00000002UL

	)

1020 
	#AON_CFG0_WAKE_SPI
 0x00000004UL

	)

1021 
	#AON_CFG0_WAKE_CNT
 0x00000008UL

	)

1022 
	#AON_CFG0_LPDIV_EN
 0x00000010UL

	)

1023 
	#AON_CFG0_LPCLKDIVA_MASK
 0x0000FFE0UL

	)

1024 
	#AON_CFG0_LPCLKDIVA_SHIFT
 (5)

	)

1025 
	#AON_CFG0_SLEEP_TIM
 0xFFFF0000UL

	)

1026 
	#AON_CFG0_SLEEP_SHIFT
 (16)

	)

1028 
	#AON_CFG1_OFFSET
 0x0A

	)

1029 
	#AON_CFG1_LEN
 (2)

	)

1030 
	#AON_CFG1_MASK
 0x0007

	)

1031 
	#AON_CFG1_SLEEP_CEN
 0x0001

	)

1032 
	#AON_CFG1_SMXX
 0x0002

	)

1033 
	#AON_CFG1_LPOSC_CAL
 0x0004

	)

1039 
	#OTP_IF_ID
 0x2D

	)

1040 
	#OTP_IF_LEN
 (18)

	)

1042 
	#OTP_WDAT
 0x00

	)

1043 
	#OTP_WDAT_LEN
 (4)

	)

1045 
	#OTP_ADDR
 0x04

	)

1046 
	#OTP_ADDR_LEN
 (2)

	)

1047 
	#OTP_ADDR_MASK
 0x07FF

	)

1049 
	#OTP_CTRL
 0x06

	)

1050 
	#OTP_CTRL_LEN
 (2)

	)

1051 
	#OTP_CTRL_MASK
 0x8002

	)

1052 
	#OTP_CTRL_OTPRDEN
 0x0001

	)

1053 
	#OTP_CTRL_OTPREAD
 0x0002

	)

1054 
	#OTP_CTRL_LDELOAD
 0x8000

	)

1055 
	#OTP_CTRL_OTPPROG
 0x0040

	)

1057 
	#OTP_STAT
 0x08

	)

1058 
	#OTP_STAT_LEN
 (2)

	)

1059 
	#OTP_STAT_MASK
 0x0003

	)

1060 
	#OTP_STAT_OTPPRGD
 0x0001

	)

1063 
	#OTP_RDAT
 0x0A

	)

1064 
	#OTP_RDAT_LEN
 (4)

	)

1066 
	#OTP_SRDAT
 0x0E

	)

1067 
	#OTP_SRDAT_LEN
 (4)

	)

1069 
	#OTP_SF
 0x12

	)

1070 
	#OTP_SF_LEN
 (1)

	)

1071 
	#OTP_SF_MASK
 0x63

	)

1072 
	#OTP_SF_OPS_KICK
 0x01

	)

1073 
	#OTP_SF_LDO_KICK
 0x02

	)

1074 
	#OTP_SF_OPS_SEL_L64
 0x00

	)

1075 
	#OTP_SF_OPS_SEL_TIGHT
 0x40

	)

1084 
	#LDE_IF_ID
 0x2E

	)

1085 
	#LDE_IF_LEN
 (0)

	)

1087 
	#LDE_THRESH_OFFSET
 0x0000

	)

1088 
	#LDE_THRESH_LEN
 (2)

	)

1090 
	#LDE_CFG1_OFFSET
 0x0806

	)

1091 
	#LDE_CFG1_LEN
 (1)

	)

1092 
	#LDE_CFG1_NSTDEV_MASK
 0x1F

	)

1093 
	#LDE_CFG1_PMULT_MASK
 0xE0

	)

1095 
	#LDE_PPINDX_OFFSET
 0x1000

	)

1096 
	#LDE_PPINDX_LEN
 (2)

	)

1098 
	#LDE_PPAMPL_OFFSET
 0x1002

	)

1099 
	#LDE_PPAMPL_LEN
 (2)

	)

1101 
	#LDE_RXANTD_OFFSET
 0x1804

	)

1102 
	#LDE_RXANTD_LEN
 (2)

	)

1104 
	#LDE_CFG2_OFFSET
 0x1806

	)

1105 
	#LDE_CFG2_LEN
 (2)

	)

1107 
	#LDE_REPC_OFFSET
 0x2804

	)

1108 
	#LDE_REPC_LEN
 (2)

	)

1115 
	#DIG_DIAG_ID
 0x2F

	)

1116 
	#DIG_DIAG_LEN
 (41)

	)

1119 
	#EVC_CTRL_OFFSET
 0x00

	)

1120 
	#EVC_CTRL_LEN
 (4)

	)

1121 
	#EVC_CTRL_MASK
 0x00000003UL

	)

1122 
	#EVC_EN
 0x00000001UL

	)

1123 
	#EVC_CLR
 0x00000002UL

	)

1126 
	#EVC_PHE_OFFSET
 0x04

	)

1127 
	#EVC_PHE_LEN
 (2)

	)

1128 
	#EVC_PHE_MASK
 0x0FFF

	)

1130 
	#EVC_RSE_OFFSET
 0x06

	)

1131 
	#EVC_RSE_LEN
 (2)

	)

1132 
	#EVC_RSE_MASK
 0x0FFF

	)

1135 
	#EVC_FCG_OFFSET
 0x08

	)

1136 
	#EVC_FCG_LEN
 (2)

	)

1137 
	#EVC_FCG_MASK
 0x0FFF

	)

1139 
	#EVC_FCE_OFFSET
 0x0A

	)

1140 
	#EVC_FCE_LEN
 (2)

	)

1141 
	#EVC_FCE_MASK
 0x0FFF

	)

1144 
	#EVC_FFR_OFFSET
 0x0C

	)

1145 
	#EVC_FFR_LEN
 (2)

	)

1146 
	#EVC_FFR_MASK
 0x0FFF

	)

1148 
	#EVC_OVR_OFFSET
 0x0E

	)

1149 
	#EVC_OVR_LEN
 (2)

	)

1150 
	#EVC_OVR_MASK
 0x0FFF

	)

1153 
	#EVC_STO_OFFSET
 0x10

	)

1154 
	#EVC_OVR_LEN
 (2)

	)

1155 
	#EVC_OVR_MASK
 0x0FFF

	)

1157 
	#EVC_PTO_OFFSET
 0x12

	)

1158 
	#EVC_PTO_LEN
 (2)

	)

1159 
	#EVC_PTO_MASK
 0x0FFF

	)

1162 
	#EVC_FWTO_OFFSET
 0x14

	)

1163 
	#EVC_FWTO_LEN
 (2)

	)

1164 
	#EVC_FWTO_MASK
 0x0FFF

	)

1166 
	#EVC_TXFS_OFFSET
 0x16

	)

1167 
	#EVC_TXFS_LEN
 (2)

	)

1168 
	#EVC_TXFS_MASK
 0x0FFF

	)

1171 
	#EVC_HPW_OFFSET
 0x18

	)

1172 
	#EVC_HPW_LEN
 (2)

	)

1173 
	#EVC_HPW_MASK
 0x0FFF

	)

1175 
	#EVC_TPW_OFFSET
 0x1A

	)

1176 
	#EVC_TPW_LEN
 (2)

	)

1177 
	#EVC_TPW_MASK
 0x0FFF

	)

1180 
	#EVC_RES1_OFFSET
 0x1C

	)

1183 
	#DIAG_TMC_OFFSET
 0x24

	)

1184 
	#DIAG_TMC_LEN
 (2)

	)

1185 
	#DIAG_TMC_MASK
 0x0010

	)

1186 
	#DIAG_TMC_TX_PSTM
 0x0010

	)

1193 
	#REG_30_ID_RESERVED
 0x30

	)

1194 
	#REG_31_ID_RESERVED
 0x31

	)

1195 
	#REG_32_ID_RESERVED
 0x32

	)

1196 
	#REG_33_ID_RESERVED
 0x33

	)

1197 
	#REG_34_ID_RESERVED
 0x34

	)

1198 
	#REG_35_ID_RESERVED
 0x35

	)

1203 
	#PMSC_ID
 0x36

	)

1204 
	#PMSC_LEN
 (48)

	)

1206 
	#PMSC_CTRL0_OFFSET
 0x00

	)

1207 
	#PMSC_CTRL0_LEN
 (4)

	)

1208 
	#PMSC_CTRL0_MASK
 0xF08F847FUL

	)

1209 
	#PMSC_CTRL0_SYSCLKS_AUTO
 0x00000000UL

	)

1210 
	#PMSC_CTRL0_SYSCLKS_19M
 0x00000001UL

	)

1211 
	#PMSC_CTRL0_SYSCLKS_125M
 0x00000002UL

	)

1212 
	#PMSC_CTRL0_RXCLKS_AUTO
 0x00000000UL

	)

1213 
	#PMSC_CTRL0_RXCLKS_19M
 0x00000004UL

	)

1214 
	#PMSC_CTRL0_RXCLKS_125M
 0x00000008UL

	)

1215 
	#PMSC_CTRL0_RXCLKS_OFF
 0x0000000CUL

	)

1216 
	#PMSC_CTRL0_TXCLKS_AUTO
 0x00000000UL

	)

1217 
	#PMSC_CTRL0_TXCLKS_19M
 0x00000010UL

	)

1218 
	#PMSC_CTRL0_TXCLKS_125M
 0x00000020UL

	)

1219 
	#PMSC_CTRL0_TXCLKS_OFF
 0x00000030UL

	)

1220 
	#PMSC_CTRL0_FACE
 0x00000040UL

	)

1222 
	#PMSC_CTRL1_OFFSET
 0x04

	)

1223 
	#PMSC_CTRL1_LEN
 (4)

	)

1224 
	#PMSC_CTRL1_MASK
 0xFC02F802UL

	)

1225 
	#PMSC_CTRL1_ARX2INIT
 0x00000002UL

	)

1226 
	#PMSC_CTRL1_ATXSLP
 0x00000800UL

	)

1227 
	#PMSC_CTRL1_ARXSLP
 0x00001000UL

	)

1228 
	#PMSC_CTRL1_SNOZE
 0x00002000UL

	)

1229 
	#PMSC_CTRL1_SNOZR
 0x00004000UL

	)

1230 
	#PMSC_CTRL1_PLLSYN
 0x00008000UL

	)

1231 
	#PMSC_CTRL1_LDERUNE
 0x00020000UL

	)

1232 
	#PMSC_CTRL1_KHZCLKDIV_MASK
 0xFC000000UL

	)

1233 
	#PMSC_CTRL1_PKTSEQ_DISABLE
 0x00

	)

1234 
	#PMSC_CTRL1_PKTSEQ_ENABLE
 0xE7

	)

1236 
	#PMSC_RES1_OFFSET
 0x08

	)

1238 
	#PMSC_SNOZT_OFFSET
 0x0C

	)

1239 
	#PMSC_SNOZT_LEN
 (1)

	)

1241 
	#PMSC_RES2_OFFSET
 0x10

	)

1243 
	#PMSC_RES3_OFFSET
 0x24

	)

1245 
	#PMSC_TXFINESEQ_OFFSET
 0x26

	)

1246 
	#PMSC_TXFINESEQ_DIS_MASK
 (0x0)

	)

1247 
	#PMSC_TXFINESEQ_EN_MASK
 (0B74Ë

	)

1249 
	#PMSC_LEDC_OFFSET
 0x28

	)

1250 
	#PMSC_LEDC_LEN
 (4)

	)

1251 
	#PMSC_LEDC_MASK
 0x000001FFUL

	)

1252 
	#PMSC_LEDC_BLINK_TIM_MASK
 0x000000FFUL

	)

1253 
	#PMSC_LEDC_BLNKEN
 0x00000100UL

	)

1259 
	#REG_37_ID_RESERVED
 0x37

	)

1260 
	#REG_38_ID_RESERVED
 0x38

	)

1261 
	#REG_39_ID_RESERVED
 0x39

	)

1262 
	#REG_3A_ID_RESERVED
 0x3A

	)

1263 
	#REG_3B_ID_RESERVED
 0x3B

	)

1264 
	#REG_3C_ID_RESERVED
 0x3C

	)

1265 
	#REG_3D_ID_RESERVED
 0x3D

	)

1266 
	#REG_3E_ID_RESERVED
 0x3E

	)

1267 
	#REG_3F_ID_RESERVED
 0x3F

	)

1271 #ifde‡
__˝lu•lus


	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\drivers\radios\DWM\deca_types.h

13 #i‚de‡
_DECA_TYPES_H_


14 
	#_DECA_TYPES_H_


	)

16 #ifde‡
__˝lu•lus


20 #i‚de‡
uöt8


21 #i‚de‡
_DECA_UINT8_


22 
	#_DECA_UINT8_


	)

23 
	tuöt8
;

27 #i‚de‡
uöt16


28 #i‚de‡
_DECA_UINT16_


29 
	#_DECA_UINT16_


	)

30 
	tuöt16
;

34 #i‚de‡
uöt32


35 #i‚de‡
_DECA_UINT32_


36 
	#_DECA_UINT32_


	)

37 
	tuöt32
;

41 #i‚de‡
öt8


42 #i‚de‡
_DECA_INT8_


43 
	#_DECA_INT8_


	)

44 sig√d 
	töt8
;

48 #i‚de‡
öt16


49 #i‚de‡
_DECA_INT16_


50 
	#_DECA_INT16_


	)

51 sig√d 
	töt16
;

55 #i‚de‡
öt32


56 #i‚de‡
_DECA_INT32_


57 
	#_DECA_INT32_


	)

58 sig√d 
	töt32
;

62 #i‚de‡
NULL


63 
	#NULL
 ((*)0UL)

	)

66 #ifde‡
__˝lu•lus


	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\drivers\radios\DWM\deca_version.h

13 #i‚de‡
_DECA_VERSION_H_


14 
	#_DECA_VERSION_H_


	)

29 
	#DW1000_DRIVER_VERSION
 0x030001

	)

30 
	#DW1000_DEVICE_DRIVER_VER_STRING
 "DW1000 Devi˚ Drivî Vîsi⁄ 03.00.01"

	)

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\drivers\sensors\LIS2DH12.c

3 
	~"LIS2DH12.h
"

4 
	~"../../TEIA_v¨.h
"

5 
	~"../../∂©f‹m/≥rùhîÆ.h
"

22 
	#LIS2DH12_ADDR
 0x19

	)

24 
	#STATUS_REG_AUX
 0x07

	)

26 
	#OUT_TEMP_L
 0x0C

	)

27 
	#OUT_TEMP_H
 0x0D

	)

29 
	#WHO_AM_I_REG
 0x0F

	)

30 
	#WHO_AM_I_VAL
 0x33

	)

32 
	#CTRL_REG0
 0x1E

	)

33 
	#TEMP_CFG_REG
 0x1F

	)

34 
	#CTRL_REG1
 0x20

	)

35 
	#CTRL_REG2
 0x21

	)

36 
	#CTRL_REG3
 0x22

	)

37 
	#CTRL_REG4
 0x23

	)

38 
	#CTRL_REG5
 0x24

	)

39 
	#CTRL_REG6
 0x25

	)

41 
	#REFERENCE
 0x26

	)

42 
	#STATUS_REG
 0x27

	)

44 
	#OUT_X_L
 0x28

	)

45 
	#OUT_X_H
 0x29

	)

47 
	#OUT_Y_L
 0x2A

	)

48 
	#OUT_Y_H
 0x2B

	)

50 
	#OUT_Z_L
 0x2C

	)

51 
	#OUT_Z_H
 0x2D

	)

53 
	#FIFO_CTRL_REG
 0x2E

	)

54 
	#FIFO_SRC_REG
 0x2F

	)

56 
	#INT1_CFG
 0x30

	)

57 
	#INT1_SRC
 0x31

	)

58 
	#INT1_THS
 0x32

	)

59 
	#INT1_DURATION
 0x33

	)

61 
	#INT2_CFG
 0x34

	)

62 
	#INT2_SRC
 0x35

	)

63 
	#INT2_THS
 0x36

	)

64 
	#INT2_DURATION
 0x37

	)

66 
	#CLICK_CFG
 0x38

	)

67 
	#CLICK_SRC
 0x39

	)

68 
	#CLICK_THS
 0x3A

	)

69 
	#TIME_LIMIT
 0x3B

	)

70 
	#TIME_LATENCY
 0x3C

	)

71 
	#TIME_WINDOW
 0x3D

	)

73 
	#ACT_THS
 0x3E

	)

74 
	#ACT_DUR
 0x3F

	)

76 
	#LPí
 (1<<3)

	)

77 
	#HRí
 (1<<3)

	)

79 
	#ACC_FS_2g
 0x00

	)

80 
	#ACC_FS_4g
 0x10

	)

81 
	#ACC_FS_8g
 0x20

	)

82 
	#ACC_FS_16g
 0x30

	)

85 
	#LOW_POWER
 
LIS2DH12_LP_MODE


	)

86 
	#NORMAL
 
LIS2DH12_NORMAL_MODE


	)

87 
	#HIGH_RESOLUTION
 
LIS2DH12_HR_MODE


	)

89 
	#I2CDRV_bur°_ªadFromRegi°î
(
x
,
y
,
z
,
a
); 
	`I2CDRV_bur°_ªadFromRegi°î
(x,y|0x80,z,a);

	)

91 vﬁ©ûê
uöt8_t
 
	g˘æ_ªg1_ˇche
;

92 vﬁ©ûê
uöt8_t
 
	gmós_mode
;

93 vﬁ©ûê
uöt8_t
 
	gfuŒ_sˇÀ
;

95 
boﬁ
 
	$lis2dh12_ã°
()

97 
uöt8_t
 
ID
 = 
	`I2CDRV_ªadFromRegi°î
(
LIS2DH12_ADDR
,
WHO_AM_I_REG
);

98 if(
ID
 =
WHO_AM_I_VAL
Ë 
åue
;

99  
Ál£
;

100 
	}
}

102 
	$lis2dh12_öô
()

105 
uöt8_t
 
ªg
 = 0b10010000;

106 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG0
,
ªg
);

109 
ªg
 = 0x00;

110 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
TEMP_CFG_REG
,
ªg
);

113 
ªg
 = 0b00001000;

114 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG1
,
ªg
);

115 
˘æ_ªg1_ˇche
 = 0b00001000;

118 
ªg
 = 0b10100011;

119 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG2
,
ªg
);

123 
ªg
 = 0b01100000;

124 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG3
,
ªg
);

127 
ªg
 = 0b0010000;

128 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG4
,
ªg
);

129 
mós_mode
 = 
LOW_POWER
;

132 
ªg
 = 0b00101000;

133 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG5
,
ªg
);

136 
ªg
 = 0b00000000;

137 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG6
,
ªg
);

139 
	}
}

143 
	$lis2dh12_£t_Sèndby
()

145 
˘æ_ªg1_ˇche
 = 
	`I2CDRV_ªadFromRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG1
);

147 
uöt8_t
 
ªg
 = 0b00001000;

148 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG1
,
ªg
);

150 
	}
}

152 
	$lis2dh12_£t_A˘ive
()

155 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG1
,
˘æ_ªg1_ˇche
);

156 
	}
}

158 
	$lis2dh12_LP_mode
(
uöt32_t
 
ª‰esh_øã
)

160 
uöt8_t
 
ODR
;

162 if(
ª‰esh_øã
 >200Ë
ODR
 = 
LIS2DH12_ODR10_Hz
;

163 if(
ª‰esh_øã
 >80Ë
ODR
 = 
LIS2DH12_ODR25_Hz
;

164 if(
ª‰esh_øã
 >40Ë
ODR
 = 
LIS2DH12_ODR50_Hz
;

165 if(
ª‰esh_øã
 >20Ë
ODR
 = 
LIS2DH12_ODR100_Hz
;

166 
ODR
 = 
LIS2DH12_ODR200_Hz
;

168 
˘æ_ªg1_ˇche
 = 
	`I2CDRV_ªadFromRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG1
);

169 
uöt8_t
 
ªg
 = 0b00001111 | 
ODR
;

170 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG1
,
ªg
);

171 
	}
}

174 
	$lis2dh12_WOM_£âög
(
uöt8_t
 
ODR
)

177 
uöt8_t
 
ªg
 = 0b00001111 | 
ODR
;

178 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG1
,
ªg
);

180 
ªg
 = 0b10000001;

181 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG2
,
ªg
);

183 
ªg
 = 0b01000000;

184 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG3
,
ªg
);

187 
ªg
 = 
	`I2CDRV_ªadFromRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG5
);

188 
ªg
 &= 0b11110111;

189 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG5
,
ªg
);

191 
ªg
 = 0b00101010;

192 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
INT1_CFG
,
ªg
);

198 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
INT1_THS
,0x06);

202 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
INT1_DURATION
,0x01);

205 
	}
}

207 
uöt8_t
 
	$lis2dh12_gë_öt_§c
()

209 (
	`I2CDRV_ªadFromRegi°î
(
LIS2DH12_ADDR
,
INT1_SRC
));

211 
	}
}

213 
	$lis2dh12_£t_ODR
(
uöt8_t
 
ODR
)

215 
uöt8_t
 
ªg
 = 
	`I2CDRV_ªadFromRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG1
);

216 
ªg
 &= 0x0F;

217 
ªg
 |(
ODR
 & 0xF0);

218 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG1
,
ªg
);

219 
˘æ_ªg1_ˇche
 = 
ªg
;

220 
	}
}

222 
	$lis2dh12_£t_Æl_axes_a˘ive
()

224 
uöt8_t
 
ªg
 = 
	`I2CDRV_ªadFromRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG1
);

225 
ªg
 |= 0x07;

226 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG1
,
ªg
);

227 
˘æ_ªg1_ˇche
 = 
ªg
;

229 
	}
}

231 
	$lis2dh12_£t_FS
(
uöt8_t
 
FS
)

233 
uöt8_t
 
ªg
 = 
	`I2CDRV_ªadFromRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG4
);

234 
ªg
 &= 0b11001111;

235 
ªg
 |(
FS
 & 0b00110000);

236 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG4
,
ªg
);

237 
	}
}

239 
	$lis2dh12_£t_¥ecisi⁄
(
uöt8_t
 
mode
)

241 
uöt8_t
 
ªg
 = 
	`I2CDRV_ªadFromRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG1
);

242 if(
mode
 =
LOW_POWER
Ë
ªg
 |
LPí
;

243 
ªg
 &~
LPí
;

244 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG1
,
ªg
);

245 
˘æ_ªg1_ˇche
 = 
ªg
;

247 
ªg
 = 
	`I2CDRV_ªadFromRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG4
);

248 if(
mode
 =
HIGH_RESOLUTION
Ë
ªg
 |
HRí
;

249 
ªg
 &~
HRí
;

250 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG4
,
ªg
);

252 
mós_mode
 = 
mode
;

253 
	}
}

255 
	$lisdh12_öãºu±_öô
()

257 
uöt8_t
 
ªg
 = 0b00001111;

258 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG1
,
ªg
);

260 
ªg
 = 0b10000001;

261 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG2
,
ªg
);

263 
ªg
 = 0b01000000;

264 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG3
,
ªg
);

266 
ªg
 = 
	`I2CDRV_ªadFromRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG5
);

267 
ªg
 &= 0b11110111;

268 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
CTRL_REG5
,
ªg
);

270 
ªg
 = 0b00101010;

271 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
INT1_CFG
,
ªg
);

274 
ªg
 = 0b01111111;

275 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
INT1_THS
,
ªg
);

277 
ªg
 = 0b01111111;

278 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
INT1_SRC
,
ªg
);

279 
	`I2CDRV_wrôeToRegi°î
(
LIS2DH12_ADDR
,
INT1_DURATION
,0x01);

280 
	}
}

286 
	$lis2dh12_ªad_øw_acc_d©a
(
uöt8_t
 
sˇÀ
)

288 
uöt8_t
 
d©a
[6];

289 
	`I2CDRV_bur°_ªadFromRegi°î
(
LIS2DH12_ADDR
,
OUT_X_L
, 6, 
d©a
);

291 
£ns‹s_d©a
.
acc_d©a
.
x_axis
 = ((((
öt16_t
Ë
d©a
[1]) << 8) | data[0]);

292 
£ns‹s_d©a
.
acc_d©a
.
x_axis
 >>= 6;

294 
£ns‹s_d©a
.
acc_d©a
.
y_axis
 = ((((
öt16_t
Ë
d©a
[3]) << 8) | data[2]);

295 
£ns‹s_d©a
.
acc_d©a
.
y_axis
 >>= 6;

297 
£ns‹s_d©a
.
acc_d©a
.
z_axis
 = ((((
öt16_t
Ë
d©a
[5]) << 8) | data[4]);

298 
£ns‹s_d©a
.
acc_d©a
.
z_axis
 >>= 6;

301 
sˇÀ
)

303 (
ACC_FS_16g
):

304 
£ns‹s_d©a
.
acc_d©a
.
x_axis
 <<=3;

305 
£ns‹s_d©a
.
acc_d©a
.
y_axis
 <<=3;

306 
£ns‹s_d©a
.
acc_d©a
.
z_axis
 <<=3;

309 (
ACC_FS_8g
):

310 
£ns‹s_d©a
.
acc_d©a
.
x_axis
 <<=2;

311 
£ns‹s_d©a
.
acc_d©a
.
y_axis
 <<=2;

312 
£ns‹s_d©a
.
acc_d©a
.
z_axis
 <<=2;

315 (
ACC_FS_4g
):

316 
£ns‹s_d©a
.
acc_d©a
.
x_axis
 <<=1;

317 
£ns‹s_d©a
.
acc_d©a
.
y_axis
 <<=1;

318 
£ns‹s_d©a
.
acc_d©a
.
z_axis
 <<=1;

326 
	}
}

332 
	$lis2dh12_ªad_c‹r_acc_d©a
()

334 
	`lis2dh12_ªad_øw_acc_d©a
(
ACC_FS_4g
);

335 
£ns‹s_d©a
.
acc_d©a
.
x_axis
 -£ns‹s_d©a.
acc_off£ts
.x_axis;

336 
£ns‹s_d©a
.
acc_d©a
.
y_axis
 -£ns‹s_d©a.
acc_off£ts
.y_axis;

337 
£ns‹s_d©a
.
acc_d©a
.
z_axis
 -£ns‹s_d©a.
acc_off£ts
.z_axis;

338 
	}
}

344 
	$lis2dh12_ªad_ac˚Àøti⁄
(*
xaxis_f
,*
yaxis_f
,*
zaxis_f
)

346 
	`lis2dh12_ªad_c‹r_acc_d©a
();

348 *
xaxis_f
 = ()
£ns‹s_d©a
.
acc_d©a
.
x_axis
 / 1000.f;

349 *
yaxis_f
 = ()
£ns‹s_d©a
.
acc_d©a
.
y_axis
 / 1000.f;

350 *
zaxis_f
 = ()
£ns‹s_d©a
.
acc_d©a
.
z_axis
 / 1000.f;

352 
	}
}

356 
	$lis2dh12_ˇlib
()

358 
uöt16_t
 
i
=0;

359 
öt32_t
 
acc_xoffs
=0, 
acc_yoffs
=0, 
acc_zoffs
=0;

361 
öt16_t
 
gøvôy
 = 1000;

363 
	`lis2dh12_öô
();

364 
	`lis2dh12_£t_FS
(
ACC_FS_2g
);

365 
	`lis2dh12_£t_ODR
(
LIS2DH12_ODR100_Hz
);

366 
	`lis2dh12_£t_¥ecisi⁄
(
HIGH_RESOLUTION
);

367 
	`lis2dh12_£t_Æl_axes_a˘ive
();

368 
	`lis2dh12_£t_A˘ive
();

371 
i
 = 0; i < 2048; i++)

373 
	`lis2dh12_ªad_øw_acc_d©a
(
ACC_FS_2g
);

374 
acc_xoffs
 +(
öt32_t
Ë(
£ns‹s_d©a
.
acc_d©a
.
x_axis
);

375 
acc_yoffs
 +(
öt32_t
Ë(
£ns‹s_d©a
.
acc_d©a
.
y_axis
);

376 
acc_zoffs
 +(
öt32_t
Ë(
£ns‹s_d©a
.
acc_d©a
.
z_axis
 - 
gøvôy
);

377 
	`WDOG_Fìd
();

380 
£ns‹s_d©a
.
acc_off£ts
.
x_axis
 =(
öt16_t
)(
acc_xoffs
 >> 11);

381 
£ns‹s_d©a
.
acc_off£ts
.
y_axis
 =(
öt16_t
)(
acc_yoffs
 >> 11);

382 
£ns‹s_d©a
.
acc_off£ts
.
z_axis
 =(
öt16_t
)(
acc_zoffs
 >> 11);

383 
	}
}

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\drivers\sensors\LIS2DH12.h

1 #i‚de‡
LIS2DH12_H_INCLUDED


2 
	#LIS2DH12_LIS2DH12_H_INCLUDED


	)

19 
	~<°dboﬁ.h
>

20 
	~<°döt.h
>

24 
	#LIS2DH12_PWR_DOWN
 (0<<4Ë

	)

25 
	#LIS2DH12_ODR1_Hz
 (1<<4Ë

	)

26 
	#LIS2DH12_ODR10_Hz
 (2<<4Ë

	)

27 
	#LIS2DH12_ODR25_Hz
 (3<<4Ë

	)

28 
	#LIS2DH12_ODR50_Hz
 (4<<4Ë

	)

29 
	#LIS2DH12_ODR100_Hz
 (5<<4Ë

	)

30 
	#LIS2DH12_ODR200_Hz
 (6<<4Ë

	)

31 
	#LIS2DH12_ODR400_Hz
 (7<<4Ë

	)

32 
	#LIS2DH12_ODR1620_Hz
 (8<<4Ë

	)

33 
	#LIS2DH12_ODR5376_Hz
 (9<<4Ë

	)

34 
	#LIS2DH12_ODR1344_Hz
 (9<<4Ë

	)

39 
	#LIS2DH12_HP_AGGRESSIVE
 (0 << 5Ë

	)

40 
	#LIS2DH12_HP_STRONG
 (1 << 5Ë

	)

41 
	#LIS2DH12_HP_MEDIUM
 (2 << 5Ë

	)

42 
	#LIS2DH12_HP_LIGHT
 (3 << 5Ë

	)

45 
	#LIS2DH12_FS_2g
 (0 << 4Ë

	)

46 
	#LIS2DH12_FS_4g
 (1 << 4Ë

	)

47 
	#LIS2DH12_FS_8g
 (2 << 4Ë

	)

48 
	#LIS2DH12_FS_16g
 (3 << 4Ë

	)

50 
	#LIS2DH12_LP_MODE
 (0Ë

	)

51 
	#LIS2DH12_NORMAL_MODE
 (1Ë

	)

52 
	#LIS2DH12_HR_MODE
 (2Ë

	)

55 
boﬁ
 
lis2dh12_ã°
();

56 
lis2dh12_öô
();

59 
lis2dh12_£t_Sèndby
();

60 
lis2dh12_£t_A˘ive
();

61 
lis2dh12_LP_mode
(
uöt32_t
 
ª‰esh_øã
);

63 
uöt8_t
 
lis2dh12_gë_öt_§c
();

64 
lis2dh12_WOM_£âög
(
uöt8_t
 
ODR
);

65 
lis2dh12_£t_ODR
(
uöt8_t
 
ODR
);

66 
lis2dh12_£t_FS
(
uöt8_t
 
FS
);

67 
lis2dh12_£t_Æl_axes_a˘ive
();

68 
lis2dh12_£t_¥ecisi⁄
(
uöt8_t
 
mode
);

70 
lis2dh12_ªad_øw_acc_d©a
(
uöt8_t
 
sˇÀ
);

71 
lis2dh12_ªad_c‹r_acc_d©a
();

72 
lis2dh12_ªad_ac˚Àøti⁄
(*
xaxis_f
,*
yaxis_f
,*
zaxis_f
);

74 
lis2dh12_ˇlib
();

75 
lisdh12_öãºu±_öô
();

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\gcc_startup_nrf52.s

28 .
sy¡ax
 
	gunifõd


29 .
¨ch
 
	g¨mv7e
-
	gm


31 #ifde‡
__STARTUP_CONFIG


32 
	~"°¨tup_c⁄fig.h
"

35 .
	g£˘i⁄
 .
	g°ack


36 .
	gÆign
 3

37 #i‡
deföed
(
__STARTUP_CONFIG
)

38 .
equ
 
	gSèck_Size
, 
	g__STARTUP_CONFIG_STACK_SIZE


39 #ñi‡
deföed
(
__STACK_SIZE
)

40 .
equ
 
	gSèck_Size
, 
	g__STACK_SIZE


42 .
equ
 
	gSèck_Size
, 8192

44 .
globl
 
	g__SèckT›


45 .
globl
 
__SèckLimô


46 
	g__SèckLimô
:

47 .
•a˚
 
Sèck_Size


48 .
size
 
__SèckLimô
, . - __StackLimit

49 
	g__SèckT›
:

50 .
size
 
__SèckT›
, . - 
	g__SèckT›


52 .
	g£˘i⁄
 .
	ghóp


53 .
	gÆign
 3

54 #i‡
deföed
(
__STARTUP_CONFIG
)

55 .
equ
 
	gHóp_Size
, 
	g__STARTUP_CONFIG_HEAP_SIZE


56 #ñi‡
deföed
(
__HEAP_SIZE
)

57 .
equ
 
	gHóp_Size
, 
	g__HEAP_SIZE


59 .
equ
 
	gHóp_Size
, 0

61 .
globl
 
	g__HópBa£


62 .
globl
 
__HópLimô


63 
	g__HópBa£
:

64 .
Hóp_Size


65 .
•a˚
 
Hóp_Size


66 .
ídif


67 .
size
 
__HópBa£
, . - __HeapBase

68 
	g__HópLimô
:

69 .
size
 
__HópLimô
, . - 
	g__HópLimô


71 .
	g£˘i⁄
 .
	gi§_ve˘‹


72 .
	gÆign
 2

73 .
globl
 
__i§_ve˘‹


74 
	g__i§_ve˘‹
:

75 .
__SèckT›


76 .
Re£t_H™dÀr


77 .
NMI_H™dÀr


78 .
H¨dFau…_H™dÀr


79 .
Mem‹yM™agemít_H™dÀr


80 .
BusFau…_H™dÀr


81 .
UßgeFau…_H™dÀr


86 .
SVC_H™dÀr


87 .
DebugM⁄_H™dÀr


89 .
PídSV_H™dÀr


90 .
SysTick_H™dÀr


93 .
POWER_CLOCK_IRQH™dÀr


94 .
RADIO_IRQH™dÀr


95 .
UARTE0_UART0_IRQH™dÀr


96 .
SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQH™dÀr


97 .
SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQH™dÀr


98 .
NFCT_IRQH™dÀr


99 .
GPIOTE_IRQH™dÀr


100 .
SAADC_IRQH™dÀr


101 .
TIMER0_IRQH™dÀr


102 .
TIMER1_IRQH™dÀr


103 .
TIMER2_IRQH™dÀr


104 .
RTC0_IRQH™dÀr


105 .
TEMP_IRQH™dÀr


106 .
RNG_IRQH™dÀr


107 .
ECB_IRQH™dÀr


108 .
CCM_AAR_IRQH™dÀr


109 .
WDT_IRQH™dÀr


110 .
RTC1_IRQH™dÀr


111 .
QDEC_IRQH™dÀr


112 .
COMP_LPCOMP_IRQH™dÀr


113 .
SWI0_EGU0_IRQH™dÀr


114 .
SWI1_EGU1_IRQH™dÀr


115 .
SWI2_EGU2_IRQH™dÀr


116 .
SWI3_EGU3_IRQH™dÀr


117 .
SWI4_EGU4_IRQH™dÀr


118 .
SWI5_EGU5_IRQH™dÀr


119 .
TIMER3_IRQH™dÀr


120 .
TIMER4_IRQH™dÀr


121 .
PWM0_IRQH™dÀr


122 .
PDM_IRQH™dÀr


125 .
MWU_IRQH™dÀr


126 .
PWM1_IRQH™dÀr


127 .
PWM2_IRQH™dÀr


128 .
SPIM2_SPIS2_SPI2_IRQH™dÀr


129 .
RTC2_IRQH™dÀr


130 .
I2S_IRQH™dÀr


131 .
FPU_IRQH™dÀr


334 .
size
 
__i§_ve˘‹
, . - 
	g__i§_ve˘‹


339 .
	gãxt


340 .
	gthumb


341 .
	gthumb_func


342 .
	gÆign
 1

343 .
globl
 
	gRe£t_H™dÀr


344 .
ty≥
 
	gRe£t_H™dÀr
, %
fun˘i⁄


345 
	gRe£t_H™dÀr
:

357 
ldr
 
r1
, =
__ëext


358 
ldr
 
r2
, =
__d©a_°¨t__


359 
ldr
 
r3
, =
__bss_°¨t__


361 
subs
 
r3
, 
r2


362 
	gbÀ
 .
	gL_lo›1_d⁄e


364 .
	gL_lo›1
:

365 
subs
 
r3
, #4

366 
ldr
 
	gr0
, [
r1
,
r3
]

367 
°r
 
	gr0
, [
r2
,
r3
]

368 
	gbgt
 .
	gL_lo›1


370 .
	gL_lo›1_d⁄e
:

382 #ifde‡
__STARTUP_CLEAR_BSS


383 
ldr
 
r1
, =
__bss_°¨t__


384 
ldr
 
r2
, =
__bss_íd__


386 
movs
 
r0
, 0

388 
subs
 
	gr2
, 
r1


389 
	gbÀ
 .
	gL_lo›3_d⁄e


391 .
	gL_lo›3
:

392 
subs
 
r2
, #4

393 
°r
 
	gr0
, [
r1
, 
r2
]

394 
	gbgt
 .
	gL_lo›3


396 .
	gL_lo›3_d⁄e
:

405 #i‚de‡
__START


406 
	#__START
 
_°¨t


	)

410 
LDR
 
R0
, =
Sy°emInô


411 
BLX
 
R0


412 
LDR
 
R0
, =
maö


413 
BX
 
R0


416 .
poﬁ


417 .
size
 
Re£t_H™dÀr
,.-
	gRe£t_H™dÀr


419 .
	g£˘i⁄
 ".text"

424 .
wók
 
	gNMI_H™dÀr


425 .
ty≥
 
	gNMI_H™dÀr
, %
fun˘i⁄


426 
	gNMI_H™dÀr
:

427 
b
 .

428 .
size
 
NMI_H™dÀr
, . - 
	gNMI_H™dÀr


431 .
wók
 
	gH¨dFau…_H™dÀr


432 .
ty≥
 
	gH¨dFau…_H™dÀr
, %
fun˘i⁄


433 
	gH¨dFau…_H™dÀr
:

434 
b
 .

435 .
size
 
H¨dFau…_H™dÀr
, . - 
	gH¨dFau…_H™dÀr


438 .
wók
 
	gMem‹yM™agemít_H™dÀr


439 .
ty≥
 
	gMem‹yM™agemít_H™dÀr
, %
fun˘i⁄


440 
	gMem‹yM™agemít_H™dÀr
:

441 
b
 .

442 .
size
 
Mem‹yM™agemít_H™dÀr
, . - 
	gMem‹yM™agemít_H™dÀr


445 .
wók
 
	gBusFau…_H™dÀr


446 .
ty≥
 
	gBusFau…_H™dÀr
, %
fun˘i⁄


447 
	gBusFau…_H™dÀr
:

448 
b
 .

449 .
size
 
BusFau…_H™dÀr
, . - 
	gBusFau…_H™dÀr


452 .
wók
 
	gUßgeFau…_H™dÀr


453 .
ty≥
 
	gUßgeFau…_H™dÀr
, %
fun˘i⁄


454 
	gUßgeFau…_H™dÀr
:

455 
b
 .

456 .
size
 
UßgeFau…_H™dÀr
, . - 
	gUßgeFau…_H™dÀr


459 .
wók
 
	gSVC_H™dÀr


460 .
ty≥
 
	gSVC_H™dÀr
, %
fun˘i⁄


461 
	gSVC_H™dÀr
:

462 
b
 .

463 .
size
 
SVC_H™dÀr
, . - 
	gSVC_H™dÀr


466 .
wók
 
	gDebugM⁄_H™dÀr


467 .
ty≥
 
	gDebugM⁄_H™dÀr
, %
fun˘i⁄


468 
	gDebugM⁄_H™dÀr
:

469 
b
 .

470 .
size
 
DebugM⁄_H™dÀr
, . - 
	gDebugM⁄_H™dÀr


473 .
wók
 
	gPídSV_H™dÀr


474 .
ty≥
 
	gPídSV_H™dÀr
, %
fun˘i⁄


475 
	gPídSV_H™dÀr
:

476 
b
 .

477 .
size
 
PídSV_H™dÀr
, . - 
	gPídSV_H™dÀr


480 .
wók
 
	gSysTick_H™dÀr


481 .
ty≥
 
	gSysTick_H™dÀr
, %
fun˘i⁄


482 
	gSysTick_H™dÀr
:

483 
b
 .

484 .
size
 
SysTick_H™dÀr
, . - 
	gSysTick_H™dÀr


489 .
globl
 
	gDeÁu…_H™dÀr


490 .
ty≥
 
	gDeÁu…_H™dÀr
, %
fun˘i⁄


491 
	gDeÁu…_H™dÀr
:

492 
b
 .

493 .
size
 
DeÁu…_H™dÀr
, . - 
	gDeÁu…_H™dÀr


495 .
ma¸o
 
IRQ
 
	gh™dÀr


496 .
	gwók
 \
	gh™dÀr


497 .
	g£t
 \
	gh™dÀr
, 
	gDeÁu…_H™dÀr


498 .
ídm


500 
IRQ
 
POWER_CLOCK_IRQH™dÀr


501 
IRQ
 
RADIO_IRQH™dÀr


502 
IRQ
 
UARTE0_UART0_IRQH™dÀr


503 
IRQ
 
SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQH™dÀr


504 
IRQ
 
SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQH™dÀr


505 
IRQ
 
NFCT_IRQH™dÀr


506 
IRQ
 
GPIOTE_IRQH™dÀr


507 
IRQ
 
SAADC_IRQH™dÀr


508 
IRQ
 
TIMER0_IRQH™dÀr


509 
IRQ
 
TIMER1_IRQH™dÀr


510 
IRQ
 
TIMER2_IRQH™dÀr


511 
IRQ
 
RTC0_IRQH™dÀr


512 
IRQ
 
TEMP_IRQH™dÀr


513 
IRQ
 
RNG_IRQH™dÀr


514 
IRQ
 
ECB_IRQH™dÀr


515 
IRQ
 
CCM_AAR_IRQH™dÀr


516 
IRQ
 
WDT_IRQH™dÀr


517 
IRQ
 
RTC1_IRQH™dÀr


518 
IRQ
 
QDEC_IRQH™dÀr


519 
IRQ
 
COMP_LPCOMP_IRQH™dÀr


520 
IRQ
 
SWI0_EGU0_IRQH™dÀr


521 
IRQ
 
SWI1_EGU1_IRQH™dÀr


522 
IRQ
 
SWI2_EGU2_IRQH™dÀr


523 
IRQ
 
SWI3_EGU3_IRQH™dÀr


524 
IRQ
 
SWI4_EGU4_IRQH™dÀr


525 
IRQ
 
SWI5_EGU5_IRQH™dÀr


526 
IRQ
 
TIMER3_IRQH™dÀr


527 
IRQ
 
TIMER4_IRQH™dÀr


528 
IRQ
 
PWM0_IRQH™dÀr


529 
IRQ
 
PDM_IRQH™dÀr


530 
IRQ
 
MWU_IRQH™dÀr


531 
IRQ
 
PWM1_IRQH™dÀr


532 
IRQ
 
PWM2_IRQH™dÀr


533 
IRQ
 
SPIM2_SPIS2_SPI2_IRQH™dÀr


534 
IRQ
 
RTC2_IRQH™dÀr


535 
IRQ
 
I2S_IRQH™dÀr


536 
IRQ
 
	gFPU_IRQH™dÀr


538 .
	gíd


	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\main.c

3 
	~<°dio.h
>

4 
	~<°döt.h
>

5 
	~<°dboﬁ.h
>

6 
	~<°rög.h
>

7 
	~<°dlib.h
>

8 
	~"≥rùhîÆ.h
"

9 
	~"TEIA_routöes.h
"

10 
	~"timög.h
"

11 
	~"maö.h
"

12 
	~"../drivîs/ødios/DWM/deˇ_devi˚_≠i.h
"

13 
	~"../∂©f‹m/≥rùhîÆ.h
"

14 
	~"../∂©f‹m/p‹t_def.h
"

15 
	~"../∂©f‹m/timög.h
"

16 
	~"../∂©f‹m/£âög.h
"

18 
	~"../TEIA_v¨.h
"

19 
	~"ƒf_powî.h
"

20 
	~"ƒf.h
"

21 
	~"ƒf_≥rùhîÆs.h
"

22 
	~"ƒf_dñay.h
"

23 
	~"ƒf_drv_gpiŸe.h
"

24 
	~"ƒf_drv_comm⁄.h
"

25 
	~"≠p_utû_∂©f‹m.h
"

26 
	~"≠p_u¨t.h
"

28 
	~"LIS2DH12.h
"

30 
	#BATTERY_CHECK
 0

	)

32 
	$V¨übÀ_Re£t
()

34 
Êag_b©ãry_check
 = 
åue
 ;

35 
Êag_ªd_Àd_⁄
 = 
Ál£
 ;

36 
Êag_l‹a_íabÀ
 = 
Ál£
 ;

37 
Êag_¶ìp_íabÀ
 = 
åue
 ;

38 
Êag_l‹a_ª˚ive_íabÀ

Ál£
 ;

39 
Êag_uwb_dìp_¶ìp
 = 
Ál£
 ;

40 
Êag_l‹a_wakeup_°©us
 = 
Ál£
 ;

41 
Êag_Àd_toggÀ
 = 
Ál£
 ;

43 
Êag_u¨t_rx_d©a
 = 
Ál£
 ;

45 
©_£nd_l‹a_°©e
 = 1;

46 
©_ª˚ive_l‹a_°©e
 = 1;

47 
Êag_l‹a_rx_ok
 = 
Ál£
 ;

48 
Êag_©_l‹a_£nd
 = 
Ál£
 ;

49 
AT_LORA_FLAG_OK
 = 
Ál£
;

51 
öt_Êag
.
mŸi⁄_a˘i⁄_dëe˘ed
 = 
Ál£
;

53 
Àd_toggÀ_⁄
 = 0 ;

54 
cou¡î_l‹a_íabÀ
 = 0 ;

55 
cou¡î_l‹a
 = 0 ;

56 
cou¡î_acc
 = 0 ;

57 
cou¡î_b©
 = 0 ;

58 
cou¡î_Àd
 = 0 ;

59 
cou¡î_l‹a_rx_ok
 = 0 ;

60 
cou¡î_acc_mŸi⁄
 = 0 ;

61 
öãrvÆ
 = 
NRF_WAKEUP_PERIOD
 ;

62 
	}
}

68 
	$maö
()

73 
	`dñay_ms
(10);

74 
ACC_¶ìp
 = 
Ál£
;

76 
	`MCU_öô
();

77 
	`HW_öô
();

78 
	`V¨übÀ_Re£t
() ;

80 
	`LED2_ON
() ;

81 
	`ext_úq_öô
();

82 
	`UWB_ødio_wake_up
();

83 
	`c⁄figuª_UWB
();

84 
	`öô_TDOA_∑øms
();

85 
	`C⁄vît_Maˇddªss
() ;

86 
	`dñay_ms
(3000) ;

87 
	`LED2_OFF
() ;

88 
ouãr_lo›
 = 
åue
;

90 
ouãr_lo›
)

93 
ö√r_lo›
 = 
åue
;

96 
ö√r_lo›
)

99 
	`PB_LED1_TOGGLE
();

101 
	`£nd_Blök
();

104 
	`dñay_™d_¶ìp
(
öãrvÆ
, 1, 
åue
);

109 
	`do_SWRe£tMCU
(255);

112 
	}
}

131  
	gj
 = 0 ;j< 3; j++){

132 
MEMORY_SPI_öô
();

133 
Êash_wrôe_•i
(0x100 * 
∑ge_˙t
++ , 
LoRa_rx_˙t
, 
LoRa_RXD_Buf
);

134 
UWB_SPI_öô
();

135 
£nd_Blök
();

136 
	gtime°amp_ãmp_öô
 = 
gë_RTC_time°amp
(
åue
);

137 
	gÊag_l‹a_rx_ok
 = 0 ;

138 !
	gÊag_l‹a_rx_ok
){

139 
	gtime°amp_ãmp_íd
 = 
gë_RTC_time°amp
(
åue
);

140 if((
	gtime°amp_ãmp_íd
-
	gtime°amp_ãmp_öô
Ë> 
	gUSER_PB_2s_waô
){

141 
	gÊag_l‹a_rx_ok
 = 
åue
;

144 
	gÊag_l‹a_rx_ok
 = 
Ál£
;

146 
LORA_SÀï
();

158 
	`acc_bound¨y_d©a
();

159 
	`Acc_com∑ª
();

160 
öt32_t
 
f1
 = (
acc_√w_x
+
acc_√w_y
+
acc_√w_z
)/3 ;

161 
öt32_t
 
f2
 = 
f1
 / 100 ;

162 
öt32_t
 
f3
 = 
	`abs
((
f1
 - 
f2
*100)/10) ;

163 
öt32_t
 
f4
 = 
f1
 / 10 ;

164 
öt32_t
 
f5
 = 
	`abs
(
f1
 - 
f4
*10) ;

165 
öt32_t
 
f6
 = 
NRF_WAKEUP_PERIOD
 + 30*
f3
 + 3*
f5
 ;

166 
	`¥ötf
("xyz=%ld,%ld,%ld--ãn=%ld,⁄e=%ld,Pî=%ld \r\n",
acc_√w_x
,
acc_√w_y
,
acc_√w_z
,
f3
, 
f5
,
f6
 );

169 
	`PB_LED1_ON
() ;

170 
	`__WFI
();

171 if–
öt_Êag
.
mŸi⁄_a˘i⁄_dëe˘ed
) {

172 
Êag_uwb_dìp_¶ìp
 = 0 ;

173 
	`PB_LED1_OFF
() ;

178 
	`dñay_ms
(1000) ;

179 
	}
}

182 
	`acc_bound¨y_d©a
();

183 
	`¥ötf
("xyz=%ld , %ld, %ld \r\n",
acc_√w_x
,
acc_√w_y
,
acc_√w_z
);

184 
	`Acc_com∑ª
();

185 
	`¥ötf
("xyz=%ld , %ld, %ld \r\n",
acc_x
,
acc_y
,
acc_z
);

187 !
öt_Êag
.
mŸi⁄_a˘i⁄_dëe˘ed
){

188 
	`PB_LED1_ON
() ;

189 
	`__WFI
();

190 if–
öt_Êag
.
mŸi⁄_a˘i⁄_dëe˘ed
) {

191 
Êag_uwb_dìp_¶ìp
 = 0 ;

192 
	`PB_LED1_OFF
() ;

195 
	`__íabÀ_úq
();

196 
	`__ISB
();

197 
	`dñay_ms
(1000) ;

198 
	}
}

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\main.h

3 
	#LORA_START
 '<'

	)

4 
	#LORA_END
 '>'

	)

5 
	#LORA_WAKEUP
 26

	)

7 
	#ACC_Bound¨y
 25

8 
	#LORA_WAKEUP_PERIOD
 10

9 
	#ACC_WAKEUP_PERIOD
 120

	)

10 
	#NRF_WAKEUP_PERIOD
 900

	)

11 
	#BATTERY_CHECK_PERIOD
 10

12 
	#LED_TOGGLE_PERIOD
 10

	)

14 
	#BLOCK0
 0x00000000

	)

15 
	#BLOCKEND
 0x0007F000

	)

17 
	#USER_PB_1s
 (1000UL)

	)

18 
	#USER_PB_2s
 (
USER_PB_1s
 * 2UL)

	)

19 
	#USER_PB_3s
 (
USER_PB_2s
 * 2UL)

	)

20 
	#USER_PB_1s_waô
 (
USER_PB_1s
 * 32768)/1000

	)

21 
	#USER_PB_2s_waô
 (
USER_PB_2s
 * 32768)/1000

	)

22 
	#USER_PB_3s_waô
 (
USER_PB_3s
 * 32768)/1000

	)

24 
	#AT_SEND_CMD_LENGTH
 16

	)

25 
	#RX_COMMAND_CODE
 9

	)

26 
	#CUTOFF_VOLTAGE
 190

	)

27 
	#CUTOFF_VOLTAGE_1
 190

	)

28 
	#CUTOFF_VOLTAGE_2
 175

	)

30 
	#PERIOD_4HZ
 0

	)

31 
	#PERIOD_2HZ
 1

	)

32 
	#PERIOD_1HZ
 2

	)

33 
	#PERIOD_05HZ
 3

	)

34 
	#PERIOD_025HZ
 4

	)

38 
uöt8_t
 
	gFLAG_AT_LORA_SEND
;

39 
uöt8_t
 
	gAT_LORA_FLAG_OK
;

40 
uöt8_t
 
	g©_£nd_l‹a_°©e
;

41 
uöt8_t
 
	g©_ª˚ive_l‹a_°©e
;

42 
uöt8_t
 
	gU¨t_RXD
;

44 
uöt8_t
 
	gãmp_buf
[256] ;

45 
uöt8_t
 
	gU¨t_RXD_Buf
[256];

46 
uöt8_t
 
	gLoRa_RXD_Buf
[1024] ;

47 
uöt8_t
 
	gÊash_rd_Buf
[256] ;

48 
uöt32_t
 
	gãmp_size
,
	gLoRa_rx_˙t
 ;

49 
uöt8_t
 
	gèg_id_4digô
[4] ;

50 
uöt8_t
 
	gb©ãry_amou¡
[3] ;

52 
uöt8_t
 
	gb©ãry
;

53 
uöt32_t
 
	g∑ge_˙t
 ;

54 
uöt32_t
 
	gﬁd_∑ge_˙t
 ;

55 
uöt32_t
 
	gcy˛e_l‹a
 ;

57 
uöt32_t
 
	gcou¡î_l‹a
 ;

58 
uöt32_t
 
	göãrvÆ
;

59 
uöt32_t
 
	gcou¡î_acc
 ;

60 
uöt32_t
 
	gcou¡î_b©
 ;

61 
uöt32_t
 
	gcou¡î_Àd
 ;

62 
uöt32_t
 
	gcou¡î_l‹a_íabÀ
 ;

63 
uöt32_t
 
	gcou¡î_l‹a_rx_ok
 ;

65 
uöt64_t
 
	gUWB_MACaddªss
 ;

66 
uöt64_t
 
	gRxUWB_MACaddªss
 ;

67 
uöt8_t
 
	gUWB_MACid
[12] ;

69 
uöt32_t
 
	gtime°amp
 ;

70 
uöt32_t
 
	gtime°amp_öô
 ;

71 
uöt32_t
 
	gtime°amp2
 ;

72 
uöt32_t
 
	gtime°amp_öô2
 ;

74 vﬁ©ûê
boﬁ
 
	gö√r_lo›
;

75 vﬁ©ûê
boﬁ
 
	gouãr_lo›
;

76 vﬁ©ûê
boﬁ
 
	gÊag_b©ãry_check
 ;

77 vﬁ©ûê
boﬁ
 
	gÊag_ªd_Àd_⁄
 ;

78 vﬁ©ûê
boﬁ
 
	gÊag_l‹a_a˘ive
 ;

79 vﬁ©ûê
boﬁ
 
	gÊag_l‹a_íabÀ
 ;

80 vﬁ©ûê
boﬁ
 
	gÊag_Àd_toggÀ
 ;

81 vﬁ©ûê
boﬁ
 
	gÀd_toggÀ_⁄
 ;

82 vﬁ©ûê
boﬁ
 
	gÊag_u¨t_rx_d©a
 ;

84 vﬁ©ûê
boﬁ
 
	gÊag_©_l‹a_£nd
 ;

85 vﬁ©ûê
boﬁ
 
	gÊag_l‹a_rx_ok
 ;

86 vﬁ©ûê
boﬁ
 
	gÊag_toggÀ_l‹a_wakeup
 ;

87 vﬁ©ûê
boﬁ
 
	gÊag_¶ìp_íabÀ
 ;

88 vﬁ©ûê
boﬁ
 
	gÊag_l‹a_ª˚ive_íabÀ
;

89 vﬁ©ûê
boﬁ
 
	gÊag_uwb_dìp_¶ìp
;

90 vﬁ©ûê
boﬁ
 
	gÊag_l‹a_wakeup_°©us
 ;

92 
öt32_t
 
	gacc_x
 , 
	gacc_y
 , 
	gacc_z
 ;

93 
öt32_t
 
	gacc_ﬁd_x
 , 
	gacc_ﬁd_y
 , 
	gacc_ﬁd_z
 ;

94 
öt32_t
 
	gacc_√w_x
 , 
	gacc_√w_y
 , 
	gacc_√w_z
 ;

95 
	gcou¡î_acc_mŸi⁄
 ;

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\nrf52_xxaa.ld

3 
	$SEARCH_DIR
(.)

4 
	`GROUP
(-
lgcc
 -
lc
 -
 osys
)

6 
MEMORY


8 
	`FLASH
 (
rx
Ë: 
ORIGIN
 = 0x1f000, 
LENGTH
 = 0x54000

9 
	`RAM
 (
rwx
Ë: 
ORIGIN
 = 0x200019c0, 
LENGTH
 = 0xe640

10 
	}
}

12 
	gSECTIONS


14 .
	gfs_d©a
 :

16 
PROVIDE
(
__°¨t_fs_d©a
 = .);

17 
KEEP
(*(.
fs_d©a
))

18 
PROVIDE
(
__°›_fs_d©a
 = .);

19 } > 
	gRAM


20 .
	gpwr_mgmt_d©a
 :

22 
PROVIDE
(
__°¨t_pwr_mgmt_d©a
 = .);

23 
KEEP
(*(.
pwr_mgmt_d©a
))

24 
PROVIDE
(
__°›_pwr_mgmt_d©a
 = .);

25 } > 
	gRAM


26 } 
INSERT
 
	gAFTER
 .
	gd©a
;

28 
	gINCLUDE
 "nrf5x_common.ld"

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\DWM_routines.c

3 
	~"DWM_routöes.h
"

4 
	~"£âög.h
"

5 
	~"deÁu…_£t.h
"

6 
	~"≥rùhîÆ.h
"

7 
	~"timög.h
"

8 
	~"../TEIA_v¨.h
"

9 
	~<°rög.h
>

10 
	~<m©h.h
>

11 
	~"../drivîs/£ns‹s/lis2dh12.h
"

12 
	~"../drivîs/ødios/DWM/deˇ_devi˚_≠i.h
"

13 
	~"../drivîs/ødios/DWM/deˇ_ªgs.h
"

16 
	#LDOTUNE_ADDRESS
 (0x04)

	)

17 
	#PARTID_ADDRESS
 (0x06)

	)

18 
	#LOTID_ADDRESS
 (0x07)

	)

19 
	#VBAT_ADDRESS
 (0x08)

	)

20 
	#VTEMP_ADDRESS
 (0x09)

	)

21 
	#XTRIM_ADDRESS
 (0x1E)

	)

22 
	#OTP_TXPWR_CH1_PRF16_ADDRESS
 (0x010)

	)

23 
	#OTP_TXPWR_CH1_PRF64_ADDRESS
 (0x011)

	)

24 
	#OTP_TXPWR_CH2_PRF16_ADDRESS
 (0x012)

	)

25 
	#OTP_TXPWR_CH2_PRF64_ADDRESS
 (0x013)

	)

26 
	#OTP_TXPWR_CH3_PRF16_ADDRESS
 (0x014)

	)

27 
	#OTP_TXPWR_CH3_PRF64_ADDRESS
 (0x015)

	)

28 
	#OTP_TXPWR_CH4_PRF16_ADDRESS
 (0x016)

	)

29 
	#OTP_TXPWR_CH4_PRF64_ADDRESS
 (0x017)

	)

30 
	#OTP_TXPWR_CH5_PRF16_ADDRESS
 (0x018)

	)

31 
	#OTP_TXPWR_CH5_PRF64_ADDRESS
 (0x019)

	)

32 
	#OTP_TXPWR_CH7_PRF16_ADDRESS
 (0x01A)

	)

33 
	#OTP_TXPWR_CH7_PRF64_ADDRESS
 (0x01B)

	)

35 
	#OTP_PGCNT_ADDRESS
 (0x01D)

	)

36 
	#OTP_XTRIM_ADDRESS
 (0x01E)

	)

38 
	#TEMP_COMP_FACTOR_CH2
 (327)

39 
	#TEMP_COMP_FACTOR_CH5
 (607)

40 
	#SAR_TEMP_TO_CELCIUS_CONV
 (1.14)

	)

41 
	#SAR_VBAT_TO_VOLT_CONV
 (1.0/173)

	)

43 
	#VBAT_COMP_FACTOR
 (-2.92f)

	)

48 
	sªf_vÆues
 {

49 
uöt8
 
	mpgdly
;

50 
uöt32
 
	mpowî
;

51 
öt16
 
	mãmp
;

52 
uöt16
 
	mpg˙t
;

53 } 
	tªf_vÆues_t
;

55 
ªf_vÆues_t
 
	gªf_loˇl
;

57 
öt16_t
 
	gªf_ãmp_øw
;

60 
uöt8_t
 
	gª˚ivedFcode
 = 0;

61 
tdﬂ_uwb_c⁄f_msg
 
	gc⁄fRxBuff
;

62 
uöt32_t
 
	gc⁄f_∑ckë_Àn
 = (
tdﬂ_uwb_c⁄f_msg
);

63 
boﬁ
 
	gc⁄fSèã
 = 
Ál£
;

69 
uöt8_t
 
	mvB©P
;

70 
uöt8_t
 
	mãmpP
;

71 
uöt8_t
 
	mŸ¥ev
;

72 
uöt16_t
 
	mŸp_mask
;

73 
uöt32_t
 
	mTXpwr_ch1_¥f16
;

74 
uöt32_t
 
	mTXpwr_ch1_¥f64
;

75 
uöt32_t
 
	mTXpwr_ch2_¥f16
;

76 
uöt32_t
 
	mTXpwr_ch2_¥f64
;

77 
uöt32_t
 
	mTXpwr_ch3_¥f16
;

78 
uöt32_t
 
	mTXpwr_ch3_¥f64
;

79 
uöt32_t
 
	mTXpwr_ch4_¥f16
;

80 
uöt32_t
 
	mTXpwr_ch4_¥f64
;

81 
uöt32_t
 
	mTXpwr_ch5_¥f16
;

82 
uöt32_t
 
	mTXpwr_ch5_¥f64
;

83 
uöt32_t
 
	mTXpwr_ch7_¥f16
;

84 
uöt32_t
 
	mTXpwr_ch7_¥f64
;

85 } 
	tŸp_d©a_t
;

87 
Ÿp_d©a_t
 
	gŸp_ªfs
;

95 
	$Dwt_TxˇŒback
(c⁄° 
dwt_ˇŒback_d©a_t
 *
txd
)

97 
blök_£¡
 = 
åue
;

98 
	}
}

104 
	$dw_ª°‹e_‰om_¶ìp
()

106 
	`dwt_£töãºu±
(
DWT_INT_TFRS
, 1);

107 
	}
}

113 
	$DWM1000_öôAndDoHwRe£tPro˚duª
()

119 
	`DW_RST_ON
();

123 
	`dñay_™d_¶ìp
(6, 1, 
åue
);

130 
	`DW_RST_OFF
();

134 
	`dñay_™d_¶ìp
(6, 1, 
åue
);

146 
	`UWB_SPI_pös_íabÀ
();

147 
	`DW_CS_CLR
();

151 
	`dñay_™d_¶ìp
(1, 1, 
åue
);

155 
	`DW_CS_SET
();

161 
	`dñay_™d_¶ìp
(6, 1, 
åue
);

163 
	}
}

169 
uöt32_t
 
	$öô_DWM1000_communiˇti⁄
()

171 if(
baudøã
 !
SPI_BAUDRATE_LOW
)baudøã = 
	`SPI_öô
(SPI_BAUDRATE_LOW);

173 
	`dwt_so·ª£t
();

174 
	`dñay_ms
(100);

176 
uöt32_t
 
devID
 = 
	`dwt_ªaddevid
();

177 i‡(
DWT_DEVICE_ID
 !
devID
)

180 
	`DWM1000_öôAndDoHwRe£tPro˚duª
();

181 
	`dwt_so·ª£t
();

183 
	`DW_CS_CLR
();

184 
	`dñay_™d_¶ìp
(100, 1, 
åue
);

185 
	`DW_CS_SET
();

186 
	`dñay_™d_¶ìp
(100, 1, 
åue
);

187 
devID
 = 
	`dwt_ªaddevid
();

189 i‡(
DWT_DEVICE_ID
 !
devID
)

193 i‡(
	`dwt_öôüli£
(
DWT_LOADUCODE
 ) !
DWT_SUCCESS
)

198 
baudøã
 = 
	`SPI_öô
(
SPI_BAUDRATE_HIGH
);

199 
devID
 = 
	`dwt_ªaddevid
();

201 i‡(
DWT_DEVICE_ID
 !
devID
)

207 
	}
}

209 c⁄° 
uöt16_t
 
	gCRC16_èbÀ
[] = {

244 
	$ˇlcuœã_¸c16
(
uöt16_t
* 
¸c
, 
uöt8_t
* 
d©a
, 
size_t
 
Àngth
)

246 *
¸c
 = 0x0000;

247 
uöt8_t
 
i
=0; i < 
Àngth
-2; i++)

249 *
¸c
 = (*¸¯>> 8Ë^ 
CRC16_èbÀ
[(*¸c^(
uöt16_t
)
d©a
[
i
]) & 0x00ff];

252 
	}
}

257 
	$DWM1000_öô
()

263 
öt32_t
 
ªsu…
 = 
DWT_ERROR
;

265 
ªsu…
 = 
	`öô_DWM1000_communiˇti⁄
();

267 if(
ªsu…
 =
DWT_ERROR
)

270 #ifde‡
WDOG_IN_USE


271 
	`WDOG_íabÀ
(
Ál£
);

274 
	`¥ötf
("ERROR: 1\r\n");

275 
	`do_SWRe£tMCU
(1);

277 
	`DWM1000_öôAndDoHwRe£tPro˚duª
();

278 
	`dwt_so·ª£t
();

286 
uöt32_t
 
lŸid
 = 
	`dwt_gëlŸid
() & 0xfffffff;

287 
uöt32_t
 
∑πid
 = 
	`dwt_gë∑πid
() & 0xfffff;

289 
tdﬂP¨amëîs
.
this_èg_MACaddªss
 = ((
uöt64_t
Ë
lŸid
 << 16Ë| (uöt64_tË
∑πid
;

292 
uöt8_t
 
¥edef_MAC
[6] = {0};

293 
uöt16_t
 
MAC_CRC
 = 0;

294 
uöt16_t
 
ˇlc_CRC
 = 0xFFFF;

296 
	`mem˝y
((*)&
¥edef_MAC
,(*)
PREDEF_MAC_PAGE
, (predef_MAC));

297 
	`mem˝y
((*)&
MAC_CRC
,(*)(
PREDEF_MAC_PAGE
 + (
¥edef_MAC
)),(MAC_CRC));

299 
	`ˇlcuœã_¸c16
(&
ˇlc_CRC
,
¥edef_MAC
, (predef_MAC)+2);

302 if(
MAC_CRC
 =
ˇlc_CRC
)

304 
	`mem˝y
((*)&
tdﬂP¨amëîs
.
this_èg_MACaddªss
,(*)&
¥edef_MAC
,(predef_MAC));

305 
tdﬂP¨amëîs
.
this_èg_MACaddªss
 &
MAC_ADDR_48b_MASK
;

311 
	`dwt_c⁄figuª¶ìp
(
DWT_LOADUCODE
 | 
DWT_PRESRV_SLEEP
 | 
DWT_CONFIG
 | 
DWT_TANDV
,
DWT_WAKE_CS
 | 
DWT_SLP_EN
);

314 
	`dwt_£töãºu±
(
DWT_INT_TFRS
 | 
DWT_INT_RFCG
 | (
DWT_INT_ARFE
 | 
DWT_INT_RFSL
 | 
DWT_INT_SFDT
| 
DWT_INT_RPHE
 | 
DWT_INT_RFCE
 | 
DWT_INT_RFTO
 ),1);

318 
	`dwt_£tˇŒbacks
(
Dwt_TxˇŒback
, 
NULL
 );

324 
	}
}

332 
uöt32_t
 
	$DWM_ªc⁄figuª
()

334 
uöt32_t
 
ªt
=0;

336 
dwt_c⁄fig_t
 
dwt_C⁄fig
;

337 
dwt_txc⁄fig_t
 
dwt_Txc⁄fig
;

341 
dwt_C⁄fig
.
ch™
 = 5;

346 
dwt_C⁄fig
.
phrMode
 = 
DWT_PHRMODE_STD
;

347 
dwt_C⁄fig
.
sfdTO
 = 
DWT_SFDTOC_DEF
;

353 
dwt_C⁄fig
.
d©aR©e
 = 1;

356 c⁄° 
uöt8_t
 
¥ómbÀCfg
[8] = {

357 
DWT_PLEN_4096
,

358 
DWT_PLEN_2048
,

359 
DWT_PLEN_1536
,

360 
DWT_PLEN_1024
,

361 
DWT_PLEN_512
,

362 
DWT_PLEN_256
,

363 
DWT_PLEN_128
,

364 
DWT_PLEN_64
,

367 
dwt_C⁄fig
.
txPªambLígth
 = 
¥ómbÀCfg
[5] ;

370 
dwt_C⁄fig
.
txPªambLígth
) {

371 
DWT_PLEN_4096
:

372 
DWT_PLEN_2048
:

373 
DWT_PLEN_1536
:

374 
dwt_C⁄fig
.
rxPAC
 = 
DWT_PAC64
;

377 
DWT_PLEN_1024
:

378 
dwt_C⁄fig
.
rxPAC
 = 
DWT_PAC32
;

381 
DWT_PLEN_512
:

382 
DWT_PLEN_256
:

383 
dwt_C⁄fig
.
rxPAC
 = 
DWT_PAC16
;

386 
DWT_PLEN_128
:

387 
DWT_PLEN_64
:

388 
dwt_C⁄fig
.
rxPAC
 = 
DWT_PAC8
;

393 
	`DebugMsg
(
RELEASE
, "\ne24");

394 
ªt
 = 1;

398 c⁄° 
uöt8_t
 
¥fCfg
[2] = {

400 
DWT_PRF_16M
,

401 
DWT_PRF_64M
,

406 
dwt_C⁄fig
.
¥f
 = 
¥fCfg
[ 1 ] ;

412 
dwt_C⁄fig
.
txCode
 = 12 ;

413 
dwt_C⁄fig
.
rxCode
 = 12 ;

421 
dwt_C⁄fig
.
nsSFD
 = 1;

424 i‡(
	`dwt_c⁄figuª
(&
dwt_C⁄fig
Ë!
DWT_SUCCESS
)

426 
ªt
 = 1;

433 c⁄° 
uöt8_t
 
txPGdñayC⁄fig
[8] =

445 if(
tdﬂP¨amëîs
.
tx_PG_dñay
 == 0UL)

447 
dwt_Txc⁄fig
.
PGdly
 = 
txPGdñayC⁄fig
[ 
dwt_C⁄fig
.
ch™
];

451 
dwt_Txc⁄fig
.
PGdly
 = 
tdﬂP¨amëîs
.
tx_PG_dñay
;

454 
dwt_Txc⁄fig
.
PGdly
 = 
txPGdñayC⁄fig
[
dwt_C⁄fig
.
ch™
];

456 if(
dwt_C⁄fig
.
d©aR©e
 =
DWT_BR_6M8
)

458 
	`dwt_£tsm¨âxpowî
(1);

462 
	`dwt_£tsm¨âxpowî
(0);

469 
dwt_Txc⁄fig
.
powî
 = 
tdﬂP¨amëîs
.
tx_pwr_Àvñ
;

473 
	`dwt_c⁄figuªtxrf
(&
dwt_Txc⁄fig
);

475  
ªt
;

477 
	}
}

482 
	$DMW1000_wake_up
()

484 
	`UWB_SPI_pös_íabÀ
();

485 
	`DW_CS_CLR
();

486 
	`dñay_™d_¶ìp
(1,1,0);

487 
	`DW_CS_SET
();

488 
	`dñay_™d_¶ìp
(3, 1, 
åue
);

490 
	`dw_ª°‹e_‰om_¶ìp
();

491 
	}
}

496 
	$DM1000_íãr_¶ìp
()

498 
	`dwt_íãr¶ìp
();

499 
	}
}

504 
	$DM1000_íãr_dìp_¶ìp
()

507 
	`dwt_f‹˚åxoff
();

508 
	`dñay_ms
(20);

509 
	`dwt_c⁄figuª¶ìp
(
DWT_LOADUCODE
 | 
DWT_PRESRV_SLEEP
 | 
DWT_CONFIG
 | 
DWT_TANDV
,
DWT_WAKE_CS
 | 
DWT_SLP_EN
);

510 
	`dñay_ms
(20);

511 
	`dwt_íãr¶ìp
();

512 
	`UWB_SPI_pös_dißbÀ
();

513 
	}
}

521 
	$Dwt_RxˇŒback_c⁄f
(c⁄° 
dwt_ˇŒback_d©a_t
 *
rxd
)

523 
ª˚ivedFcode
 = 0;

528 i‡(
rxd
->
evít
 =
DWT_SIG_RX_OKAY
 &&Ñxd->
d©Æígth
 =(
tdﬂ_uwb_c⁄f_msg
))

531 
	`dwt_ªadrxd©a
(&
ª˚ivedFcode
, 1, 0);

533 i‡(
ª˚ivedFcode
 =
UWB_FCODE_CONF
)

536 
	`dwt_ªadrxd©a
((
uöt8_t
*Ë&
c⁄fRxBuff
, 
c⁄f_∑ckë_Àn
, 0);

538 
uöt64_t
 
de°Addr
;

539 
	`mem˝y
(&(
de°Addr
), &(
c⁄fRxBuff
.destAddr),

540 (
c⁄fRxBuff
.
de°Addr
));

542 
de°Addr
 &= ~(0xFFFF000000000000);

544 i‡(
de°Addr
 =
TAG_BROADCAST_ADDR
 || de°Add∏=
tdﬂP¨amëîs
.
this_èg_MACaddªss
)

546 
c⁄fSèã
 = 
åue
;

550 
c⁄fSèã
 = 
Ál£
;

552 
ª˚ivedFcode
 = 0;

553 
	`dwt_f‹˚åxoff
();

554 
	`dwt_rxíabÀ
(0);

561 
c⁄fSèã
 = 
Ál£
;

563 
ª˚ivedFcode
 = 0;

564 
	`dwt_f‹˚åxoff
();

565 
	`dwt_rxíabÀ
(0);

575 
c⁄fSèã
 = 
Ál£
;

577 
ª˚ivedFcode
 = 0;

578 
	`dwt_f‹˚åxoff
();

579 
	`dwt_rxíabÀ
(0);

583 
	}
}

590 
boﬁ
 
	$£tUWB_RX_™d_waô
(
sy°emVÆues_t
 *
sysVÆ
, 
boﬁ
 
rx_a·î_°¨t
)

592 
uöt32_t
 
sysc⁄fbôs
 = 
	`dwt_ªad32bôoff£åeg
(
SYS_CFG_ID
, 0);

593 
	`dwt_íabÀ‰amefûãr
(
DWT_FF_NOTYPE_EN
);

594 
boﬁ
 
ªt
 = (
	`waôF‹C⁄f
(
sysc⁄fbôs
, 
sysVÆ
, 
rx_a·î_°¨t
));

595  
ªt
;

596 
	}
}

603 
	$öôTdﬂP¨amëîs
(
tdﬂP¨amëîs_t
* 
d©a
, 
boﬁ
 
deÁu…VÆues
)

605 
d©a
->
this_èg_MACaddªss
 = 0;

606 if(
deÁu…VÆues
 =
åue
)

608 
d©a
->
ch™√l
 = 
CHANNEL_DEFAULT
;

609 
d©a
->
d©a_øã
 = 
DR_MODE_DEFAULT
;

610 
d©a
->
¥ómbÀ
 = 
PREAMBLE_DEFAULT
;

611 
d©a
->
¥f
 = 
PRF_DEFAULT
;

612 
d©a
->
¥ómCode
 = 
PREAM_CODE_DEFAULT
;

613 
d©a
->
nSfd
 = 
NSFD
;

614 
d©a
->
u£_øndom_devüti⁄
 = 
RANDOM_DEVIATION_DEFAULT
;

615 
d©a
->
‰equícy_of_Eblök
 = 
MCR_LEVEL_DEFAULT
;

616 
d©a
->
mŸi⁄_c⁄åﬁ_mode
 = 
MCR_LEVEL_DEFAULT
;

617 
d©a
->
ª‰esh_øã_ms
 = 
REFRESH_RATE_DEFAULT
;

618 
d©a
->
no_mŸi⁄_ª‰esh_øã
 = 
NO_MOT_REFRESH_RATE_DEFAULT
;

619 
d©a
->
tx_pwr_Àvñ
 = 
TX_LEVEL_DEFAULT
;

623 
d©a
->
ch™√l
 = 0;

624 
d©a
->
d©a_øã
 = 0;

625 
d©a
->
¥ómbÀ
 = 0;

626 
d©a
->
¥f
 = 0;

627 
d©a
->
¥ómCode
 = 0;

628 
d©a
->
nSfd
 = 0;

629 
d©a
->
u£_øndom_devüti⁄
 = 0;

630 
d©a
->
‰equícy_of_Eblök
 = 0;

631 
d©a
->
mŸi⁄_c⁄åﬁ_mode
 = 0;

632 
d©a
->
ª‰esh_øã_ms
 = 0;

633 
d©a
->
tx_pwr_Àvñ
 = 0;

635 
	}
}

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\DWM_routines.h

1 #i‚de‡
DWM_ROUTINES_H_INCLUDED


2 
	#DWM_ROUTINES_H_INCLUDED


	)

9 
	~<°döt.h
>

10 
	~<°dboﬁ.h
>

12 
	~"../TEIA_v¨.h
"

14 
	#DWM_WAKEUP_LINE_ACTIVE_TIME
 550

15 
	#DWM_WAKEUP_LINE_ACTIVE_TICKS_RTC
 21

16 
	#DWM_WAKEUP_XTAL_STAB_TIME
 4

17 
	#DWM_WAKEUP_LINE_ACTIVE_LONG_TIME
 1000

18 

	)

19 
	#PRF_16
 (0)

	)

20 
	#PRF_64
 (1)

	)

22 
	#DR_110k
 (0)

	)

23 
	#DR_850k
 (1)

	)

24 
	#DR_6M8
 (2)

	)

26 
	#PREAM_L_2048
 (2)

	)

27 
	#PREAM_L_1024
 (3)

	)

28 
	#PREAM_L_256
 (5)

	)

29 
	#PREAM_L_128
 (6)

	)

36 vﬁ©ûê
boﬁ
 
	gblök_£¡
;

39 
DWM1000_öô
();

40 
DWM1000_öôAndDoHwRe£tPro˚duª
();

41 
uöt32_t
 
DWM_ªc⁄figuª
();

42 
DMW1000_wake_up
();

43 
DM1000_íãr_¶ìp
();

44 
DM1000_íãr_dìp_¶ìp
();

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\IRQ_handlers.c

3 
	~"p‹t_def.h
"

4 
	~"../TEIA_v¨.h
"

5 
	~"../drivîs/ødios/DWM/deˇ_devi˚_≠i.h
"

6 
	~"≥rùhîÆ.h
"

8 
	$GPIO_IRQ_h™dÀr
(
uöt32_t
 
pö
)

10 
pö
)

12 
DW_IRQ
:

14 
	`dwt_i§
();

15 } 
	`GPIO_PöInGë
(
DW_IRQ
));

18 
ACC_IRQ
:

19 
öt_Êag
.
mŸi⁄_a˘i⁄_dëe˘ed
 = 
åue
;

24 
	}
}

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\IRQ_handlers.h

1 #i‚de‡
IRQ_HANDLERS_H_INCLUDED


2 
	#IRQ_HANDLERS_H_INCLUDED


	)

5 
GPIO_IRQ_h™dÀr
(
uöt32_t
 
pö
);

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\default_set.h

19 #i‚de‡
DEFAULT_SET_H_INCLUDED


20 
	#DEFAULT_SET_H_INCLUDED


	)

22 
	~"£âög.h
"

25 
	#CHANNEL_DEFAULT
 (5)

	)

28 
	#RF_PROFILE_DEFAULT
 (4)

	)

31 
	#DR_MODE_DEFAULT
 (1)

	)

34 
	#PREAMBLE_DEFAULT
 (5)

	)

37 
	#PRF_DEFAULT
 (1)

	)

40 
	#PREAM_CODE_DEFAULT
 (12)

	)

43 
	#NSFD
 (1)

	)

46 
	#RANDOM_DEVIATION_DEFAULT
 (1)

	)

49 
	#MCR_LEVEL_DEFAULT
 (2)

	)

52 
	#MCR_SENS_IMU_DEFAULT
 (12UL | 
LOW_THRESHOLD_FLAG
)

	)

55 
	#MCR_SENS_DEFAULT
 (378UL)

56 

	)

58 
	#EBLINK_DEFAULT
 (0)

	)

61 
	#AHRS_DEFAULT
 (0)

	)

64 
	#RX_PERIOD_DEFAULT
 (0)

	)

67 
	#RX_DURATION_DEFAULT
 (1000)

68 

	)

69 #i‡
PLATFORM
 =
TAG_2_IMU


71 
	#REFRESH_RATE_DEFAULT
 (1000)

72 

	)

73 #ñi‡
PLATFORM
 =
TAG_2_LITE


74 
	#REFRESH_RATE_DEFAULT
 (10000)

76 

	)

78 
	#NO_MOT_REFRESH_RATE_DEFAULT
 (0)

79 

	)

81 
	#BARO_DEFAULT
 (0x00)

	)

84 
	#GYRO_FS_DEFAULT
 (0)

	)

87 
	#ACC_FS_DEFAULT
 (0)

	)

91 
	#MAG_CALIB_MODE_DEFAULT
 (0)

	)

94 
	#TX_LEVEL_DEFAULT
 (0x75757575)

	)

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\my_memcpy.h

1 #i‚de‡
MY_MEMCPY_H_INCLUDED


2 
	#MY_MEMCPY_H_INCLUDED


	)

4 
	~<°ddef.h
>

7 
ölöe
 *
	$mem˝y
(* 
de°
, * 
§c
,c⁄° 
size_t
 
Àn
)

11 
size_t
 
i
=0; i<
Àn
; i++)

13 ((
uöt8_t
*)
de°
)[
i
]=((uöt8_t*)
§c
)[i];

15  
de°
;

16 
	}
}

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\peripheral.c

2 
	~"≥rùhîÆ.h
"

3 
	~"£âög.h
"

4 
	~"p‹t_def.h
"

5 
	~"ƒf_drv_gpiŸe.h
"

6 
	~"ƒf_drv_•i.h
"

7 
	~"ƒf_drv_twi.h
"

8 
	~"ƒf_drv_˛ock.h
"

9 
	~"ƒf_drv_πc.h
"

10 
	~"ƒf_drv_powî.h
"

11 
	~"ƒf_drv_wdt.h
"

12 
	~"ƒf_drv_ßadc.h
"

13 
	~"ƒf_nvmc.h
"

14 
	~<°rög.h
>

15 
	~<°d¨g.h
>

16 
	~"SEGGER_RTT.h
"

17 
	~"timög.h
"

18 
	~"IRQ_h™dÀrs.h
"

19 
	~"../TEIA_v¨.h
"

21 
	~"≠p_u¨t.h
"

22 
	~"≠p_îr‹.h
"

23 
	~"ƒf_dñay.h
"

24 
	~"ƒf.h
"

25 
	~"b•.h
"

27 vﬁ©ûê
boﬁ
 
	gTAG_SHUTDOWNED
 = 
Ál£
;

32 
	$_wrôe
(
fûe
, *
±r
, 
Àn
)

34 
i
=0;

35 
uöt8_t
 
¸
;

36 
i
=0 ; i<
Àn
 ; i++) {

37 
¸
 = *
±r
++;

38 
	`≠p_u¨t_put
(
¸
Ë!
NRF_SUCCESS
);

40  
Àn
;

41 
	}
}

43 
	$u¨t_îr‹_h™dÀ
(
≠p_u¨t_evt_t
 * 
p_evít
)

45 i‡(
p_evít
->
evt_ty≥
 =
APP_UART_COMMUNICATION_ERROR
)

47 
	`APP_ERROR_HANDLER
(
p_evít
->
d©a
.
îr‹_communiˇti⁄
);

49 i‡(
p_evít
->
evt_ty≥
 =
APP_UART_FIFO_ERROR
)

51 
	`APP_ERROR_HANDLER
(
p_evít
->
d©a
.
îr‹_code
);

53 
	}
}

55 
	$UART_Unöô
()

57 
	`≠p_u¨t_˛o£
();

58 
	}
}

60 
	$UART_Inô
()

62 
uöt32_t
 
îr_code
;

63 c⁄° 
≠p_u¨t_comm_∑øms_t
 
comm_∑øms
 = {

64 11, 5, 0xFFFFFFFF, 0xFFFFFFFF, 0, 
Ál£
,

65 
UART_BAUDRATE_BAUDRATE_Baud115200


67 
	`APP_UART_INIT
(&
comm_∑øms
,
u¨t_îr‹_h™dÀ
,

68 
APP_IRQ_PRIORITY_LOW
, 
îr_code
);

69 
	`APP_ERROR_CHECK
(
îr_code
);

70 
	}
}

73 
	$LED2_ON
()

75 
	`ƒf_gpio_pö_˛ór
(
USER_LED1
);

76 
	}
}

77 
	$LED2_OFF
()

79 
	`ƒf_gpio_pö_£t
(
USER_LED1
);

80 
	}
}

82 
	$PB_LED1_ON
()

84 
	`ƒf_gpio_pö_˛ór
(
USER_PB_LED1
);

85 
	}
}

86 
	$PB_LED1_OFF
()

88 
	`ƒf_gpio_pö_£t
(
USER_PB_LED1
);

89 
	}
}

90 
	$LED_TOGGLE
(
i
)

92 
	`ƒf_gpio_cfg_ouçut
(
i
);

93 
	`ƒf_gpio_cfg
(
i
,
NRF_GPIO_PIN_DIR_OUTPUT
,
NRF_GPIO_PIN_INPUT_DISCONNECT
,
NRF_GPIO_PIN_NOPULL
,
GPIO_PIN_CNF_DRIVE_S0H1
,
NRF_GPIO_PIN_NOSENSE
);

94 
	`ƒf_gpio_pö_toggÀ
(
i
);

95 
	}
}

96 
	$PB_LED1_TOGGLE
()

98 
	`ƒf_gpio_pö_toggÀ
(
USER_PB_LED1
);

99 
	}
}

101 
	$LED1_TOGGLE
()

103 
	`ƒf_gpio_pö_toggÀ
(
USER_PB_LED1
);

104 
	}
}

106 
	$LORA_dübÀ
()

108 
	`ƒf_gpio_cfg_öput
(
LORA_RESET
,
NRF_GPIO_PIN_PULLUP
);

109 
	`ƒf_gpio_cfg_öput
(
LORA_WAKEUP
,
NRF_GPIO_PIN_PULLUP
);

110 
	}
}

112 
	$DW_RST_ON
()

114 
	`ƒf_gpio_pö_˛ór
(
DW_RST
);

115 
	`ƒf_gpio_cfg_ouçut
(
DW_RST
);

116 
	}
}

118 
	$DW_RST_OFF
()

120 
	`ƒf_gpio_cfg_öput
(
DW_RST
,
NRF_GPIO_PIN_NOPULL
);

121 
	}
}

123 
	$DW_CS_CLR
()

125 
	`ƒf_gpio_pö_˛ór
(
SPI_CS
);

126 
	}
}

128 
	$DW_CS_SET
()

130 
	`ƒf_gpio_pö_£t
(
SPI_CS
);

131 
	}
}

133 
	$FLASH_CS_CLR
()

135 
	`ƒf_gpio_pö_˛ór
(
SPI_CS_FLASH
);

136 
	}
}

138 
	$FLASH_CS_SET
()

140 
	`ƒf_gpio_pö_£t
(
SPI_CS_FLASH
);

141 
	}
}

143 
	$ADC_RDIV_PULL_DOWN
()

145 
	`ƒf_gpio_pö_˛ór
(
ADC_RDIV
);

146 
	}
}

148 
	$ADC_RDIV_PULL_UP
()

150 
	`ƒf_gpio_pö_£t
(
ADC_RDIV
);

151 
	}
}

153 
	$ADC_MEAS_PIN_PULL_UP
()

156 
	`ƒf_gpio_cfg_öput
(
ADC_MEAS
,
NRF_GPIO_PIN_PULLUP
);

157 
	}
}

159 
	$ADC_MEAS_PIN_BYPASS
()

162 
	`ƒf_gpio_cfg_öput
(
ADC_MEAS
,
NRF_GPIO_PIN_NOPULL
);

163 
	}
}

165 
boﬁ
 
	$GPIO_PöInGë
(
uöt32_t
 
pö
)

167  (
boﬁ
)
	`ƒf_gpio_pö_ªad
(
pö
);

168 
	}
}

171 
	$NFC_PWR_ON
()

173 
	`ƒf_gpio_pö_£t
(
NFC_PWR
);

174 
	`I2C_c⁄fig
(
I2C_FREQ_STD
);

175 
	}
}

177 
	$NFC_PWR_OFF
()

179 
	`ƒf_gpio_pö_˛ór
(
NFC_PWR
);

180 
	`I2C_c⁄fig
(
I2C_FREQ_FAST
);

181 
	}
}

183 
	$PB_LDO_SET
()

185 
	`ƒf_gpio_pö_£t
(
PB_LDO
);

186 
	}
}

193 
boﬁ
 
	$gë_CHG_°©us
()

195  (
	`ƒf_gpio_pö_ªad
(
CHG_STATUS
));

196 
	}
}

198 
boﬁ
 
	$gë_ACC_INT_pö_°©us
()

200  (
	`ƒf_gpio_pö_ªad
(
ACC_IRQ
));

201 
	}
}

203 
boﬁ
 
	$gë_FD_°©e
()

205  
	`ƒf_gpio_pö_ªad
(
NFC_FD
);

206 
	}
}

209 
	$UWB_GPIO_öô
()

211 
	`ƒf_gpio_cfg_ouçut
(
SPI_MOSI
);

212 
	`ƒf_gpio_cfg_ouçut
(
SPI_SCK
);

213 
	`ƒf_gpio_cfg_ouçut
(
SPI_CS
);

214 
	`ƒf_gpio_cfg_öput
(
SPI_MISO
,
NRF_GPIO_PIN_NOPULL
);

215 
	}
}

217 
	$Fœsh_GPIO_öô
()

219 
	`ƒf_gpio_cfg_ouçut
(
SPI_MOSI_FLASH
);

220 
	`ƒf_gpio_cfg_ouçut
(
SPI_SCK_FLASH
);

221 
	`ƒf_gpio_cfg_ouçut
(
SPI_CS_FLASH
);

222 
	`ƒf_gpio_cfg_öput
(
SPI_MISO_FLASH
,
NRF_GPIO_PIN_NOPULL
);

223 
	}
}

225 
	$GPIOs_öô
()

228 
	`ƒf_gpio_cfg_ouçut
(
LORA_WAKEUP
);

229 
	`ƒf_gpio_pö_£t
(
USER_LED1
);

230 
	`ƒf_gpio_cfg_ouçut
(
USER_LED1
);

231 
	`ƒf_gpio_cfg
(
USER_LED1
,
NRF_GPIO_PIN_DIR_OUTPUT
,
NRF_GPIO_PIN_INPUT_DISCONNECT
,
NRF_GPIO_PIN_NOPULL
,
GPIO_PIN_CNF_DRIVE_H0H1
,
NRF_GPIO_PIN_NOSENSE
);

232 
	`ƒf_gpio_pö_£t
(
USER_PB_LED1
);

233 
	`ƒf_gpio_cfg_ouçut
(
USER_PB_LED1
);

234 
	`ƒf_gpio_cfg
(
USER_PB_LED1
,
NRF_GPIO_PIN_DIR_OUTPUT
,
NRF_GPIO_PIN_INPUT_DISCONNECT
,
NRF_GPIO_PIN_NOPULL
,
GPIO_PIN_CNF_DRIVE_H0H1
,
NRF_GPIO_PIN_NOSENSE
);

237 
	`ƒf_gpio_cfg_ouçut
(
SPI_MOSI
);

238 
	`ƒf_gpio_cfg_ouçut
(
SPI_SCK
);

239 
	`ƒf_gpio_cfg_ouçut
(
SPI_CS
);

240 
	`ƒf_gpio_cfg_öput
(
SPI_MISO
,
NRF_GPIO_PIN_NOPULL
);

243 
	`ƒf_gpio_cfg_öput
(
ACC_IRQ
,
NRF_GPIO_PIN_PULLDOWN
);

244 
	`ƒf_gpio_cfg_öput
(
PB_LDO
,
NRF_GPIO_PIN_PULLUP
);

252 
	`ƒf_gpio_cfg_öput
(
DW_IRQ
,
NRF_GPIO_PIN_PULLDOWN
);

253 
	`ƒf_gpio_öput_disc⁄√˘
(
DW_RST
);

254 
	`ƒf_gpio_öput_disc⁄√˘
(9);

257 
	`ƒf_gpio_cfg_ouçut
(
ADC_RDIV
);

258 
	`ƒf_gpio_pö_£t
(
ADC_RDIV
);

260 
	`ƒf_gpio_cfg_öput
(
ADC_MEAS
,
NRF_GPIO_PIN_PULLUP
);

261 
	`ƒf_gpio_cfg_öput
(
CHG_STATUS
,
NRF_GPIO_PIN_PULLUP
);

262 
	}
}

266 
	#I2C_TRANSFER_DONE
 0

	)

267 
	#I2C_DEVICE_NOT_RESP
 1

	)

268 
	#TWI_INSTANCE_ID
 1

	)

269 
	#I2C_FREQ_100k
 (26738688Ë

	)

270 
	#I2C_FREQ_250k
 (67108864Ë

	)

271 
	#I2C_FREQ_400k
 (104857600Ë

	)

274 c⁄° 
ƒf_drv_twi_t
 
	gi2c
 = 
NRF_DRV_TWI_INSTANCE
(
TWI_INSTANCE_ID
);

275 
uöt8_t
 
	gi2c_å™s„r_com∂ëe
 = 
Ál£
;

277 
	$I2C_h™dÀr
(
ƒf_drv_twi_evt_t
 c⁄° * 
p_evít
, * 
p_c⁄ãxt
)

279 
p_evít
->
ty≥
) {

280 
NRF_DRV_TWI_EVT_DONE
:

281 
i2c_å™s„r_com∂ëe
 = 
åue
;

284 
i2c_å™s„r_com∂ëe
 = 
åue
;

287 
	}
}

289 
	$I2C_íabÀ
()

291 
	`ƒf_drv_twi_íabÀ
(&
i2c
);

292 
	}
}

294 
	$I2C_c⁄fig
(
uöt16_t
 
‰eq_kHz
)

296 
	`ƒf_gpio_cfg_ouçut
(
I2C_SCL
);

297 
	`ƒf_gpio_cfg_öput
(
I2C_SDA
,
NRF_GPIO_PIN_NOPULL
);

299 
uöt8_t
 
i
 = 0; i<9; i++) {

300 
	`ƒf_gpio_pö_˛ór
(
I2C_SCL
);

301 
	`dñay_us
(5);

302 
	`ƒf_gpio_pö_£t
(
I2C_SCL
);

303 
	`dñay_us
(5);

305 
ƒf_drv_twi_c⁄fig_t
 
i2c_c⁄fig
 = 
NRF_DRV_TWI_DEFAULT_CONFIG
;

306 
i2c_c⁄fig
.
s˛
 = 
I2C_SCL
;

307 
i2c_c⁄fig
.
sda
 = 
I2C_SDA
;

309 if(
‰eq_kHz
 =100Ë
i2c_c⁄fig
.
‰equícy
 = 
I2C_FREQ_100k
;

310 if(
‰eq_kHz
 =250Ë
i2c_c⁄fig
.
‰equícy
 = 
I2C_FREQ_250k
;

311 if(
‰eq_kHz
 =400Ë
i2c_c⁄fig
.
‰equícy
 = 
I2C_FREQ_400k
;

312 
	`ƒf_drv_twi_öô
(&
i2c
,&
i2c_c⁄fig
,
I2C_h™dÀr
,
NULL
);

313 
	`ƒf_drv_twi_íabÀ
(&
i2c
);

314 
	}
}

316 
	$I2C_dißbÀ
()

318 
	`ƒf_drv_twi_dißbÀ
(&
i2c
);

319 
	`ƒf_gpio_cfg_öput
(
I2C_SCL
,
NRF_GPIO_PIN_NOPULL
);

320 
	`ƒf_gpio_cfg_öput
(
I2C_SDA
,
NRF_GPIO_PIN_NOPULL
);

321 
	}
}

323 
	$I2C_dißbÀ_
()

325 
	`ƒf_drv_twi_dißbÀ
(&
i2c
);

326 
	}
}

328 
uöt8_t
 
	$I2CDRV_ªadFromRegi°î
(
uöt8_t
 
devi˚_addr
, uöt8_à
ªg_addr
)

330 
uöt8_t
 
ªg_d©a
;

332 
i2c_å™s„r_com∂ëe
 = 
Ál£
;

333 
	`ƒf_drv_twi_tx
(&
i2c
,
devi˚_addr
,&
ªg_addr
,1,
åue
);

334 !
i2c_å™s„r_com∂ëe
);

335 
i2c_å™s„r_com∂ëe
 = 
Ál£
;

336 
	`ƒf_drv_twi_rx
(&
i2c
,
devi˚_addr
,&
ªg_d©a
,1);

337 !
i2c_å™s„r_com∂ëe
);

338  
ªg_d©a
;

339 
	}
}

340 
uöt8_t
 
	$I2CDRV_bur°_ªadFromRegi°î
(
uöt8_t
 
devi˚_addr
, uöt8_à
ªg_addr
,uöt8_à
Àngth
, uöt8_à*
d©a
 )

343 
uöt8_t
 
ªt
 = 0;

345 
i2c_å™s„r_com∂ëe
 = 
Ál£
;

346 
	`ƒf_drv_twi_tx
(&
i2c
,
devi˚_addr
,&
ªg_addr
,1,
åue
);

347 !
i2c_å™s„r_com∂ëe
);

349 
i2c_å™s„r_com∂ëe
 = 
Ál£
;

350 
	`ƒf_drv_twi_rx
(&
i2c
,
devi˚_addr
,
d©a
,
Àngth
);

351 !
i2c_å™s„r_com∂ëe
);

353  
ªt
;

354 
	}
}

356 
uöt8_t
 
	$I2CDRV_bur°_wrôeToRegi°î
(
uöt8_t
 
devi˚_addr
, uöt8_à
ªg_addr
,uöt8_à
Àngth
, uöt8_à*
d©a
 )

359 
uöt8_t
 
ªt
 = 0;

361 
uöt8_t
 
i2c_d©a
[17];

362 
i2c_d©a
[0] = 
ªg_addr
;

363 
	`mem˝y
(&
i2c_d©a
[1],
d©a
, 
Àngth
);

365 
i2c_å™s„r_com∂ëe
 = 
Ál£
;

366 
	`ƒf_drv_twi_tx
(&
i2c
,
devi˚_addr
,
i2c_d©a
,
Àngth
+1,
Ál£
);

367 !
i2c_å™s„r_com∂ëe
);

374  
ªt
;

375 
	}
}

377 
	$I2CDRV_wrôeToRegi°î
(
uöt8_t
 
devi˚_addr
, uöt8_à
ªg_addr
, uöt8_à
d©a
)

379 
uöt8_t
 
tx_buff
[2];

381 
tx_buff
[0] = 
ªg_addr
;

382 
tx_buff
[1] = 
d©a
;

384 
i2c_å™s„r_com∂ëe
 = 
Ál£
;

385 
	`ƒf_drv_twi_tx
(&
i2c
,
devi˚_addr
,
tx_buff
,2,
Ál£
);

386 !
i2c_å™s„r_com∂ëe
);

387 
	}
}

395 
	#SPI_INSTANCE
 0

	)

396 
	#SPI_DEFAULT_CONFIG_IRQ_PRIORITY
 6

	)

398 c⁄° 
ƒf_drv_•i_t
 
	g•i
 = 
NRF_DRV_SPI_INSTANCE
(
SPI_INSTANCE
);

399 
boﬁ
 
	g•i_å™s„r_com∂ëe
 = 
Ál£
;

401 
	$Fœsh_SPI_pös_íabÀ
()

403 
	`ƒf_gpio_pö_˛ór
(
SPI_MOSI_FLASH
);

404 
	`ƒf_gpio_cfg_ouçut
(
SPI_MOSI_FLASH
);

405 
	`ƒf_gpio_pö_˛ór
(
SPI_SCK_FLASH
);

406 
	`ƒf_gpio_cfg_ouçut
(
SPI_SCK_FLASH
);

407 
	`ƒf_gpio_pö_£t
(
SPI_CS_FLASH
);

408 
	`ƒf_gpio_cfg_ouçut
(
SPI_CS_FLASH
);

409 
	`ƒf_gpio_cfg_öput
(
SPI_MISO_FLASH
,
NRF_GPIO_PIN_NOPULL
);

410 
	}
}

411 
	$UWB_SPI_pös_íabÀ
()

413 
	`ƒf_gpio_pö_˛ór
(
SPI_MOSI
);

414 
	`ƒf_gpio_cfg_ouçut
(
SPI_MOSI
);

415 
	`ƒf_gpio_pö_˛ór
(
SPI_SCK
);

416 
	`ƒf_gpio_cfg_ouçut
(
SPI_SCK
);

417 
	`ƒf_gpio_pö_£t
(
SPI_CS
);

418 
	`ƒf_gpio_cfg_ouçut
(
SPI_CS
);

419 
	`ƒf_gpio_cfg_öput
(
SPI_MISO
,
NRF_GPIO_PIN_NOPULL
);

420 
	}
}

421 
	$UWB_SPI_pös_dißbÀ
()

423 
	`ƒf_gpio_cfg_öput
(
SPI_MOSI
,
NRF_GPIO_PIN_NOPULL
);

424 
	`ƒf_gpio_cfg_öput
(
SPI_CS
,
NRF_GPIO_PIN_PULLUP
);

425 
	`ƒf_gpio_cfg_öput
(
SPI_MISO
,
NRF_GPIO_PIN_NOPULL
);

426 
	}
}

427 
	$Fœsh_SPI_pös_dißbÀ
()

429 
	`ƒf_gpio_cfg_öput
(
SPI_MOSI_FLASH
,
NRF_GPIO_PIN_NOPULL
);

430 
	`ƒf_gpio_cfg_öput
(
SPI_CS_FLASH
,
NRF_GPIO_PIN_PULLUP
);

431 
	`ƒf_gpio_cfg_öput
(
SPI_MISO_FLASH
,
NRF_GPIO_PIN_NOPULL
);

432 
	}
}

434 
	$•i_evít_h™dÀr
(
ƒf_drv_•i_evt_t
 c⁄° * 
p_evít
)

436 
•i_å™s„r_com∂ëe
 = 
åue
;

437 
	}
}

439 
uöt16_t
 
	$Fœsh_SPI_öô
(
uöt16_t
 
‰eq_kHz
)

441 
	`ƒf_drv_•i_unöô
(&
•i
);

442 
uöt16_t
 
ªt
 = 0;

443 
ƒf_drv_•i_c⁄fig_t
 
•i_c⁄fig
 = 
NRF_DRV_SPI_DEFAULT_CONFIG
;

444 
•i_c⁄fig
.
miso_pö
 = 
SPI_MISO_FLASH
;

445 
•i_c⁄fig
.
mosi_pö
 = 
SPI_MOSI_FLASH
;

446 
•i_c⁄fig
.
sck_pö
 = 
SPI_SCK_FLASH
;

447 
•i_c⁄fig
.
ss_pö
 = 
NRF_DRV_SPI_PIN_NOT_USED
;

448 i‡(
‰eq_kHz
>8000Ë{
•i_c⁄fig
.
‰equícy
 = 
NRF_DRV_SPI_FREQ_8M
; 
ªt
 = 8000;}

449 i‡(
‰eq_kHz
>4000Ë{
•i_c⁄fig
.
‰equícy
 = 
NRF_DRV_SPI_FREQ_4M
; 
ªt
 = 4000;}

450 i‡(
‰eq_kHz
>2000Ë{
•i_c⁄fig
.
‰equícy
 = 
NRF_DRV_SPI_FREQ_2M
; 
ªt
 = 2000;}

451 i‡(
‰eq_kHz
>1000Ë{
•i_c⁄fig
.
‰equícy
 = 
NRF_DRV_SPI_FREQ_1M
; 
ªt
 = 1000;}

452 i‡(
‰eq_kHz
>500Ë{
•i_c⁄fig
.
‰equícy
 = 
NRF_DRV_SPI_FREQ_500K
;
ªt
 = 500;}

453 i‡(
‰eq_kHz
>250Ë{
•i_c⁄fig
.
‰equícy
 = 
NRF_DRV_SPI_FREQ_250K
;
ªt
 = 250;}

454 {
•i_c⁄fig
.
‰equícy
 = 
NRF_DRV_SPI_FREQ_125K
;
ªt
 = 125;}

455 
	`ƒf_drv_•i_öô
(&
•i
,&
•i_c⁄fig
,
•i_evít_h™dÀr
);

456  
ªt
;

457 
	}
}

459 
uöt16_t
 
	$SPI_öô
(
uöt16_t
 
‰eq_kHz
)

461 
	`ƒf_drv_•i_unöô
(&
•i
);

462 
uöt16_t
 
ªt
 = 0;

463 
ƒf_drv_•i_c⁄fig_t
 
•i_c⁄fig
 = 
NRF_DRV_SPI_DEFAULT_CONFIG
;

464 
•i_c⁄fig
.
miso_pö
 = 
SPI_MISO
;

465 
•i_c⁄fig
.
mosi_pö
 = 
SPI_MOSI
;

466 
•i_c⁄fig
.
sck_pö
 = 
SPI_SCK
;

467 
•i_c⁄fig
.
ss_pö
 = 
NRF_DRV_SPI_PIN_NOT_USED
;

468 i‡(
‰eq_kHz
>8000Ë{
•i_c⁄fig
.
‰equícy
 = 
NRF_DRV_SPI_FREQ_8M
; 
ªt
 = 8000;}

469 i‡(
‰eq_kHz
>4000Ë{
•i_c⁄fig
.
‰equícy
 = 
NRF_DRV_SPI_FREQ_4M
; 
ªt
 = 4000;}

470 i‡(
‰eq_kHz
>2000Ë{
•i_c⁄fig
.
‰equícy
 = 
NRF_DRV_SPI_FREQ_2M
; 
ªt
 = 2000;}

471 i‡(
‰eq_kHz
>1000Ë{
•i_c⁄fig
.
‰equícy
 = 
NRF_DRV_SPI_FREQ_1M
; 
ªt
 = 1000;}

472 i‡(
‰eq_kHz
>500Ë{
•i_c⁄fig
.
‰equícy
 = 
NRF_DRV_SPI_FREQ_500K
;
ªt
 = 500;}

473 i‡(
‰eq_kHz
>250Ë{
•i_c⁄fig
.
‰equícy
 = 
NRF_DRV_SPI_FREQ_250K
;
ªt
 = 250;}

474 {
•i_c⁄fig
.
‰equícy
 = 
NRF_DRV_SPI_FREQ_125K
;
ªt
 = 125;}

475 
	`ƒf_drv_•i_öô
(&
•i
,&
•i_c⁄fig
,
•i_evít_h™dÀr
);

476  
ªt
;

477 
	}
}

479 
	$Êash_wrôe_íabÀ_•i
()

481 
uöt8_t
 
ãmp
;

482 
uöt8_t
 
wrôe_íabÀ_cmd
;

484 
wrôe_íabÀ_cmd
 = 0x06;

486 
	`FLASH_CS_CLR
();

487 
•i_å™s„r_com∂ëe
 = 
Ál£
;

488 
	`ƒf_drv_•i_å™s„r
(&
•i
, &
wrôe_íabÀ_cmd
,1 ,&
ãmp
, 0);

489 
•i_å™s„r_com∂ëe
 =
Ál£
);

491 
	`FLASH_CS_SET
();

492 
	`dñay_us
(20);

493 
	}
}

495 
	$Êash_Block_Eø£_•i
(
uöt32_t
 
addªss
)

497 
uöt8_t
 
hódîBuf„r
[3];

498 
uöt8_t
 
ãmp
;

499 
uöt8_t
 
Block_îa£_cmd
;

500 
Block_îa£_cmd
 = 0x20;

502 
hódîBuf„r
[0] = (
uöt8_t
)((
addªss
 >> 16) & 0xff);

503 
hódîBuf„r
[1] = (
uöt8_t
)((
addªss
 >> 8) & 0xff);

504 
hódîBuf„r
[2] = (
uöt8_t
)(
addªss
 & 0xff);

507 
	`Êash_wrôe_íabÀ_•i
();

509 
	`FLASH_CS_CLR
();

510 
•i_å™s„r_com∂ëe
 = 
Ál£
;

511 
	`ƒf_drv_•i_å™s„r
(&
•i
, &
Block_îa£_cmd
,1 ,&
ãmp
, 0);

512 
•i_å™s„r_com∂ëe
 =
Ál£
);

514 
•i_å™s„r_com∂ëe
 = 
Ál£
;

515 
	`ƒf_drv_•i_å™s„r
(&
•i
, 
hódîBuf„r
,3 ,&
ãmp
, 0);

516 
•i_å™s„r_com∂ëe
 =
Ál£
);

518 
	`FLASH_CS_SET
();

519 
	`dñay_ms
(400);

520 
	}
}

522 
	$Êash_îa£_•i
()

524 
uöt8_t
 
ãmp
;

525 
uöt8_t
 
îa£_cmd
;

527 
îa£_cmd
 = 0x60;

529 
	`Êash_wrôe_íabÀ_•i
();

531 
	`FLASH_CS_CLR
();

532 
•i_å™s„r_com∂ëe
 = 
Ál£
;

533 
	`ƒf_drv_•i_å™s„r
(&
•i
, &
îa£_cmd
,1 ,&
ãmp
, 0);

534 
•i_å™s„r_com∂ëe
 =
Ál£
);

535 
	`FLASH_CS_SET
();

536 
	`dñay_ms
(10000);

537 
	}
}

539 
	$Êash_ªad_•i
(
uöt32_t
 
addªss
, uöt32_à
ªadÀngth
,
uöt8_t
 *
ªadBuf„r
)

541 
uöt8_t
 
hódîBuf„r
[4];

542 
uöt8_t
 
ãmp
;

543 
uöt8_t
 
buff
[4];

544 
uöt8_t
 
ªad_cmd
;

546 
ªad_cmd
 = 0x0B;

547 
hódîBuf„r
[0] = (
uöt8_t
)((
addªss
 >> 16) & 0xff);

548 
hódîBuf„r
[1] = (
uöt8_t
)((
addªss
 >> 8) & 0xff);

549 
hódîBuf„r
[2] = (
uöt8_t
)(
addªss
 & 0xff);

550 
hódîBuf„r
[3] = 0x00;

552 
	`FLASH_CS_CLR
();

553 
•i_å™s„r_com∂ëe
 = 
Ál£
;

554 
	`ƒf_drv_•i_å™s„r
(&
•i
, &
ªad_cmd
,1 ,&
ãmp
, 0);

555 
•i_å™s„r_com∂ëe
 =
Ál£
);

558 
•i_å™s„r_com∂ëe
 = 
Ál£
;

559 
	`ƒf_drv_•i_å™s„r
(&
•i
, 
hódîBuf„r
,4 ,&
ãmp
, 0);

560 
•i_å™s„r_com∂ëe
 =
Ál£
);

563 
•i_å™s„r_com∂ëe
 = 
Ál£
;

564 
	`ƒf_drv_•i_å™s„r
(&
•i
, 
buff
,4,
ªadBuf„r
,
ªadÀngth
);

565 
•i_å™s„r_com∂ëe
 =
Ál£
);

567 
	`FLASH_CS_SET
();

569 
	}
}

571 
	$ªad‰om•i
(
uöt16_t
 
hódîLígth
, 
uöt8_t
 *
hódîBuf„r
, 
uöt32_t
 
ªadÀngth
,uöt8_à*
ªadBuf„r
)

573 
uöt8_t
 
ãmp
;

574 
uöt8_t
 
buff
[4];

576 
	`DW_CS_CLR
();

578 
•i_å™s„r_com∂ëe
 = 
Ál£
;

579 
	`ƒf_drv_•i_å™s„r
(&
•i
, 
hódîBuf„r
,
hódîLígth
,&
ãmp
,0);

580 
•i_å™s„r_com∂ëe
 =
Ál£
);

583 
•i_å™s„r_com∂ëe
 = 
Ál£
;

584 
	`ƒf_drv_•i_å™s„r
(&
•i
, 
buff
,4,
ªadBuf„r
,
ªadÀngth
);

585 
•i_å™s„r_com∂ëe
 =
Ál£
);

586 
	`DW_CS_SET
();

589 
	}
}

591 
	$Êash_wrôe_•i
(
uöt32_t
 
addªss
, uöt32_à
bodyÀngth
, 
uöt8_t
 *
bodyBuf„r
)

593 
uöt8_t
 
hódîBuf„r
[3];

594 
uöt8_t
 
ãmp
;

595 
uöt8_t
 
wrôe_cmd
;

596 
wrôe_cmd
 = 0x02;

598 
hódîBuf„r
[0] = (
uöt8_t
)((
addªss
 >> 16) & 0xff);

599 
hódîBuf„r
[1] = (
uöt8_t
)((
addªss
 >> 8) & 0xff);

600 
hódîBuf„r
[2] = (
uöt8_t
)(
addªss
 & 0xff);

602 
	`Êash_wrôe_íabÀ_•i
();

604 
	`FLASH_CS_CLR
();

605 
•i_å™s„r_com∂ëe
 = 
Ál£
;

606 
	`ƒf_drv_•i_å™s„r
(&
•i
, &
wrôe_cmd
,1 ,&
ãmp
, 0);

607 
•i_å™s„r_com∂ëe
 =
Ál£
);

610 
•i_å™s„r_com∂ëe
 = 
Ál£
;

611 
	`ƒf_drv_•i_å™s„r
(&
•i
, 
hódîBuf„r
,3,&
ãmp
,0);

612 
•i_å™s„r_com∂ëe
 =
Ál£
);

615 
•i_å™s„r_com∂ëe
 = 
Ál£
;

616 
	`ƒf_drv_•i_å™s„r
(&
•i
, 
bodyBuf„r
,
bodyÀngth
,&
ãmp
,0);

617 
•i_å™s„r_com∂ëe
 =
Ál£
);

619 
	`FLASH_CS_SET
();

621 
	}
}

623 
	$wrôëo•i
(
uöt16_t
 
hódîLígth
, 
uöt8_t
 *
hódîBuf„r
, 
uöt32_t
 
bodyÀngth
, uöt8_à*
bodyBuf„r
)

626 
uöt8_t
 
ãmp
;

628 
	`DW_CS_CLR
();

630 
•i_å™s„r_com∂ëe
 = 
Ál£
;

631 
	`ƒf_drv_•i_å™s„r
(&
•i
, 
hódîBuf„r
,
hódîLígth
,&
ãmp
,0);

632 
•i_å™s„r_com∂ëe
 =
Ál£
);

635 
•i_å™s„r_com∂ëe
 = 
Ál£
;

636 
	`ƒf_drv_•i_å™s„r
(&
•i
, 
bodyBuf„r
,
bodyÀngth
,&
ãmp
,0);

637 
•i_å™s„r_com∂ëe
 =
Ál£
);

638 
	`DW_CS_SET
();

640 
	}
}

647 
	$DebugMsg
(
uöt8_t
 
¥öåﬁe
, *
Så
, ...)

650 
	}
}

655 
	$˛ock_c⁄figuøti⁄
()

658 
uöt32_t
 
îr_code
;

659 
îr_code
 = 
	`ƒf_drv_˛ock_öô
();

660 
	`APP_ERROR_CHECK
(
îr_code
);

661 if(!
	`ƒf_drv_˛ock_lf˛k_is_ru¬ög
())

663 
	`ƒf_drv_˛ock_lf˛k_ªque°
(
NULL
);

665 
	}
}

670 c⁄° 
ƒf_drv_πc_t
 
	gπc0
 = 
NRF_DRV_RTC_INSTANCE
(0);

671 c⁄° 
ƒf_drv_πc_t
 
	gπc1
 = 
NRF_DRV_RTC_INSTANCE
(1);

672 c⁄° 
ƒf_drv_πc_t
 
	gπc2
 = 
NRF_DRV_RTC_INSTANCE
(2);

674 
	#PB_PRS
 (0Ë

	)

675 
	#PB_RLS
 (1Ë

	)

676 
	#PB_TIMEOUT
 (2Ë

	)

679 
	$PB_h™dÀr
(
uöt8_t
 
Êag
)

681 
uöt32_t
 
PB_¥s_time°amp
 = 0;

682 
uöt32_t
 
PB_æs_time°amp
 = 0;

683 
uöt8_t
 
sh‹t_¥ess_˙t
 = 0;

684 
boﬁ
 
timî_l⁄g
 = 
Ál£
;

685 
boﬁ
 
timî_sh‹t
 = 
Ál£
;

686 
boﬁ
 
timî_vîy_l⁄g
 = 
Ál£
;

688 if(
Êag
 =
PB_PRS
){

689 
PB_¥s_time°amp
 = 
	`gë_RTC_time°amp
(
åue
);

690 
	`RTC_CC_£t
(
RTC_dñay_ö°™˚
,
PB_CC_ªg
,((
PB_¥s_time°amp
 + 
USER_PB_LONG_PRESS_TICK
)&0x00FFFFFF),
åue
);

691 
timî_l⁄g
 = 
åue
;

692 if(((
PB_¥s_time°amp
 - 
PB_æs_time°amp
Ë>
USER_PB_LONG_PRESS_TICK
Ë|| ((PB_¥s_time°am∞- PB_æs_time°ampË< 
USER_PB_SHORT_PRESS_TICK
))

694 
sh‹t_¥ess_˙t
 = 0;

696 if(
sh‹t_¥ess_˙t
 >= 2){

698 
	`RTC_CC_£t
(
RTC_dñay_ö°™˚
,
PB_CC_ªg
,((
PB_¥s_time°amp
 + 
USER_PB_SHORT_PRESS_TICK
)&0x00FFFFFF),
åue
);

699 
timî_l⁄g
 = 
Ál£
;

700 
timî_sh‹t
 = 
åue
;

701 
timî_vîy_l⁄g
 = 
Ál£
;

702 
sh‹t_¥ess_˙t
 = 0;

706 if(
Êag
 =
PB_RLS
){

707 
PB_æs_time°amp
 = 
	`gë_RTC_time°amp
(
åue
);

708 
	`RTC_CC_£t
(
RTC_dñay_ö°™˚
,
PB_CC_ªg
,0,
Ál£
);

709 
timî_l⁄g
 = 
Ál£
;

710 if((
PB_æs_time°amp
-
PB_¥s_time°amp
Ë>
USER_PB_SHORT_PRESS_TICK
)

712 
sh‹t_¥ess_˙t
++;

716 
sh‹t_¥ess_˙t
 = 0;

719 if(
Êag
 =
PB_TIMEOUT
) {

720 if(
timî_l⁄g
) {

721 
PB_l⁄g_¥es£d
 = 
åue
;

722 
timî_l⁄g
 = 
Ál£
;

723 if(!
TAG_SHUTDOWNED
)

725 
	`RTC_CC_£t
(
RTC_dñay_ö°™˚
,
PB_CC_ªg
,((
PB_¥s_time°amp
 + 
USER_PB_VLONG_PRESS_TICK
)&0x00FFFFFF),
åue
);

726 
timî_vîy_l⁄g
 = 
åue
;

730 if(
timî_sh‹t
) {

731 
PB_sh‹t_¥es£d_3t
 = 
åue
;

733 if(
timî_vîy_l⁄g
) {

734 
PB_vîy_l⁄g_¥es£d
 = 
åue
;

738 
	}
}

741 
	$_RTC2_evt_h™dÀr
(
ƒf_drv_πc_öt_ty≥_t
 
öt_ty≥
)

743 
öt_ty≥
)

745 (
NRF_DRV_RTC_INT_COMPARE0
):

746 
πcDñayCom∂ëe
[2][0]
åue
;

747 
NRF_RTC2
->
EVENTS_COMPARE
[0] = 0;

750 (
NRF_DRV_RTC_INT_COMPARE1
):

751 
πcDñayCom∂ëe
[2][1]
åue
;

752 
NRF_RTC2
->
EVENTS_COMPARE
[1] = 0;

755 (
NRF_DRV_RTC_INT_COMPARE2
):

756 
πcDñayCom∂ëe
[2][2]
åue
;

757 
NRF_RTC2
->
EVENTS_COMPARE
[2] = 0;

760 (
NRF_DRV_RTC_INT_COMPARE3
):

761 
πcDñayCom∂ëe
[2][3]
åue
;

762 
NRF_RTC2
->
EVENTS_COMPARE
[3] = 0;

763 
	`PB_h™dÀr
(
PB_TIMEOUT
);

764 
öt_Êag
.
wake_up
 = 
åue
;

768 (
NRF_DRV_RTC_INT_OVERFLOW
):

769 
RTCCNT_MSByã
++;

770 
NRF_RTC2
->
EVENTS_OVRFLW
 = 0;

777 
NRF_RTC2
->
EVENTS_TICK
 = 0;

778 
	}
}

781 
	$πc_c⁄figuøti⁄
()

783 
uöt32_t
 
îr_code
;

785 
ƒf_drv_πc_c⁄fig_t
 
c⁄fig
 = 
NRF_DRV_RTC_DEFAULT_CONFIG
;

786 
îr_code
 = 
	`ƒf_drv_πc_öô
(&
πc2
, &
c⁄fig
,
_RTC2_evt_h™dÀr
);

787 
	`APP_ERROR_CHECK
(
îr_code
);

788 
	`ƒf_drv_πc_íabÀ
(&
πc2
);

790 
	`ƒf_drv_πc_cou¡î_˛ór
(&
πc2
);

791 
	`ƒf_drv_πc_ovîÊow_íabÀ
(&
πc2
,
åue
);

792 
RTCCNT_MSByã
 = 0UL;

793 
	}
}

796 
uöt32_t
 
	$gë_RTC_cou¡î
(
uöt8_t
 
RTC_ö°™˚
)

798 
uöt32_t
 
ªt
 = ~0UL;

799 if(
RTC_ö°™˚
 == 0) {

800 
ªt
 = 
	`ƒf_drv_πc_cou¡î_gë
(&
πc0
);

802 if(
RTC_ö°™˚
 == 1) {

803 
ªt
 = 
	`ƒf_drv_πc_cou¡î_gë
(&
πc1
);

805 if(
RTC_ö°™˚
 == 2) {

806 
ªt
 = 
	`ƒf_drv_πc_cou¡î_gë
(&
πc2
);

808  
ªt
;

809 
	}
}

811 
	$RTC_CC_£t
(
uöt8_t
 
RTC_ö°™˚
,
uöt32_t
 
ch™√l
, uöt32_à
vÆ
, 
boﬁ
 
IRQ_í
)

813 if(
RTC_ö°™˚
 == 0) {

814 
NRF_RTC0
->
EVENTS_COMPARE
[
ch™√l
] = 0;

815 
	`ƒf_drv_πc_cc_£t
(&
πc0
,
ch™√l
,
vÆ
,
IRQ_í
);

817 if(
RTC_ö°™˚
 == 1) {

818 
NRF_RTC1
->
EVENTS_COMPARE
[
ch™√l
] = 0;

819 
	`ƒf_drv_πc_cc_£t
(&
πc1
,
ch™√l
,
vÆ
,
IRQ_í
);

821 if(
RTC_ö°™˚
 == 2) {

822 
NRF_RTC2
->
EVENTS_COMPARE
[
ch™√l
] = 0;

823 
	`ƒf_drv_πc_cc_£t
(&
πc2
,
ch™√l
,
vÆ
,
IRQ_í
);

826 
	}
}

833 
	$_GPIO_IRQ_h™dÀr
(
ƒf_drv_gpiŸe_pö_t
 
pö
, 
ƒf_gpiŸe_pﬁ¨ôy_t
 
a˘i⁄
)

837 if(
	`ƒf_gpio_pö_ªad
(
DW_IRQ
)Ë
	`GPIO_IRQ_h™dÀr
((
uöt32_t
)DW_IRQ);

861 if(
	`ƒf_gpio_pö_ªad
(
ACC_IRQ
))

863 
	`GPIO_IRQ_h™dÀr
((
uöt32_t
)
ACC_IRQ
);

865 
	}
}

870 
boﬁ
 
	$ext_úq_öô
()

872 
uöt32_t
 
îr_code
 = 0UL;

873 if(!
	`ƒf_drv_gpiŸe_is_öô
())

875 
îr_code
 = 
	`ƒf_drv_gpiŸe_öô
();

877 (
Ál£
);

881 if(!
îr_code
)

883 
ƒf_drv_gpiŸe_ö_c⁄fig_t
 
gpiŸe_ö_c⁄fig
;

884 
gpiŸe_ö_c⁄fig
.
hi_accuøcy
 = 
Ál£
;

885 
gpiŸe_ö_c⁄fig
.
is_w©chî
 = 
Ál£
;

886 
gpiŸe_ö_c⁄fig
.
£n£
 = 
NRF_GPIOTE_POLARITY_TOGGLE
;

887 
gpiŸe_ö_c⁄fig
.
puŒ
 = 
NRF_GPIO_PIN_PULLDOWN
;

888 
îr_code
 = 
	`ƒf_drv_gpiŸe_ö_öô
(
DW_IRQ
, &
gpiŸe_ö_c⁄fig
, 
_GPIO_IRQ_h™dÀr
);

889 
	`ƒf_drv_gpiŸe_ö_evít_íabÀ
(
DW_IRQ
, 
åue
);

891 (
Ál£
);

895 if(!
îr_code
)

897 
ƒf_drv_gpiŸe_ö_c⁄fig_t
 
gpiŸe_ö_c⁄fig
;

898 
gpiŸe_ö_c⁄fig
.
hi_accuøcy
 = 
Ál£
;

899 
gpiŸe_ö_c⁄fig
.
is_w©chî
 = 
Ál£
;

900 
gpiŸe_ö_c⁄fig
.
£n£
 = 
NRF_GPIOTE_POLARITY_TOGGLE
;

901 
gpiŸe_ö_c⁄fig
.
puŒ
 = 
NRF_GPIO_PIN_PULLDOWN
;

902 
îr_code
 = 
	`ƒf_drv_gpiŸe_ö_öô
(
ACC_IRQ
, &
gpiŸe_ö_c⁄fig
, 
_GPIO_IRQ_h™dÀr
);

903 
	`ƒf_drv_gpiŸe_ö_evít_íabÀ
(
ACC_IRQ
,
Ál£
);

906 (
Ál£
);

926  (
åue
);

928 
	}
}

930 
	$UWB_IRQ_dißbÀ
()

932 
	`ƒf_drv_gpiŸe_ö_evít_dißbÀ
(
DW_IRQ
);

933 
	}
}

935 
	$UWB_IRQ_íabÀ
()

937 
	`ƒf_drv_gpiŸe_ö_evít_íabÀ
(
DW_IRQ
, 
åue
);

938 
	}
}

950 
	$ACC_IRQ_dißbÀ
()

952 
	`ƒf_drv_gpiŸe_ö_evít_dißbÀ
(
ACC_IRQ
);

953 
	}
}

956 
	$ACC_IRQ_íabÀ
()

958 
	`ƒf_drv_gpiŸe_ö_evít_íabÀ
(
ACC_IRQ
, 
åue
);

959 
	}
}

961 
	$ACC_IRQ_pö_dis
()

963 
	`ƒf_gpio_cfg_deÁu…
(
ACC_IRQ
);

964 
	}
}

966 
	$CHG_IRQ_íabÀ
()

968 
	`ƒf_drv_gpiŸe_ö_evít_íabÀ
(
CHG_STATUS
, 
åue
);

969 
	}
}

971 
	$CHG_IRQ_dißbÀ
()

973 
	`ƒf_drv_gpiŸe_ö_evít_dißbÀ
(
CHG_STATUS
);

974 
	}
}

977 
	$GPIO_IRQ_íabÀ
()

979 
	`NVIC_E«bÀIRQ
(
GPIOTE_IRQn
);

980 
	}
}

982 
	$GPIO_IRQ_dißbÀ
()

984 
	`NVIC_DißbÀIRQ
(
GPIOTE_IRQn
);

985 
	}
}

987 
	$RTCs_IRQ_dißbÀ
()

989 
	`NVIC_DißbÀIRQ
(
RTC1_IRQn
);

990 
	`NVIC_DißbÀIRQ
(
RTC2_IRQn
);

991 
	}
}

993 
	$RTCs_IRQ_íabÀ
()

995 
	`NVIC_E«bÀIRQ
(
RTC1_IRQn
);

996 
	`NVIC_E«bÀIRQ
(
RTC2_IRQn
);

997 
	}
}

999 
	$RTC2_IRQ_dißbÀ
()

1001 
	`NVIC_DißbÀIRQ
(
RTC2_IRQn
);

1002 
	}
}

1004 
	$RTC2_IRQ_íabÀ
()

1006 
	`NVIC_E«bÀIRQ
(
RTC2_IRQn
);

1007 
	}
}

1014 
	#NRF52_ONRAM1_OFFRAM1
 
POWER_RAM_POWER_S0POWER_On
 << 
POWER_RAM_POWER_S0POWER_Pos
 | 
POWER_RAM_POWER_S1POWER_On
 << 
POWER_RAM_POWER_S1POWER_Pos
 \

1015 | 
POWER_RAM_POWER_S0RETENTION_On
 << 
POWER_RAM_POWER_S0RETENTION_Pos
 | 
POWER_RAM_POWER_S1RETENTION_On
 << 
POWER_RAM_POWER_S1RETENTION_Pos
;

	)

1017 
	#NRF52_ONRAM1_OFFRAM0
 
POWER_RAM_POWER_S0POWER_On
 << 
POWER_RAM_POWER_S0POWER_Pos
 | 
POWER_RAM_POWER_S1POWER_On
 << 
POWER_RAM_POWER_S1POWER_Pos
 \

1018 | 
POWER_RAM_POWER_S0RETENTION_Off
 << 
POWER_RAM_POWER_S0RETENTION_Pos
 | 
POWER_RAM_POWER_S1RETENTION_Off
 << 
POWER_RAM_POWER_S1RETENTION_Pos
;

	)

1020 
	#NRF52_ONRAM0_OFFRAM0
 
POWER_RAM_POWER_S0POWER_Off
<< 
POWER_RAM_POWER_S0POWER_Pos
 | 
POWER_RAM_POWER_S1POWER_Off
<< 
POWER_RAM_POWER_S1POWER_Pos
;

	)

1025 
	$c⁄figuª_øm_ªã¡i⁄
()

1028 
NRF_POWER
->
RAM
[0].
POWER
 = 
NRF52_ONRAM1_OFFRAM0
;

1029 
NRF_POWER
->
RAM
[1].
POWER
 = 
NRF52_ONRAM1_OFFRAM0
;

1030 
NRF_POWER
->
RAM
[2].
POWER
 = 
NRF52_ONRAM1_OFFRAM0
;

1031 
NRF_POWER
->
RAM
[3].
POWER
 = 
NRF52_ONRAM1_OFFRAM0
;

1032 
NRF_POWER
->
RAM
[4].
POWER
 = 
NRF52_ONRAM1_OFFRAM0
;

1033 
NRF_POWER
->
RAM
[5].
POWER
 = 
NRF52_ONRAM1_OFFRAM0
;

1034 
NRF_POWER
->
RAM
[6].
POWER
 = 
NRF52_ONRAM1_OFFRAM0
;

1035 
NRF_POWER
->
RAM
[7].
POWER
 = 
NRF52_ONRAM1_OFFRAM0
;

1036 
	}
}

1044 
	$_RTC1_evt_h™dÀr
(
ƒf_drv_πc_öt_ty≥_t
 
öt_ty≥
)

1046 
öt_ty≥
)

1048 (
NRF_DRV_RTC_INT_COMPARE0
):

1049 
NRF_RTC1
->
EVENTS_COMPARE
[0] = 0;

1050 
	`NVIC_Sy°emRe£t
();

1052 (
NRF_DRV_RTC_INT_COMPARE1
):

1053 
NRF_RTC1
->
EVENTS_COMPARE
[1] = 0;

1054 
NFC_should_be_check
 = 
åue
;

1055 
öt_Êag
.
wake_up
 = 
åue
;

1064 
	}
}

1068 
boﬁ
 
	gWDOG_ru¬ög
 = 
Ál£
;

1069 
uöt32_t
 
	gtimeout_tcks
 = 0;

1074 
	$w©chdog_öô
(
uöt32_t
 
º_us
)

1076 
uöt32_t
 
îr_code
;

1077 
	`ƒf_drv_πc_unöô
(&
πc1
);

1078 
ƒf_drv_πc_c⁄fig_t
 
c⁄fig
 = 
NRF_DRV_RTC_DEFAULT_CONFIG
;

1079 
c⁄fig
.
öãºu±_¥i‹ôy
 = 1;

1080 
îr_code
 = 
	`ƒf_drv_πc_öô
(&
πc1
, &
c⁄fig
,
_RTC1_evt_h™dÀr
);

1081 
	`APP_ERROR_CHECK
(
îr_code
);

1082 
	`ƒf_drv_πc_íabÀ
(&
πc1
);

1085 
	`ƒf_drv_πc_cou¡î_˛ór
(&
πc1
);

1086 
timeout_tcks
 = 
	`c⁄vîtTime2Ticks
(
º_us
*2UL + 
WD_GUARD_INTERVAL_US
);

1087 
uöt32_t
 
πc˙t_vÆ
 = 
	`gë_RTC_cou¡î
(
WDT_RTC_ö°™˚
);

1088 
	`RTC_CC_£t
(
WDT_RTC_ö°™˚
,
WDT_RTC_ch™
, (
πc˙t_vÆ
 + 
timeout_tcks
Ë& 
RTC_TOP
, 
åue
);

1089 
WDOG_ru¬ög
 = 
åue
;

1090 
	}
}

1096 
boﬁ
 
	$wdog_gë_°©e
()

1098  
WDOG_ru¬ög
;

1099 
	}
}

1104 
	$WDOG_Fìd
()

1106 if(
WDOG_ru¬ög
)

1108 
uöt32_t
 
πc˙t_vÆ
 = 
	`gë_RTC_cou¡î
(
WDT_RTC_ö°™˚
);

1109 
	`RTC_CC_£t
(
WDT_RTC_ö°™˚
,
WDT_RTC_ch™
, (
πc˙t_vÆ
 + 
timeout_tcks
Ë& 
RTC_TOP
, 
åue
);

1112 
	}
}

1118 
	$WDOG_íabÀ
(
boﬁ
 
í
)

1120 if(
í
)

1122 
uöt32_t
 
πc˙t_vÆ
 = 
	`gë_RTC_cou¡î
(
WDT_RTC_ö°™˚
);

1123 
	`RTC_CC_£t
(
WDT_RTC_ö°™˚
,
WDT_RTC_ch™
, (
πc˙t_vÆ
 + 
timeout_tcks
Ë& 
RTC_TOP
, 
åue
);

1124 
WDOG_ru¬ög
 = 
åue
;

1129 
	`ƒf_drv_πc_cc_dißbÀ
(&
πc1
,
WDT_RTC_ch™
);

1130 
WDOG_ru¬ög
 = 
Ál£
;

1133 
	}
}

1170 
	$_ADC_IRQ_h™dÀr
(
ƒf_drv_ßadc_evt_t
 c⁄° * 
p_evít
)

1173 
	}
}

1175 
	$ADC_Unöô
()

1177 
	`ƒf_drv_ßadc_unöô
();

1179 
	`ƒf_drv_ßadc_ch™√l_unöô
(
ADC_VDD_ch™√l
);

1182 
	}
}

1188 
	$ADC_öô
()

1190 
ƒf_drv_ßadc_c⁄fig_t
 
adc_c⁄f

NRF_DRV_SAADC_DEFAULT_CONFIG
;

1191 
ƒf_ßadc_ch™√l_c⁄fig_t
 
adc_ch0_c⁄f
 = 
	`NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE
(
SAADC_CH_PSELP_PSELP_VDD
);

1192 
adc_ch0_c⁄f
.
gaö
 = 
NRF_SAADC_GAIN1_6
;

1193 
adc_ch0_c⁄f
.
acq_time
 = 
NRF_SAADC_ACQTIME_40US
;

1194 
	`ƒf_drv_ßadc_öô
(&
adc_c⁄f
,
_ADC_IRQ_h™dÀr
);

1196 
	`ƒf_drv_ßadc_ch™√l_öô
(
ADC_VDD_ch™√l
,&
adc_ch0_c⁄f
);

1198 
ƒf_ßadc_ch™√l_c⁄fig_t
 
adc_ch1_c⁄f
 = 
	`NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE
(
NRF_SAADC_INPUT_AIN6
);

1199 
adc_ch1_c⁄f
.
gaö
 = 
NRF_SAADC_GAIN1_4
;

1200 
adc_ch1_c⁄f
.
acq_time
 = 
NRF_SAADC_ACQTIME_40US
;

1201 
	`ƒf_drv_ßadc_ch™√l_öô
(
ADC_BATT_ch™√l
,&
adc_ch1_c⁄f
);

1204 
	}
}

1212 
uöt16_t
 
	$ADC_⁄e_shŸ_mósuª
(
uöt8_t
 
ch™√l
)

1214 
ƒf_ßadc_vÆue_t
 
mós_vÆue
 = 0;

1215 
	`ƒf_drv_ßadc_ßm∂e_c⁄vît
(
ch™√l
,&
mós_vÆue
);

1216  (
uöt16_t
)
mós_vÆue
;

1217 
	}
}

1220 
uöt8_t
 
	$mós_b©ãry_vﬁège_øw
()

1222 
uöt8_t
 
øw_vﬁège
;

1223 #i‡
PLATFORM
 =
TAG_2_IMU


1224 
	`ADC_RDIV_PULL_DOWN
();

1225 
	`ADC_MEAS_PIN_BYPASS
();

1226 
	`dñay_™d_¶ìp
(1000,
Ál£
,
åue
);

1227 
øw_vﬁège
 = 
	`ADC_⁄e_shŸ_mósuª
(
ADC_BATT_ch™√l
);

1228 
øw_vﬁège
 = (
uöt8_t
)(()(raw_voltage-1)*0.98f);

1230 
	`ADC_MEAS_PIN_PULL_UP
();

1231 
	`ADC_RDIV_PULL_UP
();

1232 #ñi‡
PLATFORM
 =
TAG_2_LITE


1233 
øw_vﬁège
 = 
	`ADC_⁄e_shŸ_mósuª
(
ADC_VDD_ch™√l
);

1234 
øw_vﬁège
 = (
uöt8_t
)(()raw_voltage*0.96f);

1238  
øw_vﬁège
;

1239 
	}
}

1242 
	#PAGE_LENGTH
 0x400UL

	)

1243 
	#USER_PAGE
 0x74C00

	)

1250 
uöt32_t
 
	$wrôe_byãs_to_u£r_∑ge
(
uöt16_t
 
addr
, 
uöt8_t
* 
d©a
, 
size_t
 
Àn
)

1252 if((
addr
+
Àn
Ë< 
PAGE_LENGTH
)

1254 
uöt8_t
 
ãmp
[
PAGE_LENGTH
];

1256 
	`mem˝y
((*)
ãmp
,(*)
USER_PAGE
,
PAGE_LENGTH
);

1257 
	`ƒf_nvmc_∑ge_îa£
(
USER_PAGE
);

1259 
	`mem˝y
((*)(
ãmp
+
addr
),(*)
d©a
,
Àn
);

1260 
	`ƒf_nvmc_wrôe_byãs
(
USER_PAGE
,
ãmp
,
PAGE_LENGTH
);

1264 
	}
}

1271 
	$do_SWRe£tMCU
(
uöt8_t
 
î∫um
)

1273 if(
î∫um
)

1275 
	`DebugMsg
(
RELEASE
, "\√%d", 
î∫um
);

1276 
	`dñay_™d_¶ìp
(200, 1, 
åue
);

1278 
	`NVIC_Sy°emRe£t
();

1279 
	}
}

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\peripheral.h

1 #i‚de‡
PERIPHERAL_H_INCLUDED


2 
	#PERIPHERAL_H_INCLUDED


	)

4 
	~<°döt.h
>

5 
	~<°dboﬁ.h
>

6 
	~<°ddef.h
>

8 
	#SPI_BAUDRATE_LOW
 1000

	)

9 
	#SPI_BAUDRATE_MIDDLE
 4000

10 
	#SPI_BAUDRATE_HIGH
 8000

	)

12 
	#I2C_FREQ_STD
 100

	)

13 
	#I2C_FREQ_250
 250

	)

14 
	#I2C_FREQ_FAST
 400

	)

16 
	#LF_OSC_FREQ
 32768UL

	)

18 
	#ADC_VDD_ch™√l
 0

	)

19 
	#ADC_BATT_ch™√l
 1

	)

21 
	#RTC_dñay_ö°™˚
 2

	)

23 
	#RX_ªquúed_timî
 0

	)

24 
	#dñay_CC_ªg
 1

	)

25 
	#dìp_¶ìp_CC_ªg
 2

	)

26 
	#PB_CC_ªg
 3

	)

28 
	#WDT_RTC_ö°™˚
 1

	)

29 
	#WDT_RTC_ch™
 0

	)

30 
	#WDT_RTC_NFC_ch™
 1

	)

32 
	#USER_PB_SHORT_PRESS_TICK
 (
USER_PB_SHORTPRESS_LIMIT
 * 32768)/1000

	)

33 
	#USER_PB_LONG_PRESS_TICK
 (
USER_PB_LONGPRESS_LIMIT
 * 32768)/1000

	)

34 
	#USER_PB_VLONG_PRESS_TICK
 (
USER_PB_VLONGPRESS_LIMIT
 * 32768)/1000

	)

36 
	#MPU9250
 (1<<0)

	)

37 
	#MMA8453
 (1<<1)

	)

38 
	#LIS2DH12
 (1<<2)

	)

40 
	#PREDEF_MAC_PAGE
 0x73000

	)

43 
	#READ_ARRAY
 0x0B

	)

44 
	#READ_APPAY_50M
 0x03

	)

45 
	#DUAL_OUT_READ
 0x3B

	)

46 
	#DUAL_IO_READ
 0xBB

	)

47 
	#QUAD_OUT_READ
 0x6B

	)

48 
	#QUAD_IO_READ
 0xEB

	)

49 
	#DUAL_READ_MODE_RESET
 0xFFFF

	)

50 
	#QUAD_READ_MODE_RESET
 0xFF

	)

53 
	#BLOCK_ERASE_4K
 0x20

	)

54 
	#BLOCK_ERASE_32K
 0x52

	)

55 
	#BLOCK_ERASE_64K
 0xD8

	)

56 
	#CHIP_ERASE
 0xC7

57 
	#BYTE_PROGRAM
 0x02

	)

60 
	#WRITE_ENABLE
 0x06

	)

61 
	#WRITE_DISABLE
 0x04

	)

64 
	#ERASE_SECURITY_REG_PAGE
 0x44

	)

65 
	#PROGRAM_SECURITY_REG_PAGE
 0x42

	)

66 
	#READ_SECURITY_REG_PAGE
 0x48

	)

69 
	#READ_STATUS_REG_BYTE_1
 0x05

	)

70 
	#READ_STATUS_REG_BYTE_2
 0x35

	)

71 
	#WRITE_STATUS_REG
 0x01

	)

72 
	#WRITE_ENABLE_VOL_STATUS_REG
 0x50

	)

75 
	#READ_MAN_DEVICE_ID
 0x9F

	)

76 
	#READ_ID
 0x90

	)

77 
	#DEEP_POWER_DOWN
 0xB9

	)

78 
	#RESUME_DEEP_POWER_DOWN
 0xAB

	)

83 
	~"≠p_u¨t.h
"

86 
_wrôe
(
fûe
, *
±r
, 
Àn
) ;

87 
uöt8_t
 
	gbody
[256];

88 
	g•i_txd
[1024] ;

89 
	g•i_rxd
[1024] ;

91 
u¨t_îr‹_h™dÀ
(
≠p_u¨t_evt_t
 * 
p_evít
) ;

92 
UART_Inô
() ;

93 
UART_Unöô
();

94 
GPIOs_LED_Unöô
();

95 
ADC_Unöô
();

97 
LORA_ToggÀ
();

98 
LORA_RESET_SET
();

99 
LORA_dübÀ
();

102 vﬁ©ûê
boﬁ
 
	gPB_sh‹t_¥es£d_3t
;

103 vﬁ©ûê
boﬁ
 
	gPB_l⁄g_¥es£d
;

104 vﬁ©ûê
boﬁ
 
	gPB_vîy_l⁄g_¥es£d
;

105 vﬁ©ûê
boﬁ
 
	gTAG_shutdown
;

106 vﬁ©ûê
boﬁ
 
	gACC_¶ìp
;

107 vﬁ©ûê
boﬁ
 
	gCHG_a˘ive
;

108 vﬁ©ûê
boﬁ
 
	gch¨gög_ju°_íded
;

109 vﬁ©ûê
boﬁ
 
	gch¨gög_ju°_°¨ãd
;

110 vﬁ©ûê
boﬁ
 
	gNFC_fõld_a˘ive
;

111 vﬁ©ûê
boﬁ
 
	gNFC_should_be_check
;

112 vﬁ©ûê
uöt8_t
 
	gRTCCNT_MSByã
;

113 vﬁ©ûê
boﬁ
 
	gπcDñayCom∂ëe
[3][4];

114 vﬁ©ûê
uöt16_t
 
	gbaudøã
;

116 
GPIOs_öô
();

117 
Êash_wrôe_•i
(
uöt32_t
 
addªss
, uöt32_à
bodyÀngth
,
uöt8_t
 *
bodyBuf„r
);

118 
Êash_ªad_•i
(
uöt32_t
 
addªss
, uöt32_à
ªadÀngth
,
uöt8_t
 *
ªadBuf„r
);

119 
Êash_Block_Eø£_•i
(
uöt32_t
 
addªss
);

120 
Êash_îa£_•i
();

121 
Êash_wrôe_íabÀ_•i
();

123 
uöt8_t
 
I2CDRV_ªadFromRegi°î
(uöt8_à
devi˚_addr
, uöt8_à
ªg_addr
);

124 
uöt8_t
 
I2CDRV_bur°_ªadFromRegi°î
(uöt8_à
devi˚_addr
, uöt8_à
ªg_addr
,uöt8_à
Àngth
, uöt8_à*
d©a
 );

125 
I2CDRV_wrôeToRegi°î
(
uöt8_t
 
devi˚_addr
, uöt8_à
ªg_addr
, uöt8_à
d©a
);

126 
uöt8_t
 
I2CDRV_bur°_wrôeToRegi°î
(uöt8_à
devi˚_addr
, uöt8_à
ªg_addr
,uöt8_à
Àngth
, uöt8_à*
d©a
 );

128 
I2C_c⁄fig
(
uöt16_t
 
‰eq_kHz
);

129 
I2C_íabÀ
();

130 
I2C_dißbÀ_
();

131 
I2C_dißbÀ
();

134 
FLASH_CS_CLR
();

135 
FLASH_CS_SET
();

137 
Fœsh_SPI_pös_íabÀ
();

138 
Fœsh_SPI_pös_dißbÀ
();

139 
UWB_SPI_pös_íabÀ
();

140 
UWB_SPI_pös_dißbÀ
();

141 
uöt16_t
 
SPI_öô
(uöt16_à
‰eq_kHz
);

142 
uöt16_t
 
SPI_Fœsh_öô
(uöt16_à
‰eq_kHz
);

145 
UWB_IRQ_íabÀ
();

146 
UWB_IRQ_dißbÀ
();

147 
GPIO_IRQ_íabÀ
();

148 
GPIO_IRQ_dißbÀ
();

149 
ACC_IRQ_dißbÀ
();

150 
ACC_IRQ_íabÀ
();

151 
ACC_IRQ_pö_dis
();

152 
PB_IRQ_íabÀ
();

153 
PB_IRQ_dißbÀ
();

154 
CHG_IRQ_íabÀ
();

155 
CHG_IRQ_dißbÀ
();

156 
do_SWRe£tMCU
(
uöt8_t
 
î∫um
);

157 
boﬁ
 
ext_úq_öô
();

158 
boﬁ
 
GPIO_PöInGë
(
uöt32_t
 
pö
);

159 
boﬁ
 
gë_PB_°©e
();

160 
boﬁ
 
gë_CHG_°©us
();

161 
boﬁ
 
gë_ACC_INT_pö_°©us
();

181 
LED1_ON
();

182 
LED1_OFF
();

183 
LED2_ON
();

184 
LED2_OFF
();

185 
PB_LED1_ON
();

186 
PB_LED1_OFF
();

187 
PB_LED_ON
();

188 
PB_LED_OFF
();

189 
PB_LED1_TOGGLE
() ;

190 
LED1_TOGGLE
();

191 
LED2_TOGGLE
();

192 
LED3_TOGGLE
();

193 
LED_TOGGLE
(
i
);

195 
DW_RST_ON
();

196 
DW_RST_OFF
();

197 
DW_CS_CLR
();

198 
DW_CS_SET
();

200 
NFC_PWR_ON
();

201 
NFC_PWR_OFF
();

203 
ADC_RDIV_PULL_UP
();

204 
ADC_RDIV_PULL_DOWN
();

206 
ADC_MEAS_PIN_BYPASS
();

207 
ADC_MEAS_PIN_PULL_UP
();

211 
˛ock_c⁄figuøti⁄
();

212 
πc_c⁄figuøti⁄
();

213 
w©chdog_öô
(
uöt32_t
 
º_us
);

214 
boﬁ
 
wdog_gë_°©e
();

215 
WDOG_Fìd
();

216 
WDOG_íabÀ
(
boﬁ
 
í
);

219 
uöt32_t
 
gë_RTC_cou¡î
(
uöt8_t
 
RTC_ö°™˚
);

221 
ADC_öô
();

222 
uöt16_t
 
ADC_⁄e_shŸ_mósuª
(
uöt8_t
 
ch™√l
);

223 
uöt8_t
 
mós_b©ãry_vﬁège_øw
();

225 
RTC_CC_£t
(
uöt8_t
 
RTC_ö°a˚
,
uöt32_t
 
ch™√l
, uöt32_à
vÆ
, 
boﬁ
 
IRQ_í
);

227 
c⁄figuª_øm_ªã¡i⁄
();

229 
DebugMsg
(
uöt8_t
 
¥öåﬁe
, *
Så
, ...);

231 
UWB_IRQ_dißbÀ
();

232 
UWB_IRQ_íabÀ
();

233 
PB_IRQ_dißbÀ
();

234 
PB_IRQ_íabÀ
();

235 
ACC_IRQ_dißbÀ
();

236 
ACC_IRQ_íabÀ
();

237 
ACC_IRQ_pö_dis
();

238 
GPIO_IRQ_íabÀ
();

239 
GPIO_IRQ_dißbÀ
();

240 
RTCs_IRQ_dißbÀ
();

241 
RTCs_IRQ_íabÀ
();

242 
RTC2_IRQ_dißbÀ
();

243 
RTC2_IRQ_íabÀ
();

245 
PB_LDO_SET
();

247 
uöt32_t
 
wrôe_byãs_to_u£r_∑ge
(
uöt16_t
 
addr
, 
uöt8_t
* 
d©a
, 
size_t
 
Àn
);

250 
ˇlcuœã_¸c16
(
uöt16_t
* 
¸c
, 
uöt8_t
* 
d©a
, 
size_t
 
Àngth
);

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\port_def.h

1 #i‚de‡
PORT_DEF_H_INCLUDED


2 
	#PORT_DEF_H_INCLUDED


	)

5 
	#ADC_RDIV
 23

	)

6 
	#ADC_MEAS
 30

	)

7 
	#I2C_SDA
 29

	)

8 
	#I2C_SCL
 28

	)

10 
	#PUSHBUTTON
 1

11 
	#NFC_FD
 26

	)

13 
	#USER_PB_LED1
 12

15 
	#USER_LED1
 13

16 
	#CHG_STATUS
 15

	)

17 
	#EXT_ACC_IRQ
 2

	)

19 
	#LORA_RESET
 13

	)

20 
	#LORA_WAKEUP
 26

	)

21 
	#NFC_PWR
 8

	)

22 
	#TESTPIN
 27

	)

24 
	#ACC_IRQ
 25

	)

26 
	#SPI_MOSI
 20

	)

27 
	#SPI_MISO
 18

	)

28 
	#SPI_SCK
 16

	)

29 
	#SPI_CS
 17

	)

31 
	#SPI_MOSI_FLASH
 6

	)

32 
	#SPI_MISO_FLASH
 7

	)

33 
	#SPI_SCK_FLASH
 4

	)

34 
	#SPI_CS_FLASH
 3

35 

	)

36 
	#DW_RST
 24

	)

37 
	#DW_IRQ
 19

	)

39 
	#PB_LDO
 2

	)

53 
	#DBG_SWO


	)

54 
	#DBG_SWDIO


	)

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\setting.h

1 #i‚de‡
SETTING_H_INCLUDED


2 
	#SETTING_H_INCLUDED


	)

4 
	#TAG_LIION
 (0)

	)

5 
	#TAG_PICO
 (1)

	)

6 
	#TAG_2_IMU
 (2)

	)

7 
	#TAG_2_LITE
 (3)

	)

14 
	#SW_VER
 (3)

15 
	#SW_SUBVER
 (124)

16 
	#SW_REV
 (6)

17 

	)

18 
	#HW_VERSION
 (1)

19 
	#HW_REVISION
 (3)

20 
	#HW_VER
 
HW_VERSION


	)

21 
	#HW_REV
 
HW_REVISION


	)

27 #i‡
PLATFORM
 =
TAG_2_LITE


29 
	#WAIT_FOR_CONF_RX_ON_TIME
 (100)

30 
	#WAIT_FOR_CONF_RX_SLEEP_TIME
 (200)

31 
	#WAIT_FOR_CONF_RX_COUNT
 (3)

	)

32 
	#WAIT_TIME_TO_RX_AFTER_ON
 (2000)

33 
	#ENABLE_WIRELESS_CONFIG_RX
 (1)

	)

34 
	#ACCELEROMETER_IN_USE


	)

36 
	#ACCELEROMETER_IN_USE


	)

37 
	#BAROMETER_IN_USE


	)

44 #ñi‡
PLATFORM
 =
TAG_2_IMU


46 
	#WAIT_FOR_CONFIG_TIMEOUT
 (1000)

	)

48 
	#ACCELEROMETER_IN_USE


	)

49 
	#BAROMETER_IN_USE


	)

50 
	#GYROSCOPE_IN_USE


	)

51 
	#MAGNETOMETER_IN_USE


	)

60 
	#DEVELOP
 (0)

	)

61 
	#RELEASE
 (1)

	)

63 
	#PRINT_ROLE
 
DEVELOP


	)

65 #i‚de‡
NULL


66 
	#NULL
 0

	)

69 
	#WDOG_IN_USE


	)

74 
	#USER_PB_SHORTPRESS_LIMIT
 (500UL)

75 
	#USER_PB_LONGPRESS_LIMIT
 (
USER_PB_SHORTPRESS_LIMIT
*4UL)

76 
	#USER_PB_VLONGPRESS_LIMIT
 (10000-
USER_PB_LONGPRESS_LIMIT
)

77 

	)

82 
	#WD_GUARD_INTERVAL_US
 100000UL

	)

87 
	#DELAY_BETWEEN_INFOBLINKS
 (1000)

88 
	#BEFORE1STBLINKDELAY
 (152)

89 
	#NUM_OF_IBLINK_SENDIG_AT_THE_BEGIN
 (3)

90 

	)

93 
	#EXTENDED_BLINK_BATT_FREQ
 (15)

94 

	)

96 
	#IBLINK_FREQ
 (225)

97 

	)

104 #i‡(
PLATFORM
 =
TAG_2_IMU
)

105 
	#MEAS_BATT_AFTER_RR
 (15)

106 
	#VCC_BATT_MINLEVEL
 (3200)

107 
	#VCC_BATT_MINLEVEL_FOR_DFU
 (3300)

108 
	#MIN_ALLOWED_BATT_VOLTAGE
 163

109 
	#MAX_ALLOWED_BATT_VOLTAGE
 212

110 
	#WAKE_UP_VOLTAGE_DURING_CHARGING
 (3300*128/2500)

	)

111 
	#MIN_ALLOWED_BATT_VOLTAGE_FOR_DFU
 ((
VCC_BATT_MINLEVEL_FOR_DFU
 * 128)/2500)

	)

112 
	#SLEEP_AFTER_LOW_BATT_MEASURE
 (3)

113 
	#GO_TO_SLEEP_IF_LOW_STARTUP_VOLTAGE


	)

114 
	#MEAS_BATT_DURING_CHARGE_PERIOD_SEC
 (120)

	)

115 
	#MEAS_BATT_DURING_CHARGE_PERIOD_TCKS
 (
MEAS_BATT_DURING_CHARGE_PERIOD_SEC
 * 32768)

	)

116 #ñi‡(
PLATFORM
 =
TAG_2_LITE
)

117 
	#MEAS_BATT_AFTER_RR
 (15)

118 
	#VCC_MCU_USB_MINLEVEL
 (2100)

119 
	#VCC_BATT_MINLEVEL
 (2100)

120 
	#SLEEP_AFTER_LOW_BATT_MEASURE
 (3)

121 
	#VCC_BATT_MINLEVEL_FOR_RX
 (2900)

122 
	#VCC_BATT_MINLEVEL_FOR_DFU
 (2500)

123 
	#MIN_ALLOWED_BATT_VOLTAGE
 142

124 
	#MAX_ALLOWED_BATT_VOLTAGE
 214

125 
	#MIN_ALLOWED_BATT_VOLTAGE_CR_FOR_RX
 ((
VCC_BATT_MINLEVEL_FOR_RX
 * 256)/3750)

126 
	#MIN_ALLOWED_BATT_VOLTAGE_FOR_DFU
 ((
VCC_BATT_MINLEVEL_FOR_DFU
 * 256)/3750)

128 

	)

129 
	#RR_DURING_CHARGE_MS
 (30000)

	)

137 
	#ADDR_BYTE_SIZE
 (6)

	)

138 
	#ADDR_BYTE_SIZE_ANCH
 (2)

	)

139 
	#TAG_BROADCAST_ADDR
 (0xFFFFFFFFFFFF)

	)

140 
	#MAC_ADDR_48b_MASK
 (0xFFFFFFFFFFFFULL)

	)

142 
	#UWB_FCODE_BLINK
 (0xBB)

	)

143 
	#UWB_FCODE_CONF
 (0xCC)

	)

149 
	#MAX_USER_REFRESH_RATE_MS
 (60000)

150 
	#MAX_NO_MOT_REFRESH_RATE_MS
 (129600000)

151 #i‡(
PLATFORM
 =
TAG_2_IMU
)

	)

152 
	#MIN_USER_REFRESH_RATE_MS
 (10)

153 
	#MIN_NO_MOT_REFRESH_RATE_MS
 (
MIN_USER_REFRESH_RATE_MS
)

	)

154 #ñi‡(
PLATFORM
 =
TAG_2_LITE
)

155 
	#MIN_USER_REFRESH_RATE_MS
 (50)

156 
	#MIN_NO_MOT_REFRESH_RATE_MS
 (
MIN_USER_REFRESH_RATE_MS
)

	)

161 #i‡(
PLATFORM
 =
LIION_TAG
Ë|| (PLATFORM =
TAG_2_IMU
)

162 
	#PERIODICAL_RX_EN


	)

163 
	#MIN_RX_PERIOD_MS
 (120)

164 
	#MAX_RX_PERIOD_MS
 (64800000)

165 
	#MIN_RX_DURATION_MS
 (50)

	)

166 
	#MAX_RX_DURATION_MS
 (10000)

	)

167 
	#CONSTANT
 (0)

	)

168 
	#VARIABLE
 (1)

	)

169 
	#RX_PERIOD
 
VARIABLE


	)

175 
	#ACC_TIME_TO_WAIT_INMOTION
 (15000)

176 
	#RR_IN_IDLE_MODE
 (5000)

177 

	)

182 
	#LIS2DH12_THRESHOLD_STEP
 (16)

183 
	#LIS2DH12_LOW_THRESHOLD
 (48)

	)

184 
	#LIS2DH12_MIN_THRESHOLD
 (
LIS2DH12_LOW_THRESHOLD
)

	)

185 
	#LIS2DH12_MEDIUM_THRESHOLD
 (256)

	)

186 
	#LIS2DH12_HIGH_THRESHOLD
 (1024)

	)

187 
	#LIS2DH12_MAX_THRESHOLD
 (8001)

	)

190 
	#LOW_THRESHOLD_FLAG
 (1 << 14)

	)

191 
	#MEDIUM_THRESHOLD_FLAG
 (2 << 14)

	)

192 
	#HIGH_THRESHOLD_FLAG
 (3 << 14)

	)

193 
	#PREDEFINED_THRESHOLD_MASK
 (3 << 14)

	)

197 
	#EEPROM_NUM_OF_RW_ATTEMPTS
 (3)

	)

201 
	#USER_DATA_BASE
 (1)

	)

202 
	#USER_DATA_TOP
 (16)

	)

203 
	#RESERVED_BASE
 (17)

	)

204 
	#RESERVED_TOP
 (30)

	)

205 
	#NEW_SETTING_BASE_ADDR
 (31)

	)

206 
	#NEW_SETTING_TOP_ADDR
 (38)

	)

207 
	#USER_SET_BASE_ADDR
 (39)

	)

208 
	#USER_SET_TOP_ADDR
 (46)

	)

209 
	#DEF_SET_BASE_ADDR
 (47)

	)

210 
	#DEF_SET_TOP_ADDR
 (54)

	)

212 
	#TAG_INFO_ADDR
 (55)

	)

216 
	#SETTING_INIT_CHECK
 ((
SW_VER
 << 16)| (
SW_SUBVER
 << 8Ë| (
SW_REV
))

	)

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\timing.c

23 
	~"timög.h
"

24 
	~"≥rùhîÆ.h
"

25 
	~"ƒf_drv_πc.h
"

26 
	~"ƒf_dñay.h
"

27 
	~"../TEIA_v¨.h
"

28 
	~<°dlib.h
>

35 
	$dñay_us
(
uöt32_t
 
us
)

37 
	`ƒf_dñay_us
(
us
);

38 
	}
}

44 
	$dñay_ms
(
uöt32_t
 
ms
)

46 
	`ƒf_dñay_ms
(
ms
);

47 
	}
}

56 
	$dñay_™d_¶ìp
(
uöt32_t
 
t
, 
boﬁ
 
is_ms
,boﬁ 
u£_dìp_¶ìp
)

58 
πcDñayCom∂ëe
[
RTC_dñay_ö°™˚
][
dñay_CC_ªg
] = 
Ál£
;

60 
uöt32_t
 
time_us
 = (
is_ms
Ë? (
t
 * 1000UL) : (t);

61 
uöt32_t
 
ticks
 = 
	`c⁄vîtTime2Ticks
(
time_us
);

63 if(
ticks
<= 1)

65 
	`ƒf_dñay_us
(
time_us
);

69 
uöt32_t
 
πc˙t
 = (
	`gë_RTC_cou¡î
(
RTC_dñay_ö°™˚
)Ë& 
RTC_TOP
;

70 
	`RTC_CC_£t
(
RTC_dñay_ö°™˚
,
dñay_CC_ªg
,(
πc˙t
+
ticks
)& 
RTC_TOP
,
åue
);

72 if(
u£_dìp_¶ìp
)

74 
πcDñayCom∂ëe
[
RTC_dñay_ö°™˚
][
dñay_CC_ªg
] =
Ál£
)

76 
	`__WFI
();

81 !
πcDñayCom∂ëe
[
RTC_dñay_ö°™˚
][
dñay_CC_ªg
])
	`__NOP
();

85 
	}
}

93 
uöt32_t
 
	$dñay_™d_¶ìp_tck
(
uöt32_t
 
ticks
, uöt32_à
óæy
, 
boﬁ
 
u£_dìp_¶ìp
)

95 
πcDñayCom∂ëe
[
RTC_dñay_ö°™˚
][
dñay_CC_ªg
] = 
Ál£
;

96 
uöt32_t
 
πc˙t
 = 
	`gë_RTC_time°amp
(
åue
);

97 
uöt32_t
 
ñ≠£dTicks
 = (
πc˙t
 - 
óæy
);

98 
uöt32_t
 
ticks_ö_¶ìp
 = 0;

99 if(
ñ≠£dTicks
 >
ticks
)

101  
ticks_ö_¶ìp
;

105 
uöt32_t
 
ªmaöögTicks
 = 
ticks
 - 
ñ≠£dTicks
;

107 if(
ªmaöögTicks
<= 2UL)

109 
	`ƒf_dñay_us
(30*
ticks
);

112 if(
ªmaöögTicks
 >
RTC_TOP
)

114 
	`RTC_CC_£t
(
RTC_dñay_ö°™˚
,
dñay_CC_ªg
,(
πc˙t
-1Ë& 
RTC_TOP
,
åue
);

115 
ªmaöögTicks
 -
RTC_TOP
;

116 
ticks_ö_¶ìp
 +
RTC_TOP
;

120 
	`RTC_CC_£t
(
RTC_dñay_ö°™˚
,
dñay_CC_ªg
,(
πc˙t
 + 
ªmaöögTicks
Ë& 
RTC_TOP
,
åue
);

121 
ticks_ö_¶ìp
 +
ªmaöögTicks
;

122 
ªmaöögTicks
 = 0;

125 (!
πcDñayCom∂ëe
[
RTC_dñay_ö°™˚
][
dñay_CC_ªg
]Ë&& (
öt_Êag
.
wake_up
 !
åue
))

127 if(
u£_dìp_¶ìp
Ë
	`__WFI
();

128 
	`__NOP
();

131 if(
ªmaöögTicks
Ë
	`dñay_™d_¶ìp_tck
‘emaöögTicks,
	`gë_RTC_time°amp
(
åue
),
u£_dìp_¶ìp
);

132  
ticks_ö_¶ìp
;

134  
ticks_ö_¶ìp
;

136 
	}
}

193 
uöt32_t
 
	$gë_RTC_time°amp
(
boﬁ
 
r_32bô
)

195 
uöt32_t
 
RTC_ticks
;

196 
RTC_ticks
 = 
	`gë_RTC_cou¡î
(
RTC_dñay_ö°™˚
);

197 if(
r_32bô
)

198 
RTC_ticks
 |(
RTCCNT_MSByã
 << 24);

200 (
RTC_ticks
);

201 
	}
}

208 
uöt32_t
 
	$gë_RTCñ≠£dCou¡
(
uöt32_t
 
óæyCNT
)

210 
uöt32_t
 
˙t
 = 
	`gë_RTC_time°amp
(
åue
);

212  (
˙t
 - 
óæyCNT
);

213 
	}
}

219 
uöt8_t
 
	$£t_¶ìp_time
(
uöt32_t
 
tcks
, uöt32_à
óæy
)

221 
uöt8_t
 
ªt
;

222 if(
tcks
 <= 1)  0;

225 if(
tcks
 =2Ë
ªt
 = 1;

226 
ªt
 = 2;

227 
	`RTC_CC_£t
(
RTC_dñay_ö°™˚
,
dìp_¶ìp_CC_ªg
,
	`gë_RTC_cou¡î
(RTC_dñay_ö°™˚)+
tcks
,
åue
);

229  
ªt
;

231 
	}
}

236 
	$dìp_¶ìp_RTC_IRQ_dißbÀ
()

238 
	`RTC_CC_£t
(
RTC_dñay_ö°™˚
,
dìp_¶ìp_CC_ªg
,0,
Ál£
);

239 
	}
}

250 
uöt32_t
 
	$c⁄vîtTime2Ticks
(
uöt32_t
 
time_us
)

252 
uöt32_t
 
ticks
 = 0;

253 
ticks
 = (
uöt32_t
Ë((((Ë
RTC_FREQUENCY
 * (Ë
time_us
) / 1000000.0)+0.5f);

254  
ticks
;

255 
	}
}

265 
	$c⁄vîtTicks2Time
(
uöt32_t
 
ticks
)

267 
time
 = 0;

268 
time
 = (Ë((Ë
ticks
/(Ë
RTC_FREQUENCY
);

269  
time
;

270 
	}
}

273 
öt32_t
 
	$ˇlcuœã_devüti⁄
 (
uöt32_t
 
devüti⁄_max
)

275 if(
tdﬂP¨amëîs
.
u£_øndom_devüti⁄
)

277 
öt32_t
 
devüti⁄
 = 
	`ønd
()% ((
devüti⁄_max
 << 1)+1);

278 
devüti⁄
 -
devüti⁄_max
;

279  
devüti⁄
;

283 
	}
}

289 
uöt32_t
 
	$unif‹m_ønd
(
uöt32_t
 
max_num
)

291 i‡(
max_num
 == 0)  0;

292 i‡(
max_num
 =
RAND_MAX
Ë 
	`ønd
();

293 i‡(
max_num
 > 
RAND_MAX
)  ~0UL;

294 
uöt32_t
 
width
 = 
RAND_MAX
 / 
max_num
;

295 
uöt32_t
 
ønd_max
 = 
width
 * 
max_num
;

296 
uöt32_t
 
øndom
 = 
	`ønd
()% 
ønd_max
;

297 
øndom
 =Ñ™dom / 
width
;

298  
øndom
;

299 
	}
}

306 
öt32_t
 
	$ˇlcuœã_dev
(
uöt32_t
 
devüti⁄_max
)

308 if(
tdﬂP¨amëîs
.
u£_øndom_devüti⁄
)

310 
öt32_t
 
devüti⁄
 = 
	`unif‹m_ønd
(
devüti⁄_max
 << 1);

311 
devüti⁄
 -
devüti⁄_max
;

312  
devüti⁄
;

316 
	}
}

	@C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\timing.h

1 #i‚de‡
TIMING_H_INCLUDED


2 
	#TIMING_H_INCLUDED


	)

4 
	~<°dboﬁ.h
>

5 
	~<°döt.h
>

6 
	~"sdk_c⁄fig.h
"

8 
	#RTC_FREQUENCY
 
RTC_DEFAULT_CONFIG_FREQUENCY


	)

10 
	#ONE_SEC_RTC_TCKS
 32768UL

	)

11 
	#TWO_SEC_RTC_TCKS
 65536UL

	)

12 
	#FIVE_SEC_RTC_TCKS
 163840UL

	)

14 
	#RR_DURING_CHARGE_TCKS
 ((
RR_DURING_CHARGE_MS
 *
RTC_FREQUENCY
)/1000UL)

	)

16 
	#RTC_TOP
 0x00FFFFFFUL

17 

	)

20 
dñay_us
(
uöt32_t
 
us
);

21 
dñay_ms
(
uöt32_t
 
ms
);

22 
dñay_™d_¶ìp
(
uöt32_t
 
t
, 
boﬁ
 
is_ms
,boﬁ 
u£_dìp_¶ìp
);

23 
uöt32_t
 
gë_RTC_time°amp
(
boﬁ
 
r_32bô
);

24 
uöt32_t
 
gë_RTCñ≠£dCou¡
(uöt32_à
óæyCNT
);

27 
uöt8_t
 
£t_¶ìp_time
(
uöt32_t
 
tcks
, uöt32_à
óæy
);

28 
dìp_¶ìp_RTC_IRQ_dißbÀ
();

29 
uöt32_t
 
c⁄vîtTime2Ticks
(uöt32_à
time_us
);

30 
c⁄vîtTicks2Time
(
uöt32_t
 
ticks
);

31 
uöt32_t
 
dñay_™d_¶ìp_tck
(uöt32_à
ticks
, uöt32_à
óæy
, 
boﬁ
 
u£_dìp_¶ìp
);

32 
öt32_t
 
ˇlcuœã_devüti⁄
 (
uöt32_t
 
devüti⁄_max
);

33 
öt32_t
 
ˇlcuœã_dev
(
uöt32_t
 
devüti⁄_max
);

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\clock\nrf_drv_clock.c

40 
	~"sdk_comm⁄.h
"

41 #i‡
NRF_MODULE_ENABLED
(
CLOCK
)

43 
	~"ƒf_drv_˛ock.h
"

44 
	~"ƒf_îr‹.h
"

45 
	~"≠p_utû_∂©f‹m.h
"

46 #ifde‡
SOFTDEVICE_PRESENT


47 
	~"so·devi˚_h™dÀr.h
"

48 
	~"ƒf_sdm.h
"

49 
	~"ƒf_soc.h
"

52 
	#NRF_LOG_MODULE_NAME
 "CLOCK"

	)

54 #i‡
CLOCK_CONFIG_LOG_ENABLED


55 
	#NRF_LOG_LEVEL
 
CLOCK_CONFIG_LOG_LEVEL


	)

56 
	#NRF_LOG_INFO_COLOR
 
CLOCK_CONFIG_INFO_COLOR


	)

57 
	#NRF_LOG_DEBUG_COLOR
 
CLOCK_CONFIG_DEBUG_COLOR


	)

58 
	#EVT_TO_STR
(
evít
Ë”víà=
NRF_CLOCK_EVENT_HFCLKSTARTED
 ? "NRF_CLOCK_EVENT_HFCLKSTARTED" : \

59 (
evít
 =
NRF_CLOCK_EVENT_LFCLKSTARTED
 ? "NRF_CLOCK_EVENT_LFCLKSTARTED" : \

60 (
evít
 =
NRF_CLOCK_EVENT_DONE
 ? "NRF_CLOCK_EVENT_DONE" : \

61 (
evít
 =
NRF_CLOCK_EVENT_CTTO
 ? "NRF_CLOCK_EVENT_CTTO" : "UNKNOWN EVENT"))))

	)

63 
	#EVT_TO_STR
(
evít
Ë""

	)

64 
	#NRF_LOG_LEVEL
 0

	)

66 
	~"ƒf_log.h
"

67 
	~"ƒf_log_˘æ.h
"

71 
INTERRUPT_PRIORITY_VALIDATION
(
CLOCK_CONFIG_IRQ_PRIORITY
);

74 
	#NRF_CLOCK_LFCLK_RC
 
CLOCK_LFCLKSRC_SRC_RC


	)

75 
	#NRF_CLOCK_LFCLK_Xèl
 
CLOCK_LFCLKSRC_SRC_Xèl


	)

76 
	#NRF_CLOCK_LFCLK_Sy¡h
 
CLOCK_LFCLKSRC_SRC_Sy¡h


	)

79 #i‡(
CLOCK_CONFIG_LF_SRC
 =
NRF_CLOCK_LFCLK_RC
Ë&& !
deföed
(
SOFTDEVICE_PRESENT
)

80 
	#CALIBRATION_SUPPORT
 1

	)

82 
	#CALIBRATION_SUPPORT
 0

	)

86 
	mCAL_STATE_IDLE
,

87 
	mCAL_STATE_CT
,

88 
	mCAL_STATE_HFCLK_REQ
,

89 
	mCAL_STATE_CAL
,

90 
	mCAL_STATE_ABORT
,

91 } 
	tƒf_drv_˛ock_ˇl_°©e_t
;

96 
boﬁ
 
	mmoduÀ_öôülized
;

97 vﬁ©ûê
boﬁ
 
	mhf˛k_⁄
;

98 vﬁ©ûê
boﬁ
 
	mlf˛k_⁄
;

99 vﬁ©ûê
uöt32_t
 
	mhf˛k_ªque°s
;

100 vﬁ©ûê
ƒf_drv_˛ock_h™dÀr_ôem_t
 * 
	mp_hf_hód
;

101 vﬁ©ûê
uöt32_t
 
	mlf˛k_ªque°s
;

102 vﬁ©ûê
ƒf_drv_˛ock_h™dÀr_ôem_t
 * 
	mp_lf_hód
;

103 #i‡
CALIBRATION_SUPPORT


104 
ƒf_drv_˛ock_h™dÀr_ôem_t
 
	mˇl_hf˛k_°¨ãd_h™dÀr_ôem
;

105 
ƒf_drv_˛ock_evít_h™dÀr_t
 
	mˇl_d⁄e_h™dÀr
;

106 vﬁ©ûê
ƒf_drv_˛ock_ˇl_°©e_t
 
	mˇl_°©e
;

108 } 
	tƒf_drv_˛ock_cb_t
;

110 
ƒf_drv_˛ock_cb_t
 
	gm_˛ock_cb
;

115 
	$lf˛k_°¨t
()

117 
	`ƒf_˛ock_evít_˛ór
(
NRF_CLOCK_EVENT_LFCLKSTARTED
);

118 
	`ƒf_˛ock_öt_íabÀ
(
NRF_CLOCK_INT_LF_STARTED_MASK
);

119 
	`ƒf_˛ock_èsk_åiggî
(
NRF_CLOCK_TASK_LFCLKSTART
);

120 
	}
}

124 
	$lf˛k_°›
()

126 #i‡
CALIBRATION_SUPPORT


127 ()
	`ƒf_drv_˛ock_ˇlibøti⁄_ab‹t
();

130 #ifde‡
SOFTDEVICE_PRESENT


134 
	`ASSERT
(!
	`so·devi˚_h™dÀr_is_íabÀd
());

137 
	`ƒf_˛ock_èsk_åiggî
(
NRF_CLOCK_TASK_LFCLKSTOP
);

138 
	`ƒf_˛ock_lf_is_ru¬ög
())

140 
m_˛ock_cb
.
lf˛k_⁄
 = 
Ál£
;

141 
	}
}

143 
	$hf˛k_°¨t
()

145 #ifde‡
SOFTDEVICE_PRESENT


146 i‡(
	`so·devi˚_h™dÀr_is_íabÀd
())

148 ()
	`sd_˛ock_hf˛k_ªque°
();

153 
	`ƒf_˛ock_evít_˛ór
(
NRF_CLOCK_EVENT_HFCLKSTARTED
);

154 
	`ƒf_˛ock_öt_íabÀ
(
NRF_CLOCK_INT_HF_STARTED_MASK
);

155 
	`ƒf_˛ock_èsk_åiggî
(
NRF_CLOCK_TASK_HFCLKSTART
);

156 
	}
}

158 
	$hf˛k_°›
()

160 #ifde‡
SOFTDEVICE_PRESENT


161 i‡(
	`so·devi˚_h™dÀr_is_íabÀd
())

163 ()
	`sd_˛ock_hf˛k_ªÀa£
();

168 
	`ƒf_˛ock_èsk_åiggî
(
NRF_CLOCK_TASK_HFCLKSTOP
);

169 
	`ƒf_˛ock_hf_is_ru¬ög
(
NRF_CLOCK_HFCLK_HIGH_ACCURACY
))

171 
m_˛ock_cb
.
hf˛k_⁄
 = 
Ál£
;

172 
	}
}

174 
boﬁ
 
	$ƒf_drv_˛ock_öô_check
()

176  
m_˛ock_cb
.
moduÀ_öôülized
;

177 
	}
}

179 
ªt_code_t
 
	$ƒf_drv_˛ock_öô
()

181 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

182 i‡(
m_˛ock_cb
.
moduÀ_öôülized
)

184 
îr_code
 = 
NRF_ERROR_MODULE_ALREADY_INITIALIZED
;

188 
m_˛ock_cb
.
p_hf_hód
 = 
NULL
;

189 
m_˛ock_cb
.
hf˛k_ªque°s
 = 0;

190 
m_˛ock_cb
.
p_lf_hód
 = 
NULL
;

191 
m_˛ock_cb
.
lf˛k_ªque°s
 = 0;

192 
	`ƒf_drv_comm⁄_powî_˛ock_úq_öô
();

193 #ifde‡
SOFTDEVICE_PRESENT


194 i‡(!
	`so·devi˚_h™dÀr_is_íabÀd
())

197 
	`ƒf_˛ock_lf_§c_£t
((
ƒf_˛ock_lf˛k_t
)
CLOCK_CONFIG_LF_SRC
);

200 #i‡
CALIBRATION_SUPPORT


201 
m_˛ock_cb
.
ˇl_°©e
 = 
CAL_STATE_IDLE
;

204 
m_˛ock_cb
.
moduÀ_öôülized
 = 
åue
;

207 
	`NRF_LOG_INFO
("Function: %s,Érror code: %s.\r\n",

208 (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

209  
îr_code
;

210 
	}
}

212 
	$ƒf_drv_˛ock_unöô
()

214 
	`ASSERT
(
m_˛ock_cb
.
moduÀ_öôülized
);

215 
	`ƒf_drv_comm⁄_˛ock_úq_dißbÀ
();

216 
	`ƒf_˛ock_öt_dißbÀ
(0xFFFFFFFF);

218 
	`lf˛k_°›
();

219 
	`hf˛k_°›
();

220 
m_˛ock_cb
.
moduÀ_öôülized
 = 
Ál£
;

221 
	`NRF_LOG_INFO
("Uninitialized.\r\n");

222 
	}
}

224 
	$ôem_íqueue
(
ƒf_drv_˛ock_h™dÀr_ôem_t
 ** 
p_hód
,

225 
ƒf_drv_˛ock_h™dÀr_ôem_t
 * 
p_ôem
)

227 
ƒf_drv_˛ock_h™dÀr_ôem_t
 * 
p_√xt
 = *
p_hód
;

228 
p_√xt
)

230 if(
p_√xt
 =
p_ôem
)

234 
p_√xt
 =Ö_next->p_next;

237 
p_ôem
->
p_√xt
 = (*
p_hód
 ? *p_hód : 
NULL
);

238 *
p_hód
 = 
p_ôem
;

239 
	}
}

241 
ƒf_drv_˛ock_h™dÀr_ôem_t
 * 
	$ôem_dequeue
(
ƒf_drv_˛ock_h™dÀr_ôem_t
 ** 
p_hód
)

243 
ƒf_drv_˛ock_h™dÀr_ôem_t
 * 
p_ôem
 = *
p_hód
;

244 i‡(
p_ôem
)

246 *
p_hód
 = 
p_ôem
->
p_√xt
;

248  
p_ôem
;

249 
	}
}

251 
	$ƒf_drv_˛ock_lf˛k_ªque°
(
ƒf_drv_˛ock_h™dÀr_ôem_t
 * 
p_h™dÀr_ôem
)

253 
	`ASSERT
(
m_˛ock_cb
.
moduÀ_öôülized
);

255 i‡(
m_˛ock_cb
.
lf˛k_⁄
)

257 i‡(
p_h™dÀr_ôem
)

259 
p_h™dÀr_ôem
->
	`evít_h™dÀr
(
NRF_DRV_CLOCK_EVT_LFCLK_STARTED
);

261 
	`CRITICAL_REGION_ENTER
();

262 ++(
m_˛ock_cb
.
lf˛k_ªque°s
);

263 
	`CRITICAL_REGION_EXIT
();

267 
	`CRITICAL_REGION_ENTER
();

268 i‡(
p_h™dÀr_ôem
)

270 
	`ôem_íqueue
((
ƒf_drv_˛ock_h™dÀr_ôem_t
 **)&
m_˛ock_cb
.
p_lf_hód
,

271 
p_h™dÀr_ôem
);

273 i‡(
m_˛ock_cb
.
lf˛k_ªque°s
 == 0)

275 
	`lf˛k_°¨t
();

277 ++(
m_˛ock_cb
.
lf˛k_ªque°s
);

278 
	`CRITICAL_REGION_EXIT
();

281 
	`ASSERT
(
m_˛ock_cb
.
lf˛k_ªque°s
 > 0);

282 
	}
}

284 
	$ƒf_drv_˛ock_lf˛k_ªÀa£
()

286 
	`ASSERT
(
m_˛ock_cb
.
moduÀ_öôülized
);

287 
	`ASSERT
(
m_˛ock_cb
.
lf˛k_ªque°s
 > 0);

289 
	`CRITICAL_REGION_ENTER
();

290 --(
m_˛ock_cb
.
lf˛k_ªque°s
);

291 i‡(
m_˛ock_cb
.
lf˛k_ªque°s
 == 0)

293 
	`lf˛k_°›
();

295 
	`CRITICAL_REGION_EXIT
();

296 
	}
}

298 
boﬁ
 
	$ƒf_drv_˛ock_lf˛k_is_ru¬ög
()

300 
	`ASSERT
(
m_˛ock_cb
.
moduÀ_öôülized
);

302 #ifde‡
SOFTDEVICE_PRESENT


303 i‡(
	`so·devi˚_h™dÀr_is_íabÀd
())

305  
åue
;

309  
	`ƒf_˛ock_lf_is_ru¬ög
();

310 
	}
}

312 
	$ƒf_drv_˛ock_hf˛k_ªque°
(
ƒf_drv_˛ock_h™dÀr_ôem_t
 * 
p_h™dÀr_ôem
)

314 
	`ASSERT
(
m_˛ock_cb
.
moduÀ_öôülized
);

316 i‡(
m_˛ock_cb
.
hf˛k_⁄
)

318 i‡(
p_h™dÀr_ôem
)

320 
p_h™dÀr_ôem
->
	`evít_h™dÀr
(
NRF_DRV_CLOCK_EVT_HFCLK_STARTED
);

322 
	`CRITICAL_REGION_ENTER
();

323 ++(
m_˛ock_cb
.
hf˛k_ªque°s
);

324 
	`CRITICAL_REGION_EXIT
();

328 
	`CRITICAL_REGION_ENTER
();

329 i‡(
p_h™dÀr_ôem
)

331 
	`ôem_íqueue
((
ƒf_drv_˛ock_h™dÀr_ôem_t
 **)&
m_˛ock_cb
.
p_hf_hód
,

332 
p_h™dÀr_ôem
);

334 i‡(
m_˛ock_cb
.
hf˛k_ªque°s
 == 0)

336 
	`hf˛k_°¨t
();

338 ++(
m_˛ock_cb
.
hf˛k_ªque°s
);

339 
	`CRITICAL_REGION_EXIT
();

342 
	`ASSERT
(
m_˛ock_cb
.
hf˛k_ªque°s
 > 0);

343 
	}
}

345 
	$ƒf_drv_˛ock_hf˛k_ªÀa£
()

347 
	`ASSERT
(
m_˛ock_cb
.
moduÀ_öôülized
);

348 
	`ASSERT
(
m_˛ock_cb
.
hf˛k_ªque°s
 > 0);

350 
	`CRITICAL_REGION_ENTER
();

351 --(
m_˛ock_cb
.
hf˛k_ªque°s
);

352 i‡(
m_˛ock_cb
.
hf˛k_ªque°s
 == 0)

354 
	`hf˛k_°›
();

356 
	`CRITICAL_REGION_EXIT
();

357 
	}
}

359 
boﬁ
 
	$ƒf_drv_˛ock_hf˛k_is_ru¬ög
()

361 
	`ASSERT
(
m_˛ock_cb
.
moduÀ_öôülized
);

363 #ifde‡
SOFTDEVICE_PRESENT


364 i‡(
	`so·devi˚_h™dÀr_is_íabÀd
())

366 
uöt32_t
 
is_ru¬ög
;

367 
	`UNUSED_VARIABLE
(
	`sd_˛ock_hf˛k_is_ru¬ög
(&
is_ru¬ög
));

368  (
is_ru¬ög
 ? 
åue
 : 
Ál£
);

372  
	`ƒf_˛ock_hf_is_ru¬ög
(
NRF_CLOCK_HFCLK_HIGH_ACCURACY
);

373 
	}
}

375 #i‡
CALIBRATION_SUPPORT


376 
	$˛ock_ˇlibøti⁄_hf_°¨ãd
(
ƒf_drv_˛ock_evt_ty≥_t
 
evít
)

378 i‡(
m_˛ock_cb
.
ˇl_°©e
 =
CAL_STATE_ABORT
)

380 
	`ƒf_drv_˛ock_hf˛k_ªÀa£
();

381 
m_˛ock_cb
.
ˇl_°©e
 = 
CAL_STATE_IDLE
;

382 i‡(
m_˛ock_cb
.
ˇl_d⁄e_h™dÀr
)

384 
m_˛ock_cb
.
	`ˇl_d⁄e_h™dÀr
(
NRF_DRV_CLOCK_EVT_CAL_ABORTED
);

389 
	`ƒf_˛ock_evít_˛ór
(
NRF_CLOCK_EVENT_DONE
);

390 
	`ƒf_˛ock_öt_íabÀ
(
NRF_CLOCK_INT_DONE_MASK
);

391 
m_˛ock_cb
.
ˇl_°©e
 = 
CAL_STATE_CAL
;

392 
	`ƒf_˛ock_èsk_åiggî
(
NRF_CLOCK_TASK_CAL
);

394 
	}
}

397 
ªt_code_t
 
	$ƒf_drv_˛ock_ˇlibøti⁄_°¨t
(
uöt8_t
 
öãrvÆ
, 
ƒf_drv_˛ock_evít_h™dÀr_t
 
h™dÀr
)

399 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

400 #i‡
CALIBRATION_SUPPORT


401 
	`ASSERT
(
m_˛ock_cb
.
ˇl_°©e
 =
CAL_STATE_IDLE
);

402 i‡(
m_˛ock_cb
.
lf˛k_⁄
 =
Ál£
)

404 
îr_code
 = 
NRF_ERROR_INVALID_STATE
;

406 i‡(
m_˛ock_cb
.
ˇl_°©e
 =
CAL_STATE_IDLE
)

408 
m_˛ock_cb
.
ˇl_d⁄e_h™dÀr
 = 
h™dÀr
;

409 
m_˛ock_cb
.
ˇl_hf˛k_°¨ãd_h™dÀr_ôem
.
evít_h™dÀr
 = 
˛ock_ˇlibøti⁄_hf_°¨ãd
;

410 i‡(
öãrvÆ
 == 0)

412 
m_˛ock_cb
.
ˇl_°©e
 = 
CAL_STATE_HFCLK_REQ
;

413 
	`ƒf_drv_˛ock_hf˛k_ªque°
(&
m_˛ock_cb
.
ˇl_hf˛k_°¨ãd_h™dÀr_ôem
);

417 
m_˛ock_cb
.
ˇl_°©e
 = 
CAL_STATE_CT
;

418 
	`ƒf_˛ock_ˇl_timî_timeout_£t
(
öãrvÆ
);

419 
	`ƒf_˛ock_evít_˛ór
(
NRF_CLOCK_EVENT_CTTO
);

420 
	`ƒf_˛ock_öt_íabÀ
(
NRF_CLOCK_INT_CTTO_MASK
);

421 
	`ƒf_˛ock_èsk_åiggî
(
NRF_CLOCK_TASK_CTSTART
);

426 
îr_code
 = 
NRF_ERROR_BUSY
;

428 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

429  
îr_code
;

431 
îr_code
 = 
NRF_ERROR_FORBIDDEN
;

432 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

433  
îr_code
;

435 
	}
}

437 
ªt_code_t
 
	$ƒf_drv_˛ock_ˇlibøti⁄_ab‹t
()

439 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

440 #i‡
CALIBRATION_SUPPORT


441 
	`CRITICAL_REGION_ENTER
();

442 
m_˛ock_cb
.
ˇl_°©e
)

444 
CAL_STATE_CT
:

445 
	`ƒf_˛ock_öt_dißbÀ
(
NRF_CLOCK_INT_CTTO_MASK
);

446 
	`ƒf_˛ock_èsk_åiggî
(
NRF_CLOCK_TASK_CTSTOP
);

447 
m_˛ock_cb
.
ˇl_°©e
 = 
CAL_STATE_IDLE
;

448 i‡(
m_˛ock_cb
.
ˇl_d⁄e_h™dÀr
)

450 
m_˛ock_cb
.
	`ˇl_d⁄e_h™dÀr
(
NRF_DRV_CLOCK_EVT_CAL_ABORTED
);

453 
CAL_STATE_HFCLK_REQ
:

455 
CAL_STATE_CAL
:

456 
m_˛ock_cb
.
ˇl_°©e
 = 
CAL_STATE_ABORT
;

461 
	`CRITICAL_REGION_EXIT
();

463 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

464  
îr_code
;

466 
îr_code
 = 
NRF_ERROR_FORBIDDEN
;

467 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

468  
îr_code
;

470 
	}
}

472 
ªt_code_t
 
	$ƒf_drv_˛ock_is_ˇlibøtög
(
boﬁ
 * 
p_is_ˇlibøtög
)

474 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

475 #i‡
CALIBRATION_SUPPORT


476 
	`ASSERT
(
m_˛ock_cb
.
moduÀ_öôülized
);

477 *
p_is_ˇlibøtög
 = (
m_˛ock_cb
.
ˇl_°©e
 !
CAL_STATE_IDLE
);

478 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

479  
îr_code
;

481 
îr_code
 = 
NRF_ERROR_FORBIDDEN
;

482 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

483  
îr_code
;

485 
	}
}

487 
__STATIC_INLINE
 
	$˛ock_˛k_°¨ãd_nŸify
(
ƒf_drv_˛ock_evt_ty≥_t
 
evt_ty≥
)

489 
ƒf_drv_˛ock_h™dÀr_ôem_t
 **
p_hód
;

490 i‡(
evt_ty≥
 =
NRF_DRV_CLOCK_EVT_HFCLK_STARTED
)

492 
p_hód
 = (
ƒf_drv_˛ock_h™dÀr_ôem_t
 **)&
m_˛ock_cb
.
p_hf_hód
;

496 
p_hód
 = (
ƒf_drv_˛ock_h™dÀr_ôem_t
 **)&
m_˛ock_cb
.
p_lf_hód
;

501 
ƒf_drv_˛ock_h™dÀr_ôem_t
 * 
p_ôem
 = 
	`ôem_dequeue
(
p_hód
);

502 i‡(!
p_ôem
)

507 
p_ôem
->
	`evít_h™dÀr
(
evt_ty≥
);

509 
	}
}

511 #i‡
NRF_DRV_COMMON_POWER_CLOCK_ISR


512 
	$ƒf_drv_˛ock_⁄IRQ
()

514 
	$POWER_CLOCK_IRQH™dÀr
()

517 i‡(
	`ƒf_˛ock_evít_check
(
NRF_CLOCK_EVENT_HFCLKSTARTED
))

519 
	`ƒf_˛ock_evít_˛ór
(
NRF_CLOCK_EVENT_HFCLKSTARTED
);

520 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_CLOCK_EVENT_HFCLKSTARTED
));

521 
	`ƒf_˛ock_öt_dißbÀ
(
NRF_CLOCK_INT_HF_STARTED_MASK
);

522 
m_˛ock_cb
.
hf˛k_⁄
 = 
åue
;

523 
	`˛ock_˛k_°¨ãd_nŸify
(
NRF_DRV_CLOCK_EVT_HFCLK_STARTED
);

525 i‡(
	`ƒf_˛ock_evít_check
(
NRF_CLOCK_EVENT_LFCLKSTARTED
))

527 
	`ƒf_˛ock_evít_˛ór
(
NRF_CLOCK_EVENT_LFCLKSTARTED
);

528 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_CLOCK_EVENT_LFCLKSTARTED
));

529 
	`ƒf_˛ock_öt_dißbÀ
(
NRF_CLOCK_INT_LF_STARTED_MASK
);

530 
m_˛ock_cb
.
lf˛k_⁄
 = 
åue
;

531 
	`˛ock_˛k_°¨ãd_nŸify
(
NRF_DRV_CLOCK_EVT_LFCLK_STARTED
);

533 #i‡
CALIBRATION_SUPPORT


534 i‡(
	`ƒf_˛ock_evít_check
(
NRF_CLOCK_EVENT_CTTO
))

536 
	`ƒf_˛ock_evít_˛ór
(
NRF_CLOCK_EVENT_CTTO
);

537 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_CLOCK_EVENT_CTTO
));

538 
	`ƒf_˛ock_öt_dißbÀ
(
NRF_CLOCK_INT_CTTO_MASK
);

539 
	`ƒf_drv_˛ock_hf˛k_ªque°
(&
m_˛ock_cb
.
ˇl_hf˛k_°¨ãd_h™dÀr_ôem
);

542 i‡(
	`ƒf_˛ock_evít_check
(
NRF_CLOCK_EVENT_DONE
))

544 
	`ƒf_˛ock_evít_˛ór
(
NRF_CLOCK_EVENT_DONE
);

545 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_CLOCK_EVENT_DONE
));

546 
	`ƒf_˛ock_öt_dißbÀ
(
NRF_CLOCK_INT_DONE_MASK
);

547 
	`ƒf_drv_˛ock_hf˛k_ªÀa£
();

548 
boﬁ
 
ab‹ãd
 = (
m_˛ock_cb
.
ˇl_°©e
 =
CAL_STATE_ABORT
);

549 
m_˛ock_cb
.
ˇl_°©e
 = 
CAL_STATE_IDLE
;

550 i‡(
m_˛ock_cb
.
ˇl_d⁄e_h™dÀr
)

552 
m_˛ock_cb
.
	`ˇl_d⁄e_h™dÀr
(
ab‹ãd
 ?

553 
NRF_DRV_CLOCK_EVT_CAL_ABORTED
 : 
NRF_DRV_CLOCK_EVT_CAL_DONE
);

557 
	}
}

559 #ifde‡
SOFTDEVICE_PRESENT


561 
	$ƒf_drv_˛ock_⁄_soc_evít
(
uöt32_t
 
evt_id
)

563 i‡(
evt_id
 =
NRF_EVT_HFCLKSTARTED
)

565 
	`˛ock_˛k_°¨ãd_nŸify
(
NRF_DRV_CLOCK_EVT_HFCLK_STARTED
);

567 
	}
}

569 
	$ƒf_drv_˛ock_⁄_sd_íabÀ
()

571 
	`CRITICAL_REGION_ENTER
();

573 i‡(!
m_˛ock_cb
.
moduÀ_öôülized
)

575 ()
	`ƒf_drv_˛ock_öô
();

578 ++(
m_˛ock_cb
.
lf˛k_ªque°s
);

579 
m_˛ock_cb
.
lf˛k_⁄
 = 
åue
;

580 
	`CRITICAL_REGION_EXIT
();

581 
	}
}

583 
	$ƒf_drv_˛ock_⁄_sd_dißbÀ
()

586 
	`ASSERT
(
m_˛ock_cb
.
moduÀ_öôülized
);

587 
	`ƒf_drv_comm⁄_úq_íabÀ
(
POWER_CLOCK_IRQn
, 
CLOCK_CONFIG_IRQ_PRIORITY
);

590 
	`ƒf_drv_˛ock_lf˛k_ªÀa£
();

591 
	}
}

595 #unde‡
NRF_CLOCK_LFCLK_RC


596 #unde‡
NRF_CLOCK_LFCLK_Xèl


597 #unde‡
NRF_CLOCK_LFCLK_Sy¡h


	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\common\nrf_drv_common.c

41 
	~<°ddef.h
>

42 
	~"ƒf_drv_comm⁄.h
"

43 
	~"ƒf_as£π.h
"

44 
	~"≠p_utû_∂©f‹m.h
"

45 
	~"ƒf_≥rùhîÆs.h
"

47 #i‡
NRF_DRV_COMMON_POWER_CLOCK_ISR


48 
	~"ƒf_drv_powî.h
"

49 
	~"ƒf_drv_˛ock.h
"

51 #ifde‡
SOFTDEVICE_PRESENT


52 
	~"ƒf_soc.h
"

55 #i‡
NRF_MODULE_ENABLED
(
PERIPHERAL_RESOURCE_SHARING
)

57 
	#NRF_LOG_MODULE_NAME
 "COMMON"

	)

59 #i‡
COMMON_CONFIG_LOG_ENABLED


60 
	#NRF_LOG_LEVEL
 
COMMON_CONFIG_LOG_LEVEL


	)

61 
	#NRF_LOG_INFO_COLOR
 
COMMON_CONFIG_INFO_COLOR


	)

62 
	#NRF_LOG_DEBUG_COLOR
 
COMMON_CONFIG_DEBUG_COLOR


	)

64 
	#NRF_LOG_LEVEL
 0

	)

66 
	~"ƒf_log.h
"

67 
	~"ƒf_log_˘æ.h
"

70 
ƒf_drv_úq_h™dÀr_t
 
	mh™dÀr
;

71 
boﬁ
 
	macquúed
;

72 } 
	tsh¨ed_ªsour˚_t
;

75 #i‡(
NRF_MODULE_ENABLED
(
SPI0
Ë|| NRF_MODULE_ENABLED(
SPIS0
Ë|| NRF_MODULE_ENABLED(
TWI0
Ë|| NRF_MODULE_ENABLED(
TWIS0
))

76 
	#SERIAL_BOX_0_IN_USE


	)

78 #i‚de‡
IS_SERIAL_BOX_0


79 
	#IS_SERIAL_BOX_0
(
p_≥r_ba£
Ë’_≥r_ba£ =
NRF_SPI0
)

	)

82 
sh¨ed_ªsour˚_t
 
	gm_£rül_box_0
 = { .
acquúed
 = 
Ál£
 };

83 
	$SPI0_TWI0_IRQH™dÀr
()

85 
	`ASSERT
(
m_£rül_box_0
.
h™dÀr
);

86 
m_£rül_box_0
.
	`h™dÀr
();

87 
	}
}

91 #i‡(
NRF_MODULE_ENABLED
(
SPI1
Ë|| NRF_MODULE_ENABLED(
SPIS1
Ë|| NRF_MODULE_ENABLED(
TWI1
Ë|| NRF_MODULE_ENABLED(
TWIS1
))

92 
	#SERIAL_BOX_1_IN_USE


	)

94 #i‚de‡
IS_SERIAL_BOX_1


95 
	#IS_SERIAL_BOX_1
(
p_≥r_ba£
Ë’_≥r_ba£ =
NRF_SPI1
)

	)

98 
sh¨ed_ªsour˚_t
 
	gm_£rül_box_1
 = { .
acquúed
 = 
Ál£
 };

99 #ifde‡
TWIM_PRESENT


100 
	$SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQH™dÀr
()

102 
	$SPI1_TWI1_IRQH™dÀr
()

105 
	`ASSERT
(
m_£rül_box_1
.
h™dÀr
);

106 
m_£rül_box_1
.
	`h™dÀr
();

107 
	}
}

111 #i‡(
NRF_MODULE_ENABLED
(
SPI2
Ë|| NRF_MODULE_ENABLED(
SPIS2
))

112 
	#SERIAL_BOX_2_IN_USE


	)

114 #i‚de‡
IS_SERIAL_BOX_2


115 
	#IS_SERIAL_BOX_2
(
p_≥r_ba£
Ë’_≥r_ba£ =
NRF_SPI2
)

	)

118 
sh¨ed_ªsour˚_t
 
	gm_£rül_box_2
 = { .
acquúed
 = 
Ál£
 };

119 
	$SPIM2_SPIS2_SPI2_IRQH™dÀr
()

121 
	`ASSERT
(
m_£rül_box_2
.
h™dÀr
);

122 
m_£rül_box_2
.
	`h™dÀr
();

123 
	}
}

127 #i‡(
NRF_MODULE_ENABLED
(
COMP
Ë|| NRF_MODULE_ENABLED(
LPCOMP
))

128 
	#COMP_LPCOMP_IN_USE


	)

130 #i‚de‡
IS_COMP_LPCOMP


131 
	#IS_COMP_LPCOMP
(
p_≥r_ba£
Ë(’_≥r_ba£Ë=
NRF_LPCOMP
)

	)

134 
sh¨ed_ªsour˚_t
 
	gm_comp_Õcomp
 = { .
acquúed
 = 
Ál£
 };

135 
	$LPCOMP_IRQH™dÀr
()

137 
	`ASSERT
(
m_comp_Õcomp
.
h™dÀr
);

138 
m_comp_Õcomp
.
	`h™dÀr
();

139 
	}
}

142 #i‡
deföed
(
SERIAL_BOX_0_IN_USE
) || \

143 
deföed
(
SERIAL_BOX_1_IN_USE
) || \

144 
deföed
(
SERIAL_BOX_2_IN_USE
) || \

145 
	$deföed
(
COMP_LPCOMP_IN_USE
)

146 
ªt_code_t
 
	$acquúe_sh¨ed_ªsour˚
(
sh¨ed_ªsour˚_t
 * 
p_ªsour˚
,

147 
ƒf_drv_úq_h™dÀr_t
 
h™dÀr
)

149 
ªt_code_t
 
îr_code
;

151 
boﬁ
 
busy
 = 
Ál£
;

153 
	`CRITICAL_REGION_ENTER
();

154 i‡(
p_ªsour˚
->
acquúed
)

156 
busy
 = 
åue
;

160 
p_ªsour˚
->
acquúed
 = 
åue
;

162 
	`CRITICAL_REGION_EXIT
();

164 i‡(
busy
)

166 
îr_code
 = 
NRF_ERROR_BUSY
;

167 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

168  
îr_code
;

171 
p_ªsour˚
->
h™dÀr
 = handler;

172 
îr_code
 = 
NRF_SUCCESS
;

173 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

174  
îr_code
;

175 
	}
}

178 
ªt_code_t
 
	$ƒf_drv_comm⁄_≥r_ªs_acquúe
(c⁄° * 
p_≥r_ba£
,

179 
ƒf_drv_úq_h™dÀr_t
 
h™dÀr
)

181 #ifde‡
SERIAL_BOX_0_IN_USE


182 i‡(
	`IS_SERIAL_BOX_0
(
p_≥r_ba£
))

184  
	`acquúe_sh¨ed_ªsour˚
(&
m_£rül_box_0
, 
h™dÀr
);

188 #ifde‡
SERIAL_BOX_1_IN_USE


189 i‡(
	`IS_SERIAL_BOX_1
(
p_≥r_ba£
))

191  
	`acquúe_sh¨ed_ªsour˚
(&
m_£rül_box_1
, 
h™dÀr
);

195 #ifde‡
SERIAL_BOX_2_IN_USE


196 i‡(
	`IS_SERIAL_BOX_2
(
p_≥r_ba£
))

198  
	`acquúe_sh¨ed_ªsour˚
(&
m_£rül_box_2
, 
h™dÀr
);

202 #ifde‡
COMP_LPCOMP_IN_USE


203 i‡(
	`IS_COMP_LPCOMP
(
p_≥r_ba£
))

205  
	`acquúe_sh¨ed_ªsour˚
(&
m_comp_Õcomp
, 
h™dÀr
);

208 
ªt_code_t
 
îr_code
;

210 
îr_code
 = 
NRF_ERROR_INVALID_PARAM
;

211 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

212  
îr_code
;

213 
	}
}

215 
	$ƒf_drv_comm⁄_≥r_ªs_ªÀa£
(c⁄° * 
p_≥r_ba£
)

217 #ifde‡
SERIAL_BOX_0_IN_USE


218 i‡(
	`IS_SERIAL_BOX_0
(
p_≥r_ba£
))

220 
m_£rül_box_0
.
acquúed
 = 
Ál£
;

225 #ifde‡
SERIAL_BOX_1_IN_USE


226 i‡(
	`IS_SERIAL_BOX_1
(
p_≥r_ba£
))

228 
m_£rül_box_1
.
acquúed
 = 
Ál£
;

233 #ifde‡
SERIAL_BOX_2_IN_USE


234 i‡(
	`IS_SERIAL_BOX_2
(
p_≥r_ba£
))

236 
m_£rül_box_2
.
acquúed
 = 
Ál£
;

241 #ifde‡
COMP_LPCOMP_IN_USE


242 i‡(
	`IS_COMP_LPCOMP
(
p_≥r_ba£
))

244 
m_comp_Õcomp
.
acquúed
 = 
Ál£
;

250 
	}
}

254 #i‡
NRF_MODULE_ENABLED
(
POWER
)

255 
	$ƒf_drv_comm⁄_powî_úq_dißbÀ
()

257 #i‡
NRF_DRV_COMMON_POWER_CLOCK_ISR


258 if(!
	`ƒf_drv_˛ock_öô_check
())

261 
	`ƒf_drv_comm⁄_úq_dißbÀ
(
POWER_CLOCK_IRQn
);

263 
	}
}

266 #i‡
NRF_MODULE_ENABLED
(
CLOCK
)

267 
	$ƒf_drv_comm⁄_˛ock_úq_dißbÀ
()

269 #i‡
NRF_DRV_COMMON_POWER_CLOCK_ISR


270 if(!
	`ƒf_drv_powî_öô_check
())

273 
	`ƒf_drv_comm⁄_úq_dißbÀ
(
POWER_CLOCK_IRQn
);

275 
	}
}

278 #i‡
NRF_DRV_COMMON_POWER_CLOCK_ISR


279 
	$POWER_CLOCK_IRQH™dÀr
()

281 
	`ƒf_drv_˛ock_⁄IRQ
();

282 
	`ƒf_drv_powî_⁄IRQ
();

284 
	`ƒf_drv_˛ock_⁄IRQ
();

285 
	`ƒf_drv_powî_⁄IRQ
();

286 
	}
}

290 
	$ƒf_drv_comm⁄_úq_íabÀ
(
IRQn_Ty≥
 
IRQn
, 
uöt8_t
 
¥i‹ôy
)

292 
	`INTERRUPT_PRIORITY_ASSERT
(
¥i‹ôy
);

294 
	`NVIC_SëPri‹ôy
(
IRQn
, 
¥i‹ôy
);

295 
	`NVIC_CÀ¨PídögIRQ
(
IRQn
);

296 
	`NVIC_E«bÀIRQ
(
IRQn
);

297 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\gpiote\nrf_drv_gpiote.c

41 
	~"sdk_comm⁄.h
"

42 #i‡
NRF_MODULE_ENABLED
(
GPIOTE
)

43 
	~"ƒf_drv_gpiŸe.h
"

44 
	~"ƒf_drv_comm⁄.h
"

45 
	~"≠p_utû_∂©f‹m.h
"

46 
	~"ƒf_as£π.h
"

47 
	~"ƒf_bômask.h
"

48 
	~<°rög.h
>

50 
	#NRF_LOG_MODULE_NAME
 "GPIOTE"

	)

52 #i‡
GPIOTE_CONFIG_LOG_ENABLED


53 
	#NRF_LOG_LEVEL
 
GPIOTE_CONFIG_LOG_LEVEL


	)

54 
	#NRF_LOG_INFO_COLOR
 
GPIOTE_CONFIG_INFO_COLOR


	)

55 
	#NRF_LOG_DEBUG_COLOR
 
GPIOTE_CONFIG_DEBUG_COLOR


	)

57 
	#NRF_LOG_LEVEL
 0

	)

59 
	~"ƒf_log.h
"

60 
	~"ƒf_log_˘æ.h
"

63 
INTERRUPT_PRIORITY_VALIDATION
(
GPIOTE_CONFIG_IRQ_PRIORITY
);

65 
	#FORBIDDEN_HANDLER_ADDRESS
 ((
ƒf_drv_gpiŸe_evt_h™dÀr_t
)
UINT32_MAX
)

	)

66 
	#PIN_NOT_USED
 (-1)

	)

67 
	#PIN_USED
 (-2)

	)

68 
	#NO_CHANNELS
 (-1)

	)

69 
	#SENSE_FIELD_POS
 (6)

	)

70 
	#SENSE_FIELD_MASK
 (0xC0)

	)

77 
	#TE_IDX_TO_EVENT_ADDR
(
idx
Ë(
ƒf_gpiŸe_evíts_t
)((
uöt32_t
)
NRF_GPIOTE_EVENTS_IN_0
 + \

78 ((
uöt32_t
Ë* (
idx
)))

	)

85 
	#TE_OUT_IDX_TO_TASK_ADDR
(
idx
Ë(
ƒf_gpiŸe_èsks_t
)((
uöt32_t
)
NRF_GPIOTE_TASKS_OUT_0
 + \

86 ((
uöt32_t
Ë* (
idx
)))

	)

88 #i‡
deföed
(
GPIOTE_FEATURE_SET_PRESENT
Ë|| deföed(
__SDK_DOXYGEN__
)

94 
	#TE_SET_IDX_TO_TASK_ADDR
(
idx
Ë(
ƒf_gpiŸe_èsks_t
)((
uöt32_t
)
NRF_GPIOTE_TASKS_SET_0
 + \

95 ((
uöt32_t
Ë* (
idx
)))

	)

99 #i‡
deföed
(
GPIOTE_FEATURE_CLR_PRESENT
Ë|| deföed(
__SDK_DOXYGEN__
)

105 
	#TE_CLR_IDX_TO_TASK_ADDR
(
idx
Ë(
ƒf_gpiŸe_èsks_t
)((
uöt32_t
)
NRF_GPIOTE_TASKS_CLR_0
 + \

106 ((
uöt32_t
Ë* (
idx
)))

	)

113 
ƒf_drv_gpiŸe_evt_h™dÀr_t
 
	mh™dÀrs
[
GPIOTE_CH_NUM
 + 
GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS
];

114 
öt8_t
 
	mpö_assignmíts
[
NUMBER_OF_PINS
];

115 
öt8_t
 
	mp‹t_h™dÀrs_pös
[
GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS
];

116 
ƒf_drv_°©e_t
 
	m°©e
;

117 } 
	tgpiŸe_c⁄åﬁ_block_t
;

119 
gpiŸe_c⁄åﬁ_block_t
 
	gm_cb
;

121 
__STATIC_INLINE
 
boﬁ
 
	$pö_ö_u£
(
uöt32_t
 
pö
)

123  (
m_cb
.
pö_assignmíts
[
pö
] !
PIN_NOT_USED
);

124 
	}
}

127 
__STATIC_INLINE
 
boﬁ
 
	$pö_ö_u£_as_n⁄_èsk_out
(
uöt32_t
 
pö
)

129  (
m_cb
.
pö_assignmíts
[
pö
] =
PIN_USED
);

130 
	}
}

133 
__STATIC_INLINE
 
boﬁ
 
	$pö_ö_u£_by_ã
(
uöt32_t
 
pö
)

135  (
m_cb
.
pö_assignmíts
[
pö
] >= 0 && m_cb.pin_assignments[pin] <

136 
GPIOTE_CH_NUM
Ë? 
åue
 : 
Ál£
;

137 
	}
}

140 
__STATIC_INLINE
 
boﬁ
 
	$pö_ö_u£_by_p‹t
(
uöt32_t
 
pö
)

142  (
m_cb
.
pö_assignmíts
[
pö
] >
GPIOTE_CH_NUM
);

143 
	}
}

146 
__STATIC_INLINE
 
boﬁ
 
	$pö_ö_u£_by_gpiŸe
(
uöt32_t
 
pö
)

148  (
m_cb
.
pö_assignmíts
[
pö
] >= 0);

149 
	}
}

152 
__STATIC_INLINE
 
	$pö_ö_u£_by_ã_£t
(
uöt32_t
 
pö
,

153 
uöt32_t
 
ch™√l_id
,

154 
ƒf_drv_gpiŸe_evt_h™dÀr_t
 
h™dÀr
,

155 
boﬁ
 
is_ch™√l
)

157 
m_cb
.
pö_assignmíts
[
pö
] = 
ch™√l_id
;

158 
m_cb
.
h™dÀrs
[
ch™√l_id
] = 
h™dÀr
;

159 i‡(!
is_ch™√l
)

161 
m_cb
.
p‹t_h™dÀrs_pös
[
ch™√l_id
 - 
GPIOTE_CH_NUM
] = (
öt8_t
)
pö
;

163 
	}
}

166 
__STATIC_INLINE
 
	$pö_ö_u£_£t
(
uöt32_t
 
pö
)

168 
m_cb
.
pö_assignmíts
[
pö
] = 
PIN_USED
;

169 
	}
}

172 
__STATIC_INLINE
 
	$pö_ö_u£_˛ór
(
uöt32_t
 
pö
)

174 
m_cb
.
pö_assignmíts
[
pö
] = 
PIN_NOT_USED
;

175 
	}
}

178 
__STATIC_INLINE
 
öt8_t
 
	$ch™√l_p‹t_gë
(
uöt32_t
 
pö
)

180  
m_cb
.
pö_assignmíts
[
pö
];

181 
	}
}

184 
__STATIC_INLINE
 
ƒf_drv_gpiŸe_evt_h™dÀr_t
 
	$ch™√l_h™dÀr_gë
(
uöt32_t
 
ch™√l
)

186  
m_cb
.
h™dÀrs
[
ch™√l
];

187 
	}
}

190 
öt8_t
 
	$ch™√l_p‹t_Æloc
(
uöt32_t
 
pö
, 
ƒf_drv_gpiŸe_evt_h™dÀr_t
 
h™dÀr
, 
boﬁ
 
ch™√l
)

192 
öt8_t
 
ch™√l_id
 = 
NO_CHANNELS
;

193 
uöt32_t
 
i
;

195 
uöt32_t
 
°¨t_idx
 = 
ch™√l
 ? 0 : 
GPIOTE_CH_NUM
;

196 
uöt32_t
 
íd_idx
 =

197 
ch™√l
 ? 
GPIOTE_CH_NUM
 : (GPIOTE_CH_NUM + 
GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS
);

201 
i
 = 
°¨t_idx
; i < 
íd_idx
; i++)

203 i‡(
m_cb
.
h™dÀrs
[
i
] =
FORBIDDEN_HANDLER_ADDRESS
)

205 
	`pö_ö_u£_by_ã_£t
(
pö
, 
i
, 
h™dÀr
, 
ch™√l
);

206 
ch™√l_id
 = 
i
;

211  
ch™√l_id
;

212 
	}
}

215 
	$ch™√l_‰ì
(
uöt8_t
 
ch™√l_id
)

217 
m_cb
.
h™dÀrs
[
ch™√l_id
] = 
FORBIDDEN_HANDLER_ADDRESS
;

218 i‡(
ch™√l_id
 >
GPIOTE_CH_NUM
)

220 
m_cb
.
p‹t_h™dÀrs_pös
[
ch™√l_id
 - 
GPIOTE_CH_NUM
] = (
öt8_t
)
PIN_NOT_USED
;

222 
	}
}

225 
ªt_code_t
 
	$ƒf_drv_gpiŸe_öô
()

227 
ªt_code_t
 
îr_code
;

229 i‡(
m_cb
.
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
)

231 
îr_code
 = 
NRF_ERROR_INVALID_STATE
;

232 
	`NRF_LOG_WARNING
("Function: %s,Érror code: %s.\r\n",

233 (
uöt32_t
)
__func__
,

234 (
uöt32_t
)
	`ERR_TO_STR
(
îr_code
));

235  
îr_code
;

238 
uöt8_t
 
i
;

240 
i
 = 0; i < 
NUMBER_OF_PINS
; i++)

242 
	`pö_ö_u£_˛ór
(
i
);

245 
i
 = 0; i < (
GPIOTE_CH_NUM
 + 
GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS
); i++)

247 
	`ch™√l_‰ì
(
i
);

250 
	`ƒf_drv_comm⁄_úq_íabÀ
(
GPIOTE_IRQn
, 
GPIOTE_CONFIG_IRQ_PRIORITY
);

251 
	`ƒf_gpiŸe_evít_˛ór
(
NRF_GPIOTE_EVENTS_PORT
);

252 
	`ƒf_gpiŸe_öt_íabÀ
(
GPIOTE_INTENSET_PORT_Msk
);

253 
m_cb
.
°©e
 = 
NRF_DRV_STATE_INITIALIZED
;

255 
îr_code
 = 
NRF_SUCCESS
;

256 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
,

257 (
uöt32_t
)
	`ERR_TO_STR
(
îr_code
));

258  
îr_code
;

259 
	}
}

262 
boﬁ
 
	$ƒf_drv_gpiŸe_is_öô
()

264  (
m_cb
.
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
Ë? 
åue
 : 
Ál£
;

265 
	}
}

268 
	$ƒf_drv_gpiŸe_unöô
()

270 
	`ASSERT
(
m_cb
.
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
);

272 
uöt32_t
 
i
;

274 
i
 = 0; i < 
NUMBER_OF_PINS
; i++)

276 i‡(
	`pö_ö_u£_as_n⁄_èsk_out
(
i
))

278 
	`ƒf_drv_gpiŸe_out_unöô
(
i
);

280 i‡–
	`pö_ö_u£_by_gpiŸe
(
i
))

285 
	`ƒf_drv_gpiŸe_ö_unöô
(
i
);

288 
m_cb
.
°©e
 = 
NRF_DRV_STATE_UNINITIALIZED
;

289 
	`NRF_LOG_INFO
("Uninitialized.\r\n");

290 
	}
}

293 
ªt_code_t
 
	$ƒf_drv_gpiŸe_out_öô
(
ƒf_drv_gpiŸe_pö_t
 
pö
,

294 
ƒf_drv_gpiŸe_out_c⁄fig_t
 c⁄° * 
p_c⁄fig
)

296 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

297 
	`ASSERT
(
m_cb
.
°©e
 =
NRF_DRV_STATE_INITIALIZED
);

298 
	`ASSERT
(
p_c⁄fig
);

300 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

302 i‡(
	`pö_ö_u£
(
pö
))

304 
îr_code
 = 
NRF_ERROR_INVALID_STATE
;

308 i‡(
p_c⁄fig
->
èsk_pö
)

310 
öt8_t
 
ch™√l
 = 
	`ch™√l_p‹t_Æloc
(
pö
, 
NULL
, 
åue
);

312 i‡(
ch™√l
 !
NO_CHANNELS
)

314 
	`ƒf_gpiŸe_èsk_c⁄figuª
(
ch™√l
, 
pö
, 
p_c⁄fig
->
a˘i⁄
,Ö_c⁄fig->
öô_°©e
);

318 
îr_code
 = 
NRF_ERROR_NO_MEM
;

323 
	`pö_ö_u£_£t
(
pö
);

326 i‡(
îr_code
 =
NRF_SUCCESS
)

328 i‡(
p_c⁄fig
->
öô_°©e
 =
NRF_GPIOTE_INITIAL_VALUE_HIGH
)

330 
	`ƒf_gpio_pö_£t
(
pö
);

334 
	`ƒf_gpio_pö_˛ór
(
pö
);

337 
	`ƒf_gpio_cfg_ouçut
(
pö
);

341 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
,

342 (
uöt32_t
)
	`ERR_TO_STR
(
îr_code
));

343  
îr_code
;

344 
	}
}

347 
	$ƒf_drv_gpiŸe_out_unöô
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

349 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

350 
	`ASSERT
(
	`pö_ö_u£
(
pö
));

352 i‡(
	`pö_ö_u£_by_ã
(
pö
))

354 
	`ch™√l_‰ì
((
uöt8_t
)
	`ch™√l_p‹t_gë
(
pö
));

355 
	`ƒf_gpiŸe_ã_deÁu…
(
	`ch™√l_p‹t_gë
(
pö
));

357 
	`pö_ö_u£_˛ór
(
pö
);

359 
	`ƒf_gpio_cfg_deÁu…
(
pö
);

360 
	}
}

363 
	$ƒf_drv_gpiŸe_out_£t
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

365 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

366 
	`ASSERT
(
	`pö_ö_u£
(
pö
));

367 
	`ASSERT
(!
	`pö_ö_u£_by_ã
(
pö
))

369 
	`ƒf_gpio_pö_£t
(
pö
);

370 
	}
}

373 
	$ƒf_drv_gpiŸe_out_˛ór
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

375 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

376 
	`ASSERT
(
	`pö_ö_u£
(
pö
));

377 
	`ASSERT
(!
	`pö_ö_u£_by_ã
(
pö
))

379 
	`ƒf_gpio_pö_˛ór
(
pö
);

380 
	}
}

383 
	$ƒf_drv_gpiŸe_out_toggÀ
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

385 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

386 
	`ASSERT
(
	`pö_ö_u£
(
pö
));

387 
	`ASSERT
(!
	`pö_ö_u£_by_ã
(
pö
))

389 
	`ƒf_gpio_pö_toggÀ
(
pö
);

390 
	}
}

393 
	$ƒf_drv_gpiŸe_out_èsk_íabÀ
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

395 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

396 
	`ASSERT
(
	`pö_ö_u£
(
pö
));

397 
	`ASSERT
(
	`pö_ö_u£_by_ã
(
pö
))

399 
	`ƒf_gpiŸe_èsk_íabÀ
(
m_cb
.
pö_assignmíts
[
pö
]);

400 
	}
}

403 
	$ƒf_drv_gpiŸe_out_èsk_dißbÀ
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

405 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

406 
	`ASSERT
(
	`pö_ö_u£
(
pö
));

407 
	`ASSERT
(
	`pö_ö_u£_by_ã
(
pö
))

409 
	`ƒf_gpiŸe_èsk_dißbÀ
(
m_cb
.
pö_assignmíts
[
pö
]);

410 
	}
}

413 
uöt32_t
 
	$ƒf_drv_gpiŸe_out_èsk_addr_gë
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

415 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

416 
	`ASSERT
(
	`pö_ö_u£_by_ã
(
pö
));

418 
ƒf_gpiŸe_èsks_t
 
èsk
 = 
	`TE_OUT_IDX_TO_TASK_ADDR
(
	`ch™√l_p‹t_gë
(
pö
));

419  
	`ƒf_gpiŸe_èsk_addr_gë
(
èsk
);

420 
	}
}

423 #i‡
deföed
(
GPIOTE_FEATURE_SET_PRESENT
)

424 
uöt32_t
 
	$ƒf_drv_gpiŸe_£t_èsk_addr_gë
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

426 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

427 
	`ASSERT
(
	`pö_ö_u£_by_ã
(
pö
));

429 
ƒf_gpiŸe_èsks_t
 
èsk
 = 
	`TE_SET_IDX_TO_TASK_ADDR
(
	`ch™√l_p‹t_gë
(
pö
));

430  
	`ƒf_gpiŸe_èsk_addr_gë
(
èsk
);

431 
	}
}

436 #i‡
deföed
(
GPIOTE_FEATURE_CLR_PRESENT
)

437 
uöt32_t
 
	$ƒf_drv_gpiŸe_˛r_èsk_addr_gë
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

439 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

440 
	`ASSERT
(
	`pö_ö_u£_by_ã
(
pö
));

442 
ƒf_gpiŸe_èsks_t
 
èsk
 = 
	`TE_CLR_IDX_TO_TASK_ADDR
(
	`ch™√l_p‹t_gë
(
pö
));

443  
	`ƒf_gpiŸe_èsk_addr_gë
(
èsk
);

444 
	}
}

449 
	$ƒf_drv_gpiŸe_out_èsk_f‹˚
(
ƒf_drv_gpiŸe_pö_t
 
pö
, 
uöt8_t
 
°©e
)

451 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

452 
	`ASSERT
(
	`pö_ö_u£
(
pö
));

453 
	`ASSERT
(
	`pö_ö_u£_by_ã
(
pö
));

455 
ƒf_gpiŸe_outöô_t
 
öô_vÆ
 =

456 
°©e
 ? 
NRF_GPIOTE_INITIAL_VALUE_HIGH
 : 
NRF_GPIOTE_INITIAL_VALUE_LOW
;

457 
	`ƒf_gpiŸe_èsk_f‹˚
(
m_cb
.
pö_assignmíts
[
pö
], 
öô_vÆ
);

458 
	}
}

461 
	$ƒf_drv_gpiŸe_out_èsk_åiggî
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

463 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

464 
	`ASSERT
(
	`pö_ö_u£
(
pö
));

465 
	`ASSERT
(
	`pö_ö_u£_by_ã
(
pö
));

467 
ƒf_gpiŸe_èsks_t
 
èsk
 = 
	`TE_OUT_IDX_TO_TASK_ADDR
(
	`ch™√l_p‹t_gë
(
pö
));

468 
	`ƒf_gpiŸe_èsk_£t
(
èsk
);

469 
	}
}

472 #i‡
deföed
(
GPIOTE_FEATURE_SET_PRESENT
)

473 
	$ƒf_drv_gpiŸe_£t_èsk_åiggî
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

475 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

476 
	`ASSERT
(
	`pö_ö_u£
(
pö
));

477 
	`ASSERT
(
	`pö_ö_u£_by_ã
(
pö
));

479 
ƒf_gpiŸe_èsks_t
 
èsk
 = 
	`TE_SET_IDX_TO_TASK_ADDR
(
	`ch™√l_p‹t_gë
(
pö
));

480 
	`ƒf_gpiŸe_èsk_£t
(
èsk
);

481 
	}
}

486 #i‡ 
deföed
(
GPIOTE_FEATURE_CLR_PRESENT
)

487 
	$ƒf_drv_gpiŸe_˛r_èsk_åiggî
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

489 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

490 
	`ASSERT
(
	`pö_ö_u£
(
pö
));

491 
	`ASSERT
(
	`pö_ö_u£_by_ã
(
pö
));

493 
ƒf_gpiŸe_èsks_t
 
èsk
 = 
	`TE_CLR_IDX_TO_TASK_ADDR
(
	`ch™√l_p‹t_gë
(
pö
));

494 
	`ƒf_gpiŸe_èsk_£t
(
èsk
);

495 
	}
}

500 
ªt_code_t
 
	$ƒf_drv_gpiŸe_ö_öô
(
ƒf_drv_gpiŸe_pö_t
 
pö
,

501 
ƒf_drv_gpiŸe_ö_c⁄fig_t
 c⁄° * 
p_c⁄fig
,

502 
ƒf_drv_gpiŸe_evt_h™dÀr_t
 
evt_h™dÀr
)

504 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

505 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

508 i‡(
	`pö_ö_u£_by_gpiŸe
(
pö
))

510 
îr_code
 = 
NRF_ERROR_INVALID_STATE
;

514 
öt8_t
 
ch™√l
 = 
	`ch™√l_p‹t_Æloc
(
pö
, 
evt_h™dÀr
, 
p_c⁄fig
->
hi_accuøcy
);

515 i‡(
ch™√l
 !
NO_CHANNELS
)

517 i‡(
p_c⁄fig
->
is_w©chî
)

519 
	`ƒf_gpio_cfg_w©chî
(
pö
);

523 
	`ƒf_gpio_cfg_öput
(
pö
, 
p_c⁄fig
->
puŒ
);

526 i‡(
p_c⁄fig
->
hi_accuøcy
)

528 
	`ƒf_gpiŸe_evít_c⁄figuª
(
ch™√l
, 
pö
, 
p_c⁄fig
->
£n£
);

532 
m_cb
.
p‹t_h™dÀrs_pös
[
ch™√l
 -

533 
GPIOTE_CH_NUM
] |(
p_c⁄fig
->
£n£
Ë<< 
SENSE_FIELD_POS
;

538 
îr_code
 = 
NRF_ERROR_NO_MEM
;

542 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
,

543 (
uöt32_t
)
	`ERR_TO_STR
(
îr_code
));

544  
îr_code
;

545 
	}
}

548 
	$ƒf_drv_gpiŸe_ö_evít_íabÀ
(
ƒf_drv_gpiŸe_pö_t
 
pö
, 
boﬁ
 
öt_íabÀ
)

550 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

551 
	`ASSERT
(
	`pö_ö_u£_by_gpiŸe
(
pö
));

552 i‡(
	`pö_ö_u£_by_p‹t
(
pö
))

554 
uöt8_t
 
pö_™d_£n£
 =

555 
m_cb
.
p‹t_h™dÀrs_pös
[
	`ch™√l_p‹t_gë
(
pö
Ë- 
GPIOTE_CH_NUM
];

556 
ƒf_gpiŸe_pﬁ¨ôy_t
 
pﬁ¨ôy
 =

557 (
ƒf_gpiŸe_pﬁ¨ôy_t
)(
pö_™d_£n£
 >> 
SENSE_FIELD_POS
);

558 
ƒf_gpio_pö_£n£_t
 
£n£
;

559 i‡(
pﬁ¨ôy
 =
NRF_GPIOTE_POLARITY_TOGGLE
)

562 
£n£
 = (
	`ƒf_gpio_pö_ªad
(
pö
)) ?

563 
NRF_GPIO_PIN_SENSE_LOW
 : 
NRF_GPIO_PIN_SENSE_HIGH
;

567 
£n£
 = (
pﬁ¨ôy
 =
NRF_GPIOTE_POLARITY_LOTOHI
) ?

568 
NRF_GPIO_PIN_SENSE_HIGH
 : 
NRF_GPIO_PIN_SENSE_LOW
;

570 
	`ƒf_gpio_cfg_£n£_£t
(
pö
, 
£n£
);

572 i‡(
	`pö_ö_u£_by_ã
(
pö
))

574 
öt32_t
 
ch™√l
 = (öt32_t)
	`ch™√l_p‹t_gë
(
pö
);

575 
ƒf_gpiŸe_evíts_t
 
evít
 = 
	`TE_IDX_TO_EVENT_ADDR
(
ch™√l
);

577 
	`ƒf_gpiŸe_evít_íabÀ
(
ch™√l
);

579 
	`ƒf_gpiŸe_evít_˛ór
(
evít
);

580 i‡(
öt_íabÀ
)

582 
ƒf_drv_gpiŸe_evt_h™dÀr_t
 
h™dÀr
 = 
	`ch™√l_h™dÀr_gë
(
	`ch™√l_p‹t_gë
(
pö
));

584 i‡(
h™dÀr
)

586 
	`ƒf_gpiŸe_öt_íabÀ
(1 << 
ch™√l
);

590 
	}
}

593 
	$ƒf_drv_gpiŸe_ö_evít_dißbÀ
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

595 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

596 
	`ASSERT
(
	`pö_ö_u£_by_gpiŸe
(
pö
));

597 i‡(
	`pö_ö_u£_by_p‹t
(
pö
))

599 
	`ƒf_gpio_cfg_£n£_£t
(
pö
, 
NRF_GPIO_PIN_NOSENSE
);

601 i‡(
	`pö_ö_u£_by_ã
(
pö
))

603 
öt32_t
 
ch™√l
 = (öt32_t)
	`ch™√l_p‹t_gë
(
pö
);

604 
	`ƒf_gpiŸe_evít_dißbÀ
(
ch™√l
);

605 
	`ƒf_gpiŸe_öt_dißbÀ
(1 << 
ch™√l
);

607 
	}
}

610 
	$ƒf_drv_gpiŸe_ö_unöô
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

612 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

613 
	`ASSERT
(
	`pö_ö_u£_by_gpiŸe
(
pö
));

614 
	`ƒf_drv_gpiŸe_ö_evít_dißbÀ
(
pö
);

615 i‡(
	`pö_ö_u£_by_ã
(
pö
))

617 
	`ƒf_gpiŸe_ã_deÁu…
(
	`ch™√l_p‹t_gë
(
pö
));

619 
	`ƒf_gpio_cfg_deÁu…
(
pö
);

620 
	`ch™√l_‰ì
((
uöt8_t
)
	`ch™√l_p‹t_gë
(
pö
));

621 
	`pö_ö_u£_˛ór
(
pö
);

622 
	}
}

625 
boﬁ
 
	$ƒf_drv_gpiŸe_ö_is_£t
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

627 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

628  
	`ƒf_gpio_pö_ªad
(
pö
Ë? 
åue
 : 
Ál£
;

629 
	}
}

632 
uöt32_t
 
	$ƒf_drv_gpiŸe_ö_evít_addr_gë
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

634 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

635 
	`ASSERT
(
	`pö_ö_u£_by_p‹t
(
pö
Ë|| 
	`pö_ö_u£_by_ã
(pin));

637 
ƒf_gpiŸe_evíts_t
 
evít
 = 
NRF_GPIOTE_EVENTS_PORT
;

639 i‡(
	`pö_ö_u£_by_ã
(
pö
))

641 
evít
 = 
	`TE_IDX_TO_EVENT_ADDR
(
	`ch™√l_p‹t_gë
(
pö
));

643  
	`ƒf_gpiŸe_evít_addr_gë
(
evít
);

644 
	}
}

647 
	$GPIOTE_IRQH™dÀr
()

649 
uöt32_t
 
°©us
 = 0;

650 
uöt32_t
 
öput
[
GPIO_COUNT
] = {0};

653 
uöt32_t
 
i
;

654 
ƒf_gpiŸe_evíts_t
 
evít
 = 
NRF_GPIOTE_EVENTS_IN_0
;

655 
uöt32_t
 
mask
 = (uöt32_t)
NRF_GPIOTE_INT_IN0_MASK
;

657 
i
 = 0; i < 
GPIOTE_CH_NUM
; i++)

659 i‡(
	`ƒf_gpiŸe_evít_is_£t
(
evít
Ë&& 
	`ƒf_gpiŸe_öt_is_íabÀd
(
mask
))

661 
	`ƒf_gpiŸe_evít_˛ór
(
evít
);

662 
°©us
 |
mask
;

664 
mask
 <<= 1;

667 
evít
 = (
ƒf_gpiŸe_evíts_t
)((
uöt32_t
)event + (uint32_t));

672 i‡(
	`ƒf_gpiŸe_evít_is_£t
(
NRF_GPIOTE_EVENTS_PORT
))

674 
	`ƒf_gpiŸe_evít_˛ór
(
NRF_GPIOTE_EVENTS_PORT
);

675 
°©us
 |(
uöt32_t
)
NRF_GPIOTE_INT_PORT_MASK
;

676 
	`ƒf_gpio_p‹ts_ªad
(0, 
GPIO_COUNT
, 
öput
);

680 i‡(
°©us
 & 
NRF_GPIOTE_INT_IN_MASK
)

682 
mask
 = (
uöt32_t
)
NRF_GPIOTE_INT_IN0_MASK
;

684 
i
 = 0; i < 
GPIOTE_CH_NUM
; i++)

686 i‡(
mask
 & 
°©us
)

688 
ƒf_drv_gpiŸe_pö_t
 
pö
 = 
	`ƒf_gpiŸe_evít_pö_gë
(
i
);

689 
	`NRF_LOG_DEBUG
("EvíàöÇumbî: %d.\r\n", 
i
);

690 
ƒf_gpiŸe_pﬁ¨ôy_t
 
pﬁ¨ôy
 = 
	`ƒf_gpiŸe_evít_pﬁ¨ôy_gë
(
i
);

691 
ƒf_drv_gpiŸe_evt_h™dÀr_t
 
h™dÀr
 = 
	`ch™√l_h™dÀr_gë
(
i
);

692 
	`NRF_LOG_DEBUG
("Pö: %d,Öﬁ¨ôy: %d.\r\n", 
pö
, 
pﬁ¨ôy
);

693 i‡(
h™dÀr
)

695 
	`h™dÀr
(
pö
, 
pﬁ¨ôy
);

698 
mask
 <<= 1;

702 i‡(
°©us
 & (
uöt32_t
)
NRF_GPIOTE_INT_PORT_MASK
)

705 
uöt32_t
 
p‹t_idx
;

706 
uöt8_t
 
ª≥©
 = 0;

707 
uöt32_t
 
toggÀ_mask
[
GPIO_COUNT
] = {0};

708 
uöt32_t
 
pös_to_check
[
GPIO_COUNT
];

711 
p‹t_idx
 = 0;Ö‹t_idx < 
GPIO_COUNT
;Öort_idx++)

713 
pös_to_check
[
p‹t_idx
] = 0xFFFFFFFF;

718 
ª≥©
 = 0;

720 
i
 = 0; i < 
GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS
; i++)

722 
uöt8_t
 
pö_™d_£n£
 = 
m_cb
.
p‹t_h™dÀrs_pös
[
i
];

723 
ƒf_drv_gpiŸe_pö_t
 
pö
 = (
pö_™d_£n£
 & ~
SENSE_FIELD_MASK
);

725 i‡((
m_cb
.
p‹t_h™dÀrs_pös
[
i
] !
PIN_NOT_USED
)

726 && 
	`ƒf_bômask_bô_is_£t
(
pö
, 
pös_to_check
))

728 
ƒf_gpiŸe_pﬁ¨ôy_t
 
pﬁ¨ôy
 =

729 (
ƒf_gpiŸe_pﬁ¨ôy_t
)((
pö_™d_£n£
 &

730 
SENSE_FIELD_MASK
Ë>> 
SENSE_FIELD_POS
);

731 
ƒf_drv_gpiŸe_evt_h™dÀr_t
 
h™dÀr
 =

732 
	`ch™√l_h™dÀr_gë
(
	`ch™√l_p‹t_gë
(
pö
));

733 i‡(
h™dÀr
 || (
pﬁ¨ôy
 =
NRF_GPIOTE_POLARITY_TOGGLE
))

735 i‡(
pﬁ¨ôy
 =
NRF_GPIOTE_POLARITY_TOGGLE
)

737 
	`ƒf_bômask_bô_£t
(
pö
, 
toggÀ_mask
);

739 
ƒf_gpio_pö_£n£_t
 
£n£
 = 
	`ƒf_gpio_pö_£n£_gë
(
pö
);

740 
uöt32_t
 
pö_°©e
 = 
	`ƒf_bômask_bô_is_£t
(
pö
, 
öput
);

741 i‡((
pö_°©e
 && (
£n£
 =
NRF_GPIO_PIN_SENSE_HIGH
)) ||

742 (!
pö_°©e
 && (
£n£
 =
NRF_GPIO_PIN_SENSE_LOW
)) )

744 
	`NRF_LOG_DEBUG
("PORTÉvíàf‹Öö: %d,Öﬁ¨ôy: %d.\r\n", 
pö
,

745 
pﬁ¨ôy
);

746 i‡(
pﬁ¨ôy
 =
NRF_GPIOTE_POLARITY_TOGGLE
)

748 
ƒf_gpio_pö_£n£_t
 
√xt_£n£
 =

749 (
£n£
 =
NRF_GPIO_PIN_SENSE_HIGH
) ?

750 
NRF_GPIO_PIN_SENSE_LOW
 :

751 
NRF_GPIO_PIN_SENSE_HIGH
;

752 
	`ƒf_gpio_cfg_£n£_£t
(
pö
, 
√xt_£n£
);

753 ++
ª≥©
;

756 i‡(
h™dÀr
)

758 
	`h™dÀr
(
pö
, 
pﬁ¨ôy
);

765 i‡(
ª≥©
)

773 
uöt32_t
 
√w_öput
[
GPIO_COUNT
];

774 
boﬁ
 
öput_unch™ged
 = 
åue
;

775 
	`ƒf_gpio_p‹ts_ªad
(0, 
GPIO_COUNT
, 
√w_öput
);

778 
p‹t_idx
 = 0;Ö‹t_idx < 
GPIO_COUNT
;Öort_idx++)

780 i‡(
√w_öput
[
p‹t_idx
] !
öput
[port_idx])

782 
öput_unch™ged
 = 
Ál£
;

787 i‡(
öput_unch™ged
)

790 
ª≥©
 = 0;

795 
p‹t_idx
 = 0;Ö‹t_idx < 
GPIO_COUNT
;Öort_idx++)

797 
öput
[
p‹t_idx
] = 
√w_öput
[port_idx];

798 
pös_to_check
[
p‹t_idx
] = 
toggÀ_mask
[port_idx];

803 
ª≥©
);

805 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\hal\nrf_nvmc.c

46 
	~<°dboﬁ.h
>

47 
	~"ƒf.h
"

48 
	~"ƒf_nvmc.h
"

51 
	$ƒf_nvmc_∑ge_îa£
(
uöt32_t
 
addªss
)

54 
NRF_NVMC
->
CONFIG
 = 
NVMC_CONFIG_WEN_Eí
;

55 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
)

60 
NRF_NVMC
->
ERASEPAGE
 = 
addªss
;

61 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
)

65 
NRF_NVMC
->
CONFIG
 = 
NVMC_CONFIG_WEN_Rí
;

66 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
)

69 
	}
}

72 
	$ƒf_nvmc_wrôe_byã
(
uöt32_t
 
addªss
, 
uöt8_t
 
vÆue
)

74 
uöt32_t
 
byã_shi·
 = 
addªss
 & (uint32_t)0x03;

75 
uöt32_t
 
addªss32
 = 
addªss
 & ~
byã_shi·
;

76 
uöt32_t
 
vÆue32
 = (*(uöt32_t*)
addªss32
 & ~((uöt32_t)0xFF << (
byã_shi·
 << (uint32_t)3)));

77 
vÆue32
 = vÆue32 + ((
uöt32_t
)
vÆue
 << (
byã_shi·
 << 3));

80 
NRF_NVMC
->
CONFIG
 = (
NVMC_CONFIG_WEN_Wí
 << 
NVMC_CONFIG_WEN_Pos
);

81 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
)

85 *(
uöt32_t
*)
addªss32
 = 
vÆue32
;

86 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
)

90 
NRF_NVMC
->
CONFIG
 = (
NVMC_CONFIG_WEN_Rí
 << 
NVMC_CONFIG_WEN_Pos
);

93 
	}
}

95 
	$ƒf_nvmc_wrôe_w‹d
(
uöt32_t
 
addªss
, uöt32_à
vÆue
)

98 
NRF_NVMC
->
CONFIG
 = 
NVMC_CONFIG_WEN_Wí
;

99 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
){

102 *(
uöt32_t
*)
addªss
 = 
vÆue
;

103 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
){

106 
NRF_NVMC
->
CONFIG
 = 
NVMC_CONFIG_WEN_Rí
;

107 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
)

110 
	}
}

112 
	$ƒf_nvmc_wrôe_byãs
(
uöt32_t
 
addªss
, c⁄° 
uöt8_t
 * 
§c
, uöt32_à
num_byãs
)

114 
uöt32_t
 
i
;

115 
i
=0;i<
num_byãs
;i++)

117 
	`ƒf_nvmc_wrôe_byã
(
addªss
 + 
i
,
§c
[i]);

119 
	}
}

121 
	$ƒf_nvmc_wrôe_w‹ds
(
uöt32_t
 
addªss
, c⁄° uöt32_à* 
§c
, uöt32_à
num_w‹ds
)

123 
uöt32_t
 
i
;

126 
NRF_NVMC
->
CONFIG
 = 
NVMC_CONFIG_WEN_Wí
;

127 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
)

131 
i
=0;i<
num_w‹ds
;i++)

133 ((
uöt32_t
*)
addªss
)[
i
] = 
§c
[i];

134 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
)

139 
NRF_NVMC
->
CONFIG
 = 
NVMC_CONFIG_WEN_Rí
;

140 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
)

143 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\hal\nrf_nvmc.h

46 #i‚de‡
NRF_NVMC_H__


47 
	#NRF_NVMC_H__


	)

49 
	~<°döt.h
>

51 #ifde‡
__˝lu•lus


75 
ƒf_nvmc_∑ge_îa£
(
uöt32_t
 
addªss
);

87 
ƒf_nvmc_wrôe_byã
(
uöt32_t
 
addªss
 , 
uöt8_t
 
vÆue
);

95 
ƒf_nvmc_wrôe_w‹d
(
uöt32_t
 
addªss
, uöt32_à
vÆue
);

105 
ƒf_nvmc_wrôe_byãs
(
uöt32_t
 
addªss
, c⁄° 
uöt8_t
 * 
§c
, uöt32_à
num_byãs
);

115 
ƒf_nvmc_wrôe_w‹ds
(
uöt32_t
 
addªss
, c⁄° uöt32_à* 
§c
, uöt32_à
num_w‹ds
);

119 #ifde‡
__˝lu•lus


	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\hal\nrf_saadc.c

45 
	~"sdk_c⁄fig.h
"

46 #i‡
SAADC_ENABLED


47 
	~"ƒf_ßadc.h
"

49 
	$ƒf_ßadc_ch™√l_öô
(
uöt8_t
 
ch™√l
, 
ƒf_ßadc_ch™√l_c⁄fig_t
 c⁄° * c⁄° 
c⁄fig
)

51 
NRF_SAADC
->
CH
[
ch™√l
].
CONFIG
 =

52 ((
c⁄fig
->
ªsi°‹_p
 << 
SAADC_CH_CONFIG_RESP_Pos
Ë& 
SAADC_CH_CONFIG_RESP_Msk
)

53 | ((
c⁄fig
->
ªsi°‹_n
 << 
SAADC_CH_CONFIG_RESN_Pos
Ë& 
SAADC_CH_CONFIG_RESN_Msk
)

54 | ((
c⁄fig
->
gaö
 << 
SAADC_CH_CONFIG_GAIN_Pos
Ë& 
SAADC_CH_CONFIG_GAIN_Msk
)

55 | ((
c⁄fig
->
ª„ªn˚
 << 
SAADC_CH_CONFIG_REFSEL_Pos
Ë& 
SAADC_CH_CONFIG_REFSEL_Msk
)

56 | ((
c⁄fig
->
acq_time
 << 
SAADC_CH_CONFIG_TACQ_Pos
Ë& 
SAADC_CH_CONFIG_TACQ_Msk
)

57 | ((
c⁄fig
->
mode
 << 
SAADC_CH_CONFIG_MODE_Pos
Ë& 
SAADC_CH_CONFIG_MODE_Msk
)

58 | ((
c⁄fig
->
bur°
 << 
SAADC_CH_CONFIG_BURST_Pos
Ë& 
SAADC_CH_CONFIG_BURST_Msk
);

59 
	`ƒf_ßadc_ch™√l_öput_£t
(
ch™√l
, 
c⁄fig
->
pö_p
, c⁄fig->
pö_n
);

61 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\power\nrf_drv_power.c

40 
	~"sdk_c⁄fig.h
"

41 #i‡
POWER_ENABLED


43 
	~"ƒf_drv_powî.h
"

44 
	~"ƒf_as£π.h
"

45 
	~"n‹dic_comm⁄.h
"

48 
INTERRUPT_PRIORITY_VALIDATION
(
POWER_CONFIG_IRQ_PRIORITY
);

66 c⁄° 
ƒf_drv_powî_c⁄fig_t
 
	gm_drv_powî_c⁄fig_deÁu…
 =

68 .
dcd˚n
 = 
POWER_CONFIG_DEFAULT_DCDCEN
,

69 #i‡
NRF_POWER_HAS_VDDH


70 .
	gdcd˚nhv
 = 
POWER_CONFIG_DEFAULT_DCDCENHV
,

77 
boﬁ
 
	gm_öôülized
;

82 
ƒf_drv_powî_pofw¨n_evít_h™dÀr_t
 
	gm_pofw¨n_h™dÀr
;

84 #i‡
NRF_POWER_HAS_SLEEPEVT


88 
ƒf_drv_powî_¶ìp_evít_h™dÀr_t
 
	gm_¶ì≥vt_h™dÀr
;

91 #i‡
NRF_POWER_HAS_USBREG


95 
ƒf_drv_powî_usb_evít_h™dÀr_t
 
	gm_usbevt_h™dÀr
;

100 
boﬁ
 
	$ƒf_drv_powî_öô_check
()

102  
m_öôülized
;

103 
	}
}

105 
ªt_code_t
 
	$ƒf_drv_powî_öô
(
ƒf_drv_powî_c⁄fig_t
 c⁄° * 
p_c⁄fig
)

107 
ƒf_drv_powî_c⁄fig_t
 c⁄° * 
p_u£d_c⁄fig
;

108 if(
m_öôülized
)

110  
NRF_ERROR_MODULE_ALREADY_INITIALIZED
;

113 
p_u£d_c⁄fig
 = (
p_c⁄fig
 !
NULL
) ?

114 
p_c⁄fig
 : (&
m_drv_powî_c⁄fig_deÁu…
);

115 
	`ƒf_powî_dcd˚n_£t
(
p_u£d_c⁄fig
->
dcd˚n
);

116 #i‡
NRF_POWER_HAS_VDDH


117 
	`ƒf_powî_dcd˚n_vddh_£t
(
p_u£d_c⁄fig
->
dcd˚nhv
);

120 
	`ƒf_drv_comm⁄_powî_˛ock_úq_öô
();

122 
m_öôülized
 = 
åue
;

123  
NRF_SUCCESS
;

124 
	}
}

126 
	$ƒf_drv_powî_unöô
()

128 
	`ASSERT
(
m_öôülized
);

129 
	`ƒf_drv_powî_pof_unöô
();

130 #i‡
NRF_POWER_HAS_SLEEPEVT


131 
	`ƒf_drv_powî_¶ì≥vt_unöô
();

133 #i‡
NRF_POWER_HAS_USBREG


134 
	`ƒf_drv_powî_usbevt_unöô
();

136 
m_öôülized
 = 
Ál£
;

137 
	}
}

139 
	$ƒf_drv_powî_pof_öô
(
ƒf_drv_powî_pofw¨n_c⁄fig_t
 c⁄° * 
p_c⁄fig
)

141 
	`ASSERT
(
p_c⁄fig
 !
NULL
);

143 
	`ƒf_drv_powî_pof_unöô
();

144 
	`ƒf_powî_pofc⁄_£t
(
åue
, 
p_c⁄fig
->
thr
);

145 #i‡
NRF_POWER_HAS_VDDH


146 
	`ƒf_powî_pofc⁄_vddh_£t
(
p_c⁄fig
->
thrvddh
);

148 if(
p_c⁄fig
->
h™dÀr
 !
NULL
)

150 
m_pofw¨n_h™dÀr
 = 
p_c⁄fig
->
h™dÀr
;

151 
	`ƒf_powî_öt_íabÀ
(
NRF_POWER_INT_POFWARN_MASK
);

153 
	}
}

155 
	$ƒf_drv_powî_pof_unöô
()

157 
	`ƒf_powî_öt_dißbÀ
(
NRF_POWER_INT_POFWARN_MASK
);

158 
m_pofw¨n_h™dÀr
 = 
NULL
;

159 
	}
}

161 #i‡
NRF_POWER_HAS_SLEEPEVT


162 
	$ƒf_drv_powî_¶ì≥vt_öô
(
ƒf_drv_powî_¶ì≥vt_c⁄fig_t
 c⁄° * 
p_c⁄fig
)

164 
	`ASSERT
(
p_c⁄fig
 !
NULL
);

166 
	`ƒf_drv_powî_¶ì≥vt_unöô
();

167 if(
p_c⁄fig
->
h™dÀr
 !
NULL
)

169 
uöt32_t
 
ímask
 = 0;

170 
m_¶ì≥vt_h™dÀr
 = 
p_c⁄fig
->
h™dÀr
;

171 if(
p_c⁄fig
->
í_íãr
)

173 
ímask
 |
NRF_POWER_INT_SLEEPENTER_MASK
;

175 if(
p_c⁄fig
->
í_exô
)

177 
ímask
 |
NRF_POWER_INT_SLEEPEXIT_MASK
;

179 
	`ƒf_powî_öt_íabÀ
(
ímask
);

181 
	}
}

183 
	$ƒf_drv_powî_¶ì≥vt_unöô
()

185 
	`ƒf_powî_öt_dißbÀ
(

186 
NRF_POWER_INT_SLEEPENTER_MASK
 |

187 
NRF_POWER_INT_SLEEPEXIT_MASK
);

188 
m_¶ì≥vt_h™dÀr
 = 
NULL
;

189 
	}
}

192 #i‡
NRF_POWER_HAS_USBREG


193 
	$ƒf_drv_powî_usbevt_öô
(
ƒf_drv_powî_usbevt_c⁄fig_t
 c⁄° * 
p_c⁄fig
)

195 
	`ƒf_drv_powî_usbevt_unöô
();

196 if(
p_c⁄fig
->
h™dÀr
 !
NULL
)

198 
m_usbevt_h™dÀr
 = 
p_c⁄fig
->
h™dÀr
;

199 
	`ƒf_powî_öt_íabÀ
(

200 
NRF_POWER_INT_USBDETECTED_MASK
 |

201 
NRF_POWER_INT_USBREMOVED_MASK
 |

202 
NRF_POWER_INT_USBPWRRDY_MASK
);

204 
	}
}

206 
	$ƒf_drv_powî_usbevt_unöô
()

208 
	`ƒf_powî_öt_dißbÀ
(

209 
NRF_POWER_INT_USBDETECTED_MASK
 |

210 
NRF_POWER_INT_USBREMOVED_MASK
 |

211 
NRF_POWER_INT_USBPWRRDY_MASK
);

212 
m_usbevt_h™dÀr
 = 
NULL
;

213 
	}
}

223 #i‡
NRF_DRV_COMMON_POWER_CLOCK_ISR


224 
	$ƒf_drv_powî_⁄IRQ
()

226 
	$POWER_POWER_IRQH™dÀr
()

229 
uöt32_t
 
íabÀd
 = 
	`ƒf_powî_öt_íabÀ_gë
();

230 if((0 !(
íabÀd
 & 
NRF_POWER_INT_POFWARN_MASK
)) &&

231 
	`ƒf_powî_evít_gë_™d_˛ór
(
NRF_POWER_EVENT_POFWARN
))

233 
	`ASSERT
(
m_pofw¨n_h™dÀr
 !
NULL
);

234 
	`m_pofw¨n_h™dÀr
();

236 #i‡
NRF_POWER_HAS_SLEEPEVT


237 if((0 !(
íabÀd
 & 
NRF_POWER_INT_SLEEPENTER_MASK
)) &&

238 
	`ƒf_powî_evít_gë_™d_˛ór
(
NRF_POWER_EVENT_SLEEPENTER
))

240 
	`ASSERT
(
m_¶ì≥vt_h™dÀr
 !
NULL
);

241 
	`m_¶ì≥vt_h™dÀr
(
NRF_DRV_POWER_SLEEP_EVT_ENTER
);

243 if((0 !(
íabÀd
 & 
NRF_POWER_INT_SLEEPEXIT_MASK
)) &&

244 
	`ƒf_powî_evít_gë_™d_˛ór
(
NRF_POWER_EVENT_SLEEPEXIT
))

246 
	`ASSERT
(
m_¶ì≥vt_h™dÀr
 !
NULL
);

247 
	`m_¶ì≥vt_h™dÀr
(
NRF_DRV_POWER_SLEEP_EVT_EXIT
);

250 #i‡
NRF_POWER_HAS_USBREG


251 if((0 !(
íabÀd
 & 
NRF_POWER_INT_USBDETECTED_MASK
)) &&

252 
	`ƒf_powî_evít_gë_™d_˛ór
(
NRF_POWER_EVENT_USBDETECTED
))

254 
	`ASSERT
(
m_usbevt_h™dÀr
 !
NULL
);

255 
	`m_usbevt_h™dÀr
(
NRF_DRV_POWER_USB_EVT_DETECTED
);

257 if((0 !(
íabÀd
 & 
NRF_POWER_INT_USBREMOVED_MASK
)) &&

258 
	`ƒf_powî_evít_gë_™d_˛ór
(
NRF_POWER_EVENT_USBREMOVED
))

260 
	`ASSERT
(
m_usbevt_h™dÀr
 !
NULL
);

261 
	`m_usbevt_h™dÀr
(
NRF_DRV_POWER_USB_EVT_REMOVED
);

263 if((0 !(
íabÀd
 & 
NRF_POWER_INT_USBPWRRDY_MASK
)) &&

264 
	`ƒf_powî_evít_gë_™d_˛ór
(
NRF_POWER_EVENT_USBPWRRDY
))

266 
	`ASSERT
(
m_usbevt_h™dÀr
 !
NULL
);

267 
	`m_usbevt_h™dÀr
(
NRF_DRV_POWER_USB_EVT_READY
);

270 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\rtc\nrf_drv_rtc.c

41 
	~"sdk_comm⁄.h
"

42 #i‡
NRF_MODULE_ENABLED
(
RTC
)

43 
	#ENABLED_RTC_COUNT
 (
RTC0_ENABLED
+
RTC1_ENABLED
+
RTC2_ENABLED
)

	)

44 #i‡
ENABLED_RTC_COUNT


46 
	~"ƒf_drv_πc.h
"

47 
	~"ƒf_πc.h
"

48 
	~"ƒf_as£π.h
"

49 
	~"≠p_utû_∂©f‹m.h
"

51 
	#NRF_LOG_MODULE_NAME
 "RTC"

	)

53 #i‡
RTC_CONFIG_LOG_ENABLED


54 
	#NRF_LOG_LEVEL
 
RTC_CONFIG_LOG_LEVEL


	)

55 
	#NRF_LOG_INFO_COLOR
 
RTC_CONFIG_INFO_COLOR


	)

56 
	#NRF_LOG_DEBUG_COLOR
 
RTC_CONFIG_DEBUG_COLOR


	)

57 
	#EVT_TO_STR
(
evít
Ë”víà=
NRF_RTC_EVENT_TICK
 ? "NRF_RTC_EVENT_TICK" : \

58 (
evít
 =
NRF_RTC_EVENT_OVERFLOW
 ? "NRF_RTC_EVENT_OVERFLOW" : \

59 (
evít
 =
NRF_RTC_EVENT_COMPARE_0
 ? "NRF_RTC_EVENT_COMPARE_0" : \

60 (
evít
 =
NRF_RTC_EVENT_COMPARE_1
 ? "NRF_RTC_EVENT_COMPARE_1" : \

61 (
evít
 =
NRF_RTC_EVENT_COMPARE_2
 ? "NRF_RTC_EVENT_COMPARE_2" : \

62 (
evít
 =
NRF_RTC_EVENT_COMPARE_3
 ? "NRF_RTC_EVENT_COMPARE_3" : "UNKNOWN EVENT")

	)

64 
	#EVT_TO_STR
(
evít
Ë""

	)

65 
	#NRF_LOG_LEVEL
 0

	)

67 
	~"ƒf_log.h
"

68 
	~"ƒf_log_˘æ.h
"

73 
ƒf_drv_°©e_t
 
	m°©e
;

74 
boﬁ
 
	mªlübÀ
;

75 
uöt8_t
 
	mtick_œãncy
;

76 } 
	tƒf_drv_πc_cb_t
;

79 
ƒf_drv_πc_h™dÀr_t
 
	gm_h™dÀrs
[
ENABLED_RTC_COUNT
];

80 
ƒf_drv_πc_cb_t
 
	gm_cb
[
ENABLED_RTC_COUNT
];

82 
ªt_code_t
 
	$ƒf_drv_πc_öô
(
ƒf_drv_πc_t
 c⁄° * c⁄° 
p_ö°™˚
,

83 
ƒf_drv_πc_c⁄fig_t
 c⁄° * 
p_c⁄fig
,

84 
ƒf_drv_πc_h™dÀr_t
 
h™dÀr
)

86 
	`ASSERT
(
p_c⁄fig
);

88 
ªt_code_t
 
îr_code
;

90 i‡(
h™dÀr
)

92 
m_h™dÀrs
[
p_ö°™˚
->
ö°™˚_id
] = 
h™dÀr
;

96 
îr_code
 = 
NRF_ERROR_INVALID_PARAM
;

97 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

98  
îr_code
;

101 i‡(
m_cb
[
p_ö°™˚
->
ö°™˚_id
].
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
)

103 
îr_code
 = 
NRF_ERROR_INVALID_STATE
;

104 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

105  
îr_code
;

108 
	`ƒf_drv_comm⁄_úq_íabÀ
(
p_ö°™˚
->
úq
, 
p_c⁄fig
->
öãºu±_¥i‹ôy
);

109 
	`ƒf_πc_¥esˇÀr_£t
(
p_ö°™˚
->
p_ªg
, 
p_c⁄fig
->
¥esˇÀr
);

110 
m_cb
[
p_ö°™˚
->
ö°™˚_id
].
ªlübÀ
 = 
p_c⁄fig
->reliable;

111 
m_cb
[
p_ö°™˚
->
ö°™˚_id
].
tick_œãncy
 = 
p_c⁄fig
->tick_latency;

112 
m_cb
[
p_ö°™˚
->
ö°™˚_id
].
°©e
 = 
NRF_DRV_STATE_INITIALIZED
;

114 
îr_code
 = 
NRF_SUCCESS
;

115 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

116  
îr_code
;

117 
	}
}

119 
	$ƒf_drv_πc_unöô
(
ƒf_drv_πc_t
 c⁄° * c⁄° 
p_ö°™˚
)

121 
uöt32_t
 
mask
 = 
NRF_RTC_INT_TICK_MASK
 |

122 
NRF_RTC_INT_OVERFLOW_MASK
 |

123 
NRF_RTC_INT_COMPARE0_MASK
 |

124 
NRF_RTC_INT_COMPARE1_MASK
 |

125 
NRF_RTC_INT_COMPARE2_MASK
 |

126 
NRF_RTC_INT_COMPARE3_MASK
;

127 
	`ASSERT
(
m_cb
[
p_ö°™˚
->
ö°™˚_id
].
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
);

129 
	`ƒf_drv_comm⁄_úq_dißbÀ
(
p_ö°™˚
->
úq
);

131 
	`ƒf_πc_èsk_åiggî
(
p_ö°™˚
->
p_ªg
, 
NRF_RTC_TASK_STOP
);

132 
	`ƒf_πc_evít_dißbÀ
(
p_ö°™˚
->
p_ªg
, 
mask
);

133 
	`ƒf_πc_öt_dißbÀ
(
p_ö°™˚
->
p_ªg
, 
mask
);

135 
m_cb
[
p_ö°™˚
->
ö°™˚_id
].
°©e
 = 
NRF_DRV_STATE_UNINITIALIZED
;

136 
	`NRF_LOG_INFO
("Uninitialized.\r\n");

137 
	}
}

139 
	$ƒf_drv_πc_íabÀ
(
ƒf_drv_πc_t
 c⁄° * c⁄° 
p_ö°™˚
)

141 
	`ASSERT
(
m_cb
[
p_ö°™˚
->
ö°™˚_id
].
°©e
 =
NRF_DRV_STATE_INITIALIZED
);

143 
	`ƒf_πc_èsk_åiggî
(
p_ö°™˚
->
p_ªg
, 
NRF_RTC_TASK_START
);

144 
m_cb
[
p_ö°™˚
->
ö°™˚_id
].
°©e
 = 
NRF_DRV_STATE_POWERED_ON
;

145 
	`NRF_LOG_INFO
("Enabled.\r\n");

146 
	}
}

148 
	$ƒf_drv_πc_dißbÀ
(
ƒf_drv_πc_t
 c⁄° * c⁄° 
p_ö°™˚
)

150 
	`ASSERT
(
m_cb
[
p_ö°™˚
->
ö°™˚_id
].
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
);

152 
	`ƒf_πc_èsk_åiggî
(
p_ö°™˚
->
p_ªg
, 
NRF_RTC_TASK_STOP
);

153 
m_cb
[
p_ö°™˚
->
ö°™˚_id
].
°©e
 = 
NRF_DRV_STATE_INITIALIZED
;

154 
	`NRF_LOG_INFO
("Disabled.\r\n");

155 
	}
}

157 
ªt_code_t
 
	$ƒf_drv_πc_cc_dißbÀ
(
ƒf_drv_πc_t
 c⁄° * c⁄° 
p_ö°™˚
, 
uöt32_t
 
ch™√l
)

159 
	`ASSERT
(
m_cb
[
p_ö°™˚
->
ö°™˚_id
].
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
);

160 
	`ASSERT
(
ch™√l
<
p_ö°™˚
->
cc_ch™√l_cou¡
);

162 
ªt_code_t
 
îr_code
;

163 
uöt32_t
 
öt_mask
 = 
	`RTC_CHANNEL_INT_MASK
(
ch™√l
);

164 
ƒf_πc_evít_t
 
evít
 = 
	`RTC_CHANNEL_EVENT_ADDR
(
ch™√l
);

166 
	`ƒf_πc_evít_dißbÀ
(
p_ö°™˚
->
p_ªg
,
öt_mask
);

167 i‡(
	`ƒf_πc_öt_is_íabÀd
(
p_ö°™˚
->
p_ªg
,
öt_mask
))

169 
	`ƒf_πc_öt_dißbÀ
(
p_ö°™˚
->
p_ªg
,
öt_mask
);

170 i‡(
	`ƒf_πc_evít_≥ndög
(
p_ö°™˚
->
p_ªg
,
evít
))

172 
	`ƒf_πc_evít_˛ór
(
p_ö°™˚
->
p_ªg
,
evít
);

173 
îr_code
 = 
NRF_ERROR_TIMEOUT
;

174 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

175  
îr_code
;

178 
	`NRF_LOG_INFO
("RTC id: %d, ch™√»dißbÀd: %d.\r\n", 
p_ö°™˚
->
ö°™˚_id
, 
ch™√l
);

179 
îr_code
 = 
NRF_SUCCESS
;

180 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

181  
îr_code
;

182 
	}
}

184 
ªt_code_t
 
	$ƒf_drv_πc_cc_£t
(
ƒf_drv_πc_t
 c⁄° * c⁄° 
p_ö°™˚
,

185 
uöt32_t
 
ch™√l
,

186 
uöt32_t
 
vÆ
,

187 
boﬁ
 
íabÀ_úq
)

189 
	`ASSERT
(
m_cb
[
p_ö°™˚
->
ö°™˚_id
].
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
);

190 
	`ASSERT
(
ch™√l
<
p_ö°™˚
->
cc_ch™√l_cou¡
);

192 
ªt_code_t
 
îr_code
;

193 
uöt32_t
 
öt_mask
 = 
	`RTC_CHANNEL_INT_MASK
(
ch™√l
);

194 
ƒf_πc_evít_t
 
evít
 = 
	`RTC_CHANNEL_EVENT_ADDR
(
ch™√l
);

196 
	`ƒf_πc_evít_dißbÀ
(
p_ö°™˚
->
p_ªg
, 
öt_mask
);

197 
	`ƒf_πc_öt_dißbÀ
(
p_ö°™˚
->
p_ªg
, 
öt_mask
);

199 
vÆ
 = 
	`RTC_WRAP
(val);

200 i‡(
m_cb
[
p_ö°™˚
->
ö°™˚_id
].
ªlübÀ
)

202 
	`ƒf_πc_cc_£t
(
p_ö°™˚
->
p_ªg
,
ch™√l
,
vÆ
);

203 
uöt32_t
 
˙t
 = 
	`ƒf_πc_cou¡î_gë
(
p_ö°™˚
->
p_ªg
);

204 
öt32_t
 
diff
 = 
˙t
 - 
vÆ
;

205 i‡(
˙t
 < 
vÆ
)

207 
diff
 +
RTC_COUNTER_COUNTER_Msk
;

209 i‡(
diff
 < 
m_cb
[
p_ö°™˚
->
ö°™˚_id
].
tick_œãncy
)

211 
îr_code
 = 
NRF_ERROR_TIMEOUT
;

212 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

213  
îr_code
;

218 
	`ƒf_πc_cc_£t
(
p_ö°™˚
->
p_ªg
,
ch™√l
,
vÆ
);

221 i‡(
íabÀ_úq
)

223 
	`ƒf_πc_evít_˛ór
(
p_ö°™˚
->
p_ªg
,
evít
);

224 
	`ƒf_πc_öt_íabÀ
(
p_ö°™˚
->
p_ªg
, 
öt_mask
);

226 
	`ƒf_πc_evít_íabÀ
(
p_ö°™˚
->
p_ªg
,
öt_mask
);

228 
	`NRF_LOG_INFO
("RTC id: %d, ch™√»íabÀd: %d, com∑ª vÆue: %d.\r\n", 
p_ö°™˚
->
ö°™˚_id
, 
ch™√l
, 
vÆ
);

229 
îr_code
 = 
NRF_SUCCESS
;

230 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

231  
îr_code
;

232 
	}
}

234 
	$ƒf_drv_πc_tick_íabÀ
(
ƒf_drv_πc_t
 c⁄° * c⁄° 
p_ö°™˚
, 
boﬁ
 
íabÀ_úq
)

236 
ƒf_πc_evít_t
 
evít
 = 
NRF_RTC_EVENT_TICK
;

237 
uöt32_t
 
mask
 = 
NRF_RTC_INT_TICK_MASK
;

239 
	`ƒf_πc_evít_˛ór
(
p_ö°™˚
->
p_ªg
, 
evít
);

240 
	`ƒf_πc_evít_íabÀ
(
p_ö°™˚
->
p_ªg
, 
mask
);

241 i‡(
íabÀ_úq
)

243 
	`ƒf_πc_öt_íabÀ
(
p_ö°™˚
->
p_ªg
, 
mask
);

245 
	`NRF_LOG_INFO
("TickÉventsÉnabled.\r\n");

246 
	}
}

248 
	$ƒf_drv_πc_tick_dißbÀ
(
ƒf_drv_πc_t
 c⁄° * c⁄° 
p_ö°™˚
)

250 
uöt32_t
 
mask
 = 
NRF_RTC_INT_TICK_MASK
;

252 
	`ƒf_πc_evít_dißbÀ
(
p_ö°™˚
->
p_ªg
, 
mask
);

253 
	`ƒf_πc_öt_dißbÀ
(
p_ö°™˚
->
p_ªg
, 
mask
);

254 
	`NRF_LOG_INFO
("TickÉvents disabled.\r\n");

255 
	}
}

257 
	$ƒf_drv_πc_ovîÊow_íabÀ
(
ƒf_drv_πc_t
 c⁄° * c⁄° 
p_ö°™˚
, 
boﬁ
 
íabÀ_úq
)

259 
ƒf_πc_evít_t
 
evít
 = 
NRF_RTC_EVENT_OVERFLOW
;

260 
uöt32_t
 
mask
 = 
NRF_RTC_INT_OVERFLOW_MASK
;

262 
	`ƒf_πc_evít_˛ór
(
p_ö°™˚
->
p_ªg
, 
evít
);

263 
	`ƒf_πc_evít_íabÀ
(
p_ö°™˚
->
p_ªg
, 
mask
);

264 i‡(
íabÀ_úq
)

266 
	`ƒf_πc_öt_íabÀ
(
p_ö°™˚
->
p_ªg
, 
mask
);

268 
	}
}

269 
	$ƒf_drv_πc_ovîÊow_dißbÀ
(
ƒf_drv_πc_t
 c⁄° * c⁄° 
p_ö°™˚
)

271 
uöt32_t
 
mask
 = 
NRF_RTC_INT_OVERFLOW_MASK
;

272 
	`ƒf_πc_evít_dißbÀ
(
p_ö°™˚
->
p_ªg
, 
mask
);

273 
	`ƒf_πc_öt_dißbÀ
(
p_ö°™˚
->
p_ªg
, 
mask
);

274 
	}
}

276 
uöt32_t
 
	$ƒf_drv_πc_max_ticks_gë
(
ƒf_drv_πc_t
 c⁄° * c⁄° 
p_ö°™˚
)

278 
uöt32_t
 
ticks
;

279 i‡(
m_cb
[
p_ö°™˚
->
ö°™˚_id
].
ªlübÀ
)

281 
ticks
 = 
RTC_COUNTER_COUNTER_Msk
 - 
m_cb
[
p_ö°™˚
->
ö°™˚_id
].
tick_œãncy
;

285 
ticks
 = 
RTC_COUNTER_COUNTER_Msk
;

287  
ticks
;

288 
	}
}

295 
__STATIC_INLINE
 
	$ƒf_drv_πc_öt_h™dÀr
(
NRF_RTC_Ty≥
 * 
p_ªg
,

296 
uöt32_t
 
ö°™˚_id
,

297 
uöt32_t
 
ch™√l_cou¡
)

299 
uöt32_t
 
i
;

300 
uöt32_t
 
öt_mask
 = (uöt32_t)
NRF_RTC_INT_COMPARE0_MASK
;

301 
ƒf_πc_evít_t
 
evít
 = 
NRF_RTC_EVENT_COMPARE_0
;

303 
i
 = 0; i < 
ch™√l_cou¡
; i++)

305 i‡(
	`ƒf_πc_öt_is_íabÀd
(
p_ªg
,
öt_mask
Ë&& 
	`ƒf_πc_evít_≥ndög
’_ªg,
evít
))

307 
	`ƒf_πc_evít_dißbÀ
(
p_ªg
,
öt_mask
);

308 
	`ƒf_πc_öt_dißbÀ
(
p_ªg
,
öt_mask
);

309 
	`ƒf_πc_evít_˛ór
(
p_ªg
,
evít
);

310 
	`NRF_LOG_DEBUG
("Event: %s, instance id: %d.\r\n",

311 (
uöt32_t
)
	`EVT_TO_STR
(
evít
), (uöt32_t)
ö°™˚_id
);

312 
m_h™dÀrs
[
ö°™˚_id
]((
ƒf_drv_πc_öt_ty≥_t
)
i
);

314 
öt_mask
 <<= 1;

315 
evít
 = (
ƒf_πc_evít_t
)((
uöt32_t
)event + (uint32_t));

317 
evít
 = 
NRF_RTC_EVENT_TICK
;

318 i‡(
	`ƒf_πc_öt_is_íabÀd
(
p_ªg
,
NRF_RTC_INT_TICK_MASK
) &&

319 
	`ƒf_πc_evít_≥ndög
(
p_ªg
, 
evít
))

321 
	`ƒf_πc_evít_˛ór
(
p_ªg
, 
evít
);

322 
	`NRF_LOG_DEBUG
("Evít: %s, in°™˚ id: %d.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
evít
), 
ö°™˚_id
);

323 
m_h™dÀrs
[
ö°™˚_id
](
NRF_DRV_RTC_INT_TICK
);

326 
evít
 = 
NRF_RTC_EVENT_OVERFLOW
;

327 i‡(
	`ƒf_πc_öt_is_íabÀd
(
p_ªg
,
NRF_RTC_INT_OVERFLOW_MASK
) &&

328 
	`ƒf_πc_evít_≥ndög
(
p_ªg
, 
evít
))

330 
	`ƒf_πc_evít_˛ór
(
p_ªg
,
evít
);

331 
	`NRF_LOG_DEBUG
("Evít: %s, in°™˚ id: %d.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
evít
), 
ö°™˚_id
);

332 
m_h™dÀrs
[
ö°™˚_id
](
NRF_DRV_RTC_INT_OVERFLOW
);

334 
	}
}

336 #i‡
NRF_MODULE_ENABLED
(
RTC0
)

337 
	$RTC0_IRQH™dÀr
()

339 
	`ƒf_drv_πc_öt_h™dÀr
(
NRF_RTC0
,
RTC0_INSTANCE_INDEX
, 
	`NRF_RTC_CC_CHANNEL_COUNT
(0));

340 
	}
}

343 #i‡
NRF_MODULE_ENABLED
(
RTC1
)

344 
	$RTC1_IRQH™dÀr
()

346 
	`ƒf_drv_πc_öt_h™dÀr
(
NRF_RTC1
,
RTC1_INSTANCE_INDEX
, 
	`NRF_RTC_CC_CHANNEL_COUNT
(1));

347 
	}
}

350 #i‡
NRF_MODULE_ENABLED
(
RTC2
)

351 
	$RTC2_IRQH™dÀr
()

353 
	`ƒf_drv_πc_öt_h™dÀr
(
NRF_RTC2
,
RTC2_INSTANCE_INDEX
, 
	`NRF_RTC_CC_CHANNEL_COUNT
(2));

354 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\saadc\nrf_drv_saadc.c

40 
	~"sdk_comm⁄.h
"

41 #i‡
NRF_MODULE_ENABLED
(
SAADC
)

42 
	~"ƒf_drv_ßadc.h
"

43 
	~"ƒf_as£π.h
"

44 
	~"ƒf_drv_comm⁄.h
"

45 
	~"≠p_utû_∂©f‹m.h
"

47 
	#NRF_LOG_MODULE_NAME
 "SAADC"

	)

49 #i‡
SAADC_CONFIG_LOG_ENABLED


50 
	#NRF_LOG_LEVEL
 
SAADC_CONFIG_LOG_LEVEL


	)

51 
	#NRF_LOG_INFO_COLOR
 
SAADC_CONFIG_INFO_COLOR


	)

52 
	#NRF_LOG_DEBUG_COLOR
 
SAADC_CONFIG_DEBUG_COLOR


	)

53 
	#EVT_TO_STR
(
evít
Ë”víà=
NRF_SAADC_EVENT_STARTED
 ? "NRF_SAADC_EVENT_STARTED" : \

54 (
evít
 =
NRF_SAADC_EVENT_END
 ? "NRF_SAADC_EVENT_END" : \

55 (
evít
 =
NRF_SAADC_EVENT_DONE
 ? "NRF_SAADC_EVENT_DONE" : \

56 (
evít
 =
NRF_SAADC_EVENT_RESULTDONE
 ? "NRF_SAADC_EVENT_RESULTDONE" : \

57 (
evít
 =
NRF_SAADC_EVENT_CALIBRATEDONE
 ? "NRF_SAADC_EVENT_CALIBRATEDONE" : \

58 (
evít
 =
NRF_SAADC_EVENT_STOPPED
 ? "NRF_SAADC_EVENT_STOPPED" : "UNKNOWN EVENT"))))))

	)

59 
	#EVT_TO_STR_LIMIT
(
evít
Ë”víà=
NRF_SAADC_LIMIT_LOW
 ? "NRF_SAADC_LIMIT_LOW" : \

60 (
evít
 =
NRF_SAADC_LIMIT_HIGH
 ? "NRF_SAADC_LIMIT_HIGH" : "UNKNOWN EVENT"))

	)

62 
	#EVT_TO_STR
(
evít
Ë""

	)

63 
	#NRF_LOG_LEVEL
 0

	)

65 
	~"ƒf_log.h
"

66 
	~"ƒf_log_˘æ.h
"

71 
	mNRF_SAADC_STATE_IDLE
 = 0,

72 
	mNRF_SAADC_STATE_BUSY
 = 1,

73 
	mNRF_SAADC_STATE_CALIBRATION
 = 2

74 } 
	tƒf_ßadc_°©e_t
;

79 
ƒf_ßadc_öput_t
 
	mp£Õ
;

80 
ƒf_ßadc_öput_t
 
	mp£ 
;

81 } 
	tƒf_ßadc_p£l_buf„r
;

83 c⁄° 
ƒf_drv_ßadc_c⁄fig_t
 
	gm_deÁu…_c⁄fig
 = 
NRF_DRV_SAADC_DEFAULT_CONFIG
;

88 
ƒf_drv_ßadc_evít_h™dÀr_t
 
	mevít_h™dÀr
;

89 vﬁ©ûê
ƒf_ßadc_vÆue_t
 * 
	mp_buf„r
;

90 vﬁ©ûê
uöt16_t
 
	mbuf„r_size
;

91 vﬁ©ûê
ƒf_ßadc_vÆue_t
 * 
	mp_£c⁄d¨y_buf„r
;

92 vﬁ©ûê
ƒf_ßadc_°©e_t
 
	madc_°©e
;

93 
uöt32_t
 
	mlimôs_íabÀd_Êags
;

94 
uöt16_t
 
	m£c⁄d¨y_buf„r_size
;

95 
uöt16_t
 
	mbuf„r_size_À·
;

96 
ƒf_ßadc_p£l_buf„r
 
	mp£l
[
NRF_SAADC_CHANNEL_COUNT
];

97 
ƒf_drv_°©e_t
 
	m°©e
;

98 
uöt8_t
 
	ma˘ive_ch™√ls
;

99 
boﬁ
 
	mlow_powî_mode
;

100 
boﬁ
 
	mc⁄vîsi⁄s_íd
;

101 } 
	tƒf_drv_ßadc_cb_t
;

103 
ƒf_drv_ßadc_cb_t
 
	gm_cb
;

105 
	#LOW_LIMIT_TO_FLAG
(
ch™√l
Ë((2 * ch™√»+ 1))

	)

106 
	#HIGH_LIMIT_TO_FLAG
(
ch™√l
Ë((2 * ch™√l))

	)

107 
	#FLAG_IDX_TO_EVENT
(
idx
Ë((
ƒf_ßadc_evít_t
)((
uöt32_t
)
NRF_SAADC_EVENT_CH0_LIMITH
 + \

108 4 * 
idx
))

	)

109 
	#LIMIT_EVENT_TO_CHANNEL
(
evít
Ë(
uöt8_t
)(((
uöt32_t
)event - \

110 (
uöt32_t
)
NRF_SAADC_EVENT_CH0_LIMITH
Ë/ 8)

	)

111 
	#LIMIT_EVENT_TO_LIMIT_TYPE
(
evít
)((((
uöt32_t
Îvíà- (uöt32_t)
NRF_SAADC_EVENT_CH0_LIMITH
) & 4) \

112 ? 
NRF_SAADC_LIMIT_LOW
 : 
NRF_SAADC_LIMIT_HIGH
)

	)

113 
	#HW_TIMEOUT
 10000

	)

115 
	$SAADC_IRQH™dÀr
()

117 i‡(
	`ƒf_ßadc_evít_check
(
NRF_SAADC_EVENT_END
))

119 
	`ƒf_ßadc_evít_˛ór
(
NRF_SAADC_EVENT_END
);

120 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_SAADC_EVENT_END
));

122 i‡(!
m_cb
.
low_powî_mode
 || m_cb.
c⁄vîsi⁄s_íd
)

124 
ƒf_drv_ßadc_evt_t
 
evt
;

125 
evt
.
ty≥
 = 
NRF_DRV_SAADC_EVT_DONE
;

126 
evt
.
d©a
.
d⁄e
.
p_buf„r
 = (
ƒf_ßadc_vÆue_t
 *)
m_cb
.p_buffer;

127 
evt
.
d©a
.
d⁄e
.
size
 = 
m_cb
.
buf„r_size
;

129 i‡(
m_cb
.
p_£c⁄d¨y_buf„r
 =
NULL
)

131 
m_cb
.
adc_°©e
 = 
NRF_SAADC_STATE_IDLE
;

135 
m_cb
.
buf„r_size_À·
 = m_cb.
£c⁄d¨y_buf„r_size
;

136 
m_cb
.
p_buf„r
 = m_cb.
p_£c⁄d¨y_buf„r
;

137 
m_cb
.
buf„r_size
 = m_cb.
£c⁄d¨y_buf„r_size
;

138 
m_cb
.
p_£c⁄d¨y_buf„r
 = 
NULL
;

139 i‡(!
m_cb
.
low_powî_mode
)

141 
	`ƒf_ßadc_èsk_åiggî
(
NRF_SAADC_TASK_START
);

144 
m_cb
.
	`evít_h™dÀr
(&
evt
);

145 
m_cb
.
c⁄vîsi⁄s_íd
 = 
Ál£
;

148 i‡(
m_cb
.
low_powî_mode
 && 
	`ƒf_ßadc_evít_check
(
NRF_SAADC_EVENT_STARTED
))

150 
	`ƒf_ßadc_evít_˛ór
(
NRF_SAADC_EVENT_STARTED
);

151 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_SAADC_EVENT_STARTED
));

153 i‡(
m_cb
.
buf„r_size_À·
 > m_cb.
a˘ive_ch™√ls
)

156 
m_cb
.
buf„r_size_À·
 -m_cb.
a˘ive_ch™√ls
;

157 
	`ƒf_ßadc_buf„r_öô
((
ƒf_ßadc_vÆue_t
 *)&
m_cb
.
p_buf„r
[m_cb.
buf„r_size
 -

158 
m_cb
.
buf„r_size_À·
],

159 
m_cb
.
a˘ive_ch™√ls
);

161 i‡((
m_cb
.
buf„r_size_À·
 =m_cb.
a˘ive_ch™√ls
) &&

163 (
m_cb
.
p_£c⁄d¨y_buf„r
 !
NULL
))

166 
m_cb
.
c⁄vîsi⁄s_íd
 = 
åue
;

167 
m_cb
.
buf„r_size_À·
 = 0;

168 
	`ƒf_ßadc_buf„r_öô
((
ƒf_ßadc_vÆue_t
 *)
m_cb
.
p_£c⁄d¨y_buf„r
,

169 
m_cb
.
a˘ive_ch™√ls
);

171 i‡(
m_cb
.
buf„r_size_À·
 =m_cb.
a˘ive_ch™√ls
)

174 
m_cb
.
c⁄vîsi⁄s_íd
 = 
åue
;

175 
m_cb
.
buf„r_size_À·
 = 0;

177 
	`ƒf_ßadc_evít_˛ór
(
NRF_SAADC_EVENT_END
);

178 
	`ƒf_ßadc_èsk_åiggî
(
NRF_SAADC_TASK_SAMPLE
);

180 i‡(
	`ƒf_ßadc_evít_check
(
NRF_SAADC_EVENT_CALIBRATEDONE
))

182 
	`ƒf_ßadc_evít_˛ór
(
NRF_SAADC_EVENT_CALIBRATEDONE
);

183 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_SAADC_EVENT_CALIBRATEDONE
));

184 
m_cb
.
adc_°©e
 = 
NRF_SAADC_STATE_IDLE
;

186 
ƒf_drv_ßadc_evt_t
 
evt
;

187 
evt
.
ty≥
 = 
NRF_DRV_SAADC_EVT_CALIBRATEDONE
;

188 
m_cb
.
	`evít_h™dÀr
(&
evt
);

190 i‡(
	`ƒf_ßadc_evít_check
(
NRF_SAADC_EVENT_STOPPED
))

192 
	`ƒf_ßadc_evít_˛ór
(
NRF_SAADC_EVENT_STOPPED
);

193 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_SAADC_EVENT_STOPPED
));

194 
m_cb
.
adc_°©e
 = 
NRF_SAADC_STATE_IDLE
;

198 
uöt32_t
 
limô_Êags
 = 
m_cb
.
limôs_íabÀd_Êags
;

199 
uöt32_t
 
Êag_idx
;

200 
ƒf_ßadc_evít_t
 
evít
;

202 
limô_Êags
)

204 
Êag_idx
 = 
	`__CLZ
(
limô_Êags
);

205 
limô_Êags
 &~((1UL << 31Ë>> 
Êag_idx
);

206 
evít
 = 
	`FLAG_IDX_TO_EVENT
(
Êag_idx
);

207 i‡(
	`ƒf_ßadc_evít_check
(
evít
))

209 
	`ƒf_ßadc_evít_˛ór
(
evít
);

210 
ƒf_drv_ßadc_evt_t
 
evt
;

211 
evt
.
ty≥
 = 
NRF_DRV_SAADC_EVT_LIMIT
;

212 
evt
.
d©a
.
limô
.
ch™√l
 = 
	`LIMIT_EVENT_TO_CHANNEL
(
evít
);

213 
evt
.
d©a
.
limô
.
limô_ty≥
 = 
	`LIMIT_EVENT_TO_LIMIT_TYPE
(
evít
);

214 
	`NRF_LOG_DEBUG
("Evíàlimô, ch™√l: %d,ÜimôÅy≥: %s.\r\n", 
evt
.
d©a
.
limô
.
ch™√l
, (
uöt32_t
)
	`EVT_TO_STR
”vt.d©a.limô.
limô_ty≥
));

215 
m_cb
.
	`evít_h™dÀr
(&
evt
);

219 
	}
}

222 
ªt_code_t
 
	$ƒf_drv_ßadc_öô
(
ƒf_drv_ßadc_c⁄fig_t
 c⁄° * 
p_c⁄fig
,

223 
ƒf_drv_ßadc_evít_h™dÀr_t
 
evít_h™dÀr
)

225 
ªt_code_t
 
îr_code
;

227 i‡(
m_cb
.
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
)

229 
îr_code
 = 
NRF_ERROR_INVALID_STATE
;

232  
îr_code
;

234 i‡(
evít_h™dÀr
 =
NULL
)

236 
îr_code
 = 
NRF_ERROR_INVALID_PARAM
;

239  
îr_code
;

242 i‡(
p_c⁄fig
 =
NULL
)

244 
p_c⁄fig
 = &
m_deÁu…_c⁄fig
;

247 
m_cb
.
evít_h™dÀr
 =Évent_handler;

248 
	`ƒf_ßadc_ªsﬁuti⁄_£t
(
p_c⁄fig
->
ªsﬁuti⁄
);

249 
	`ƒf_ßadc_ovîßm∂e_£t
(
p_c⁄fig
->
ovîßm∂e
);

250 
m_cb
.
low_powî_mode
 = 
p_c⁄fig
->low_power_mode;

251 
m_cb
.
°©e
 = 
NRF_DRV_STATE_INITIALIZED
;

252 
m_cb
.
adc_°©e
 = 
NRF_SAADC_STATE_IDLE
;

253 
m_cb
.
a˘ive_ch™√ls
 = 0;

254 
m_cb
.
limôs_íabÀd_Êags
 = 0;

255 
m_cb
.
c⁄vîsi⁄s_íd
 = 
Ál£
;

257 
	`ƒf_ßadc_öt_dißbÀ
(
NRF_SAADC_INT_ALL
);

258 
	`ƒf_ßadc_evít_˛ór
(
NRF_SAADC_EVENT_END
);

259 
	`ƒf_drv_comm⁄_úq_íabÀ
(
SAADC_IRQn
, 
p_c⁄fig
->
öãºu±_¥i‹ôy
);

260 
	`ƒf_ßadc_öt_íabÀ
(
NRF_SAADC_INT_END
);

261 i‡(
m_cb
.
low_powî_mode
)

263 
	`ƒf_ßadc_öt_íabÀ
(
NRF_SAADC_INT_STARTED
);

266 
	`ƒf_ßadc_íabÀ
();

268 
îr_code
 = 
NRF_SUCCESS
;

270  
îr_code
;

271 
	}
}

274 
	$ƒf_drv_ßadc_unöô
()

276 
	`ASSERT
(
m_cb
.
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
);

278 
	`ƒf_ßadc_öt_dißbÀ
(
NRF_SAADC_INT_ALL
);

279 
	`ƒf_drv_comm⁄_úq_dißbÀ
(
SAADC_IRQn
);

280 
	`ƒf_ßadc_èsk_åiggî
(
NRF_SAADC_TASK_STOP
);

283 
uöt32_t
 
timeout
 = 
HW_TIMEOUT
;

285 
	`ƒf_ßadc_evít_check
(
NRF_SAADC_EVENT_STOPPED
Ë=0 && 
timeout
 > 0)

287 --
timeout
;

289 
	`ASSERT
(
timeout
 > 0);

291 
	`ƒf_ßadc_dißbÀ
();

292 
m_cb
.
adc_°©e
 = 
NRF_SAADC_STATE_IDLE
;

294 
uöt8_t
 
ch™√l
 = 0; ch™√»< 
NRF_SAADC_CHANNEL_COUNT
; ++channel)

296 i‡(
m_cb
.
p£l
[
ch™√l
].
p£Õ
 !
NRF_SAADC_INPUT_DISABLED
)

298 ()
	`ƒf_drv_ßadc_ch™√l_unöô
(
ch™√l
);

302 
m_cb
.
°©e
 = 
NRF_DRV_STATE_UNINITIALIZED
;

303 
	}
}

306 
ªt_code_t
 
	$ƒf_drv_ßadc_ch™√l_öô
(
uöt8_t
 
ch™√l
,

307 
ƒf_ßadc_ch™√l_c⁄fig_t
 c⁄° * c⁄° 
p_c⁄fig
)

309 
	`ASSERT
(
m_cb
.
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
);

310 
	`ASSERT
(
ch™√l
 < 
NRF_SAADC_CHANNEL_COUNT
);

312 
	`ASSERT
((
	`ƒf_ßadc_ovîßm∂e_gë
(Ë=
NRF_SAADC_OVERSAMPLE_DISABLED
) ||

313 (
m_cb
.
a˘ive_ch™√ls
 == 0));

314 
	`ASSERT
((
p_c⁄fig
->
pö_p
 <
NRF_SAADC_INPUT_VDD
) &&

315 (
p_c⁄fig
->
pö_p
 > 
NRF_SAADC_INPUT_DISABLED
));

316 
	`ASSERT
(
p_c⁄fig
->
pö_n
 <
NRF_SAADC_INPUT_VDD
);

318 
ªt_code_t
 
îr_code
;

321 i‡(
m_cb
.
adc_°©e
 !
NRF_SAADC_STATE_IDLE
)

323 
îr_code
 = 
NRF_ERROR_BUSY
;

326  
îr_code
;

329 i‡(!
m_cb
.
p£l
[
ch™√l
].
p£Õ
)

331 ++
m_cb
.
a˘ive_ch™√ls
;

333 
m_cb
.
p£l
[
ch™√l
].
p£Õ
 = 
p_c⁄fig
->
pö_p
;

334 
m_cb
.
p£l
[
ch™√l
].
p£ 
 = 
p_c⁄fig
->
pö_n
;

335 
	`ƒf_ßadc_ch™√l_öô
(
ch™√l
, 
p_c⁄fig
);

336 
	`ƒf_ßadc_ch™√l_öput_£t
(
ch™√l
, 
p_c⁄fig
->
pö_p
,Ö_c⁄fig->
pö_n
);

338 
îr_code
 = 
NRF_SUCCESS
;

340  
îr_code
;

341 
	}
}

344 
ªt_code_t
 
	$ƒf_drv_ßadc_ch™√l_unöô
(
uöt8_t
 
ch™√l
)

346 
	`ASSERT
(
ch™√l
 < 
NRF_SAADC_CHANNEL_COUNT
)

347 
	`ASSERT
(
m_cb
.
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
);

349 
ªt_code_t
 
îr_code
;

352 i‡(
m_cb
.
adc_°©e
 !
NRF_SAADC_STATE_IDLE
)

354 
îr_code
 = 
NRF_ERROR_BUSY
;

355 
	`NRF_LOG_WARNING
("Function: %s,Érror code: %s.\r\n",

356 (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

357  
îr_code
;

360 i‡(
m_cb
.
p£l
[
ch™√l
].
p£Õ
)

362 --
m_cb
.
a˘ive_ch™√ls
;

364 
m_cb
.
p£l
[
ch™√l
].
p£Õ
 = 
NRF_SAADC_INPUT_DISABLED
;

365 
m_cb
.
p£l
[
ch™√l
].
p£ 
 = 
NRF_SAADC_INPUT_DISABLED
;

366 
	`ƒf_ßadc_ch™√l_öput_£t
(
ch™√l
, 
NRF_SAADC_INPUT_DISABLED
, NRF_SAADC_INPUT_DISABLED);

367 
	`ƒf_drv_ßadc_limôs_£t
(
ch™√l
, 
NRF_DRV_SAADC_LIMITL_DISABLED
, 
NRF_DRV_SAADC_LIMITH_DISABLED
);

370 
îr_code
 = 
NRF_SUCCESS
;

373  
îr_code
;

374 
	}
}

377 
uöt32_t
 
	$ƒf_drv_ßadc_ßm∂e_èsk_gë
()

379  
	`ƒf_ßadc_èsk_addªss_gë
(

380 
m_cb
.
low_powî_mode
 ? 
NRF_SAADC_TASK_START
 : 
NRF_SAADC_TASK_SAMPLE
);

381 
	}
}

384 
ªt_code_t
 
	$ƒf_drv_ßadc_ßm∂e_c⁄vît
(
uöt8_t
 
ch™√l
, 
ƒf_ßadc_vÆue_t
 * 
p_vÆue
)

386 
ªt_code_t
 
îr_code
;

388 i‡(
m_cb
.
adc_°©e
 !
NRF_SAADC_STATE_IDLE
)

390 
îr_code
 = 
NRF_ERROR_BUSY
;

391 
	`NRF_LOG_WARNING
("Fun˘i⁄: %†îr‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

392  
îr_code
;

394 
m_cb
.
adc_°©e
 = 
NRF_SAADC_STATE_BUSY
;

395 
	`ƒf_ßadc_öt_dißbÀ
(
NRF_SAADC_INT_STARTED
 | 
NRF_SAADC_INT_END
);

396 
	`ƒf_ßadc_buf„r_öô
(
p_vÆue
, 1);

397 i‡(
m_cb
.
a˘ive_ch™√ls
 > 1)

399 
uöt8_t
 
i
 = 0; i < 
NRF_SAADC_CHANNEL_COUNT
; ++i)

401 
	`ƒf_ßadc_ch™√l_öput_£t
(
i
, 
NRF_SAADC_INPUT_DISABLED
, NRF_SAADC_INPUT_DISABLED);

404 
	`ƒf_ßadc_ch™√l_öput_£t
(
ch™√l
,

405 
m_cb
.
p£l
[
ch™√l
].
p£Õ
, m_cb.p£l[ch™√l].
p£ 
);

406 
	`ƒf_ßadc_èsk_åiggî
(
NRF_SAADC_TASK_START
);

407 
	`ƒf_ßadc_èsk_åiggî
(
NRF_SAADC_TASK_SAMPLE
);

409 
uöt32_t
 
timeout
 = 
HW_TIMEOUT
;

411 0 =
	`ƒf_ßadc_evít_check
(
NRF_SAADC_EVENT_END
Ë&& 
timeout
 > 0)

413 
timeout
--;

415 
	`ƒf_ßadc_evít_˛ór
(
NRF_SAADC_EVENT_END
);

417 
	`NRF_LOG_INFO
("C⁄vîsi⁄ vÆue: %d, ch™√l.\r\n", *
p_vÆue
, 
ch™√l
);

419 i‡(
m_cb
.
a˘ive_ch™√ls
 > 1)

421 
uöt8_t
 
i
 = 0; i < 
NRF_SAADC_CHANNEL_COUNT
; ++i)

423 
	`ƒf_ßadc_ch™√l_öput_£t
(
i
, 
m_cb
.
p£l
[i].
p£Õ
, m_cb.p£l[i].
p£ 
);

427 i‡(
m_cb
.
low_powî_mode
)

429 
	`ƒf_ßadc_öt_íabÀ
(
NRF_SAADC_INT_STARTED
 | 
NRF_SAADC_INT_END
);

433 
	`ƒf_ßadc_öt_íabÀ
(
NRF_SAADC_INT_END
);

436 
m_cb
.
adc_°©e
 = 
NRF_SAADC_STATE_IDLE
;

438 
îr_code
 = 
NRF_SUCCESS
;

439 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

440  
îr_code
;

441 
	}
}

444 
ªt_code_t
 
	$ƒf_drv_ßadc_buf„r_c⁄vît
(
ƒf_ßadc_vÆue_t
 * 
p_buf„r
, 
uöt16_t
 
size
)

446 
	`ASSERT
(
m_cb
.
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
);

447 
	`ASSERT
((
size
 % 
m_cb
.
a˘ive_ch™√ls
) == 0);

448 
ªt_code_t
 
îr_code
;

451 
	`ƒf_ßadc_öt_dißbÀ
(
NRF_SAADC_INT_END
 | 
NRF_SAADC_INT_CALIBRATEDONE
);

452 i‡(
m_cb
.
adc_°©e
 =
NRF_SAADC_STATE_CALIBRATION
)

454 
	`ƒf_ßadc_öt_íabÀ
(
NRF_SAADC_INT_END
 | 
NRF_SAADC_INT_CALIBRATEDONE
);

455 
îr_code
 = 
NRF_ERROR_BUSY
;

456 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

457  
îr_code
;

459 i‡(
m_cb
.
adc_°©e
 =
NRF_SAADC_STATE_BUSY
)

461 i‡–
m_cb
.
p_£c⁄d¨y_buf„r
)

463 
	`ƒf_ßadc_öt_íabÀ
(
NRF_SAADC_INT_END
);

464 
îr_code
 = 
NRF_ERROR_BUSY
;

465 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

466  
îr_code
;

470 
m_cb
.
p_£c⁄d¨y_buf„r
 = 
p_buf„r
;

471 
m_cb
.
£c⁄d¨y_buf„r_size
 = 
size
;

472 i‡(!
m_cb
.
low_powî_mode
)

474 
	`ƒf_ßadc_evít_check
(
NRF_SAADC_EVENT_STARTED
) == 0);

475 
	`ƒf_ßadc_evít_˛ór
(
NRF_SAADC_EVENT_STARTED
);

476 
	`ƒf_ßadc_buf„r_öô
(
p_buf„r
, 
size
);

478 
	`ƒf_ßadc_öt_íabÀ
(
NRF_SAADC_INT_END
);

479 
îr_code
 = 
NRF_SUCCESS
;

480 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

481  
îr_code
;

484 
	`ƒf_ßadc_öt_íabÀ
(
NRF_SAADC_INT_END
);

485 
m_cb
.
adc_°©e
 = 
NRF_SAADC_STATE_BUSY
;

487 
m_cb
.
p_buf„r
 =Ö_buffer;

488 
m_cb
.
buf„r_size
 = 
size
;

489 
m_cb
.
p_£c⁄d¨y_buf„r
 = 
NULL
;

491 
	`NRF_LOG_INFO
("Function: %d, bufferÜength: %d,áctive channels: %d.\r\n",

492 (
uöt32_t
)
__func__
, 
size
, 
m_cb
.
a˘ive_ch™√ls
);

494 i‡(
m_cb
.
low_powî_mode
)

496 
m_cb
.
buf„r_size_À·
 = 
size
;

497 
	`ƒf_ßadc_buf„r_öô
(
p_buf„r
, 
m_cb
.
a˘ive_ch™√ls
);

501 
	`ƒf_ßadc_buf„r_öô
(
p_buf„r
, 
size
);

502 
	`ƒf_ßadc_evít_˛ór
(
NRF_SAADC_EVENT_STARTED
);

503 
	`ƒf_ßadc_èsk_åiggî
(
NRF_SAADC_TASK_START
);

506 
îr_code
 = 
NRF_SUCCESS
;

507 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

508  
îr_code
;

509 
	}
}

512 
ªt_code_t
 
	$ƒf_drv_ßadc_ßm∂e
()

514 
	`ASSERT
(
m_cb
.
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
);

516 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

517 i‡(
m_cb
.
adc_°©e
 !
NRF_SAADC_STATE_BUSY
)

519 
îr_code
 = 
NRF_ERROR_INVALID_STATE
;

521 i‡(
m_cb
.
low_powî_mode
)

523 
	`ƒf_ßadc_èsk_åiggî
(
NRF_SAADC_TASK_START
);

527 
	`ƒf_ßadc_èsk_åiggî
(
NRF_SAADC_TASK_SAMPLE
);

530 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

531  
îr_code
;

532 
	}
}

535 
ªt_code_t
 
	$ƒf_drv_ßadc_ˇlibøã_off£t
()

537 
	`ASSERT
(
m_cb
.
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
);

539 
ªt_code_t
 
îr_code
;

541 i‡(
m_cb
.
adc_°©e
 !
NRF_SAADC_STATE_IDLE
)

543 
îr_code
 = 
NRF_ERROR_BUSY
;

544 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

545  
îr_code
;

548 
m_cb
.
adc_°©e
 = 
NRF_SAADC_STATE_CALIBRATION
;

550 
	`ƒf_ßadc_evít_˛ór
(
NRF_SAADC_EVENT_CALIBRATEDONE
);

551 
	`ƒf_ßadc_öt_íabÀ
(
NRF_SAADC_INT_CALIBRATEDONE
);

552 
	`ƒf_ßadc_èsk_åiggî
(
NRF_SAADC_TASK_CALIBRATEOFFSET
);

553 
îr_code
 = 
NRF_SUCCESS
;

554 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

555  
îr_code
;

556 
	}
}

559 
boﬁ
 
	$ƒf_drv_ßadc_is_busy
()

561  (
m_cb
.
adc_°©e
 !
NRF_SAADC_STATE_IDLE
);

562 
	}
}

565 
	$ƒf_drv_ßadc_ab‹t
()

567 i‡(
	`ƒf_drv_ßadc_is_busy
())

569 
	`ƒf_ßadc_evít_˛ór
(
NRF_SAADC_EVENT_STOPPED
);

570 
	`ƒf_ßadc_èsk_åiggî
(
NRF_SAADC_TASK_STOP
);

572 i‡(
m_cb
.
adc_°©e
 =
NRF_SAADC_STATE_CALIBRATION
)

574 
m_cb
.
adc_°©e
 = 
NRF_SAADC_STATE_IDLE
;

579 
uöt32_t
 
timeout
 = 
HW_TIMEOUT
;

581 (
m_cb
.
adc_°©e
 !
NRF_SAADC_STATE_IDLE
Ë&& (
timeout
 > 0))

583 --
timeout
;

585 
	`ASSERT
(
timeout
 > 0);

588 
m_cb
.
p_buf„r
 = 0;

589 
m_cb
.
p_£c⁄d¨y_buf„r
 = 0;

590 
	`NRF_LOG_INFO
("Conversionáborted.\r\n");

592 
	}
}

595 
	$ƒf_drv_ßadc_limôs_£t
(
uöt8_t
 
ch™√l
, 
öt16_t
 
limô_low
, i¡16_à
limô_high
)

597 
	`ASSERT
(
m_cb
.
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
);

598 
	`ASSERT
(
m_cb
.
evít_h™dÀr
);

599 
	`ASSERT
(
limô_low
 >
NRF_DRV_SAADC_LIMITL_DISABLED
);

600 
	`ASSERT
(
limô_high
 <
NRF_DRV_SAADC_LIMITH_DISABLED
);

601 
	`ASSERT
(
limô_low
 < 
limô_high
);

602 
	`ƒf_ßadc_ch™√l_limôs_£t
(
ch™√l
, 
limô_low
, 
limô_high
);

604 
uöt32_t
 
öt_mask
 = 
	`ƒf_ßadc_limô_öt_gë
(
ch™√l
, 
NRF_SAADC_LIMIT_LOW
);

605 i‡(
limô_low
 =
NRF_DRV_SAADC_LIMITL_DISABLED
)

607 
m_cb
.
limôs_íabÀd_Êags
 &~(0x80000000 >> 
	`LOW_LIMIT_TO_FLAG
(
ch™√l
));

608 
	`ƒf_ßadc_öt_dißbÀ
(
öt_mask
);

612 
m_cb
.
limôs_íabÀd_Êags
 |(0x80000000 >> 
	`LOW_LIMIT_TO_FLAG
(
ch™√l
));

613 
	`ƒf_ßadc_öt_íabÀ
(
öt_mask
);

616 
öt_mask
 = 
	`ƒf_ßadc_limô_öt_gë
(
ch™√l
, 
NRF_SAADC_LIMIT_HIGH
);

617 i‡(
limô_high
 =
NRF_DRV_SAADC_LIMITH_DISABLED
)

619 
m_cb
.
limôs_íabÀd_Êags
 &~(0x80000000 >> 
	`HIGH_LIMIT_TO_FLAG
(
ch™√l
));

620 
	`ƒf_ßadc_öt_dißbÀ
(
öt_mask
);

624 
m_cb
.
limôs_íabÀd_Êags
 |(0x80000000 >> 
	`HIGH_LIMIT_TO_FLAG
(
ch™√l
));

625 
	`ƒf_ßadc_öt_íabÀ
(
öt_mask
);

627 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\spi_master\nrf_drv_spi.c

41 
	~"sdk_comm⁄.h
"

42 #i‡
NRF_MODULE_ENABLED
(
SPI
)

43 
	#ENABLED_SPI_COUNT
 (
SPI0_ENABLED
+
SPI1_ENABLED
+
SPI2_ENABLED
)

	)

44 #i‡
ENABLED_SPI_COUNT


46 
	~"ƒf_drv_•i.h
"

47 
	~"ƒf_drv_comm⁄.h
"

48 
	~"ƒf_gpio.h
"

49 
	~"ƒf_as£π.h
"

50 
	~"≠p_utû_∂©f‹m.h
"

52 
	#NRF_LOG_MODULE_NAME
 "SPI"

	)

54 #i‡
SPI_CONFIG_LOG_ENABLED


55 
	#NRF_LOG_LEVEL
 
SPI_CONFIG_LOG_LEVEL


	)

56 
	#NRF_LOG_INFO_COLOR
 
SPI_CONFIG_INFO_COLOR


	)

57 
	#NRF_LOG_DEBUG_COLOR
 
SPI_CONFIG_DEBUG_COLOR


	)

59 
	#NRF_LOG_LEVEL
 0

	)

61 
	~"ƒf_log.h
"

63 #i‚de‡
SPIM_PRESENT


66 #unde‡
SPI0_USE_EASY_DMA


67 
	#SPI0_USE_EASY_DMA
 0

	)

68 #unde‡
SPI1_USE_EASY_DMA


69 
	#SPI1_USE_EASY_DMA
 0

	)

70 #unde‡
SPI2_USE_EASY_DMA


71 
	#SPI2_USE_EASY_DMA
 0

	)

74 #i‚de‡
SPI0_USE_EASY_DMA


75 
	#SPI0_USE_EASY_DMA
 0

	)

78 #i‚de‡
SPI1_USE_EASY_DMA


79 
	#SPI1_USE_EASY_DMA
 0

	)

82 #i‚de‡
SPI2_USE_EASY_DMA


83 
	#SPI2_USE_EASY_DMA
 0

	)

88 #i‡((
NRF_MODULE_ENABLED
(
SPI0
Ë&& 
SPI0_USE_EASY_DMA
) || \

89 (
NRF_MODULE_ENABLED
(
SPI1
Ë&& 
	gSPI1_USE_EASY_DMA
) || \

90 (
NRF_MODULE_ENABLED
(
SPI2
Ë&& 
	gSPI2_USE_EASY_DMA
))

91 
	#SPIM_IN_USE


	)

93 #i‡((
NRF_MODULE_ENABLED
(
SPI0
Ë&& !
SPI0_USE_EASY_DMA
) || \

94 (
NRF_MODULE_ENABLED
(
SPI1
Ë&& !
	gSPI1_USE_EASY_DMA
) || \

95 (
NRF_MODULE_ENABLED
(
SPI2
Ë&& !
	gSPI2_USE_EASY_DMA
))

96 
	#SPI_IN_USE


	)

98 #i‡
deföed
(
SPIM_IN_USE
Ë&& deföed(
SPI_IN_USE
)

100 
	#CODE_FOR_SPIM
(
code
Ëi‡(
p_ö°™˚
->
u£_ósy_dma
Ë{ codê}

	)

101 
	#CODE_FOR_SPI
(
code
Ë{ codê}

	)

102 #ñi‡
deföed
(
SPIM_IN_USE
Ë&& !deföed(
SPI_IN_USE
)

104 
	#CODE_FOR_SPIM
(
code
Ë{ codê}

	)

105 
	#CODE_FOR_SPI
(
code
)

	)

106 #ñi‡!
deföed
(
SPIM_IN_USE
Ë&& deföed(
SPI_IN_USE
)

108 
	#CODE_FOR_SPIM
(
code
)

	)

109 
	#CODE_FOR_SPI
(
code
Ë{ codê}

	)

114 #ifde‡
SPIM_IN_USE


115 
	#END_INT_MASK
 
NRF_SPIM_INT_END_MASK


	)

121 
ƒf_drv_•i_h™dÀr_t
 
	mh™dÀr
;

122 
ƒf_drv_•i_evt_t
 
	mevt
;

123 
ƒf_drv_°©e_t
 
	m°©e
;

124 vﬁ©ûê
boﬁ
 
	må™s„r_ö_¥ogªss
;

128 
uöt8_t
 
	mss_pö
;

129 
uöt8_t
 
	m‹c
;

130 
uöt8_t
 
	mbyãs_å™s„ºed
;

132 
boﬁ
 
	mtx_d⁄e
 : 1;

133 
boﬁ
 
	mrx_d⁄e
 : 1;

134 } 
	t•i_c⁄åﬁ_block_t
;

135 
•i_c⁄åﬁ_block_t
 
	gm_cb
[
ENABLED_SPI_COUNT
];

137 #i‡
NRF_MODULE_ENABLED
(
PERIPHERAL_RESOURCE_SHARING
)

138 
	#IRQ_HANDLER_NAME
(
n
Ë
úq_h™dÀr_f‹_ö°™˚_
##
	)
n

139 
	#IRQ_HANDLER
(
n
Ë
	`IRQ_HANDLER_NAME
“)()

	)

141 #i‡
NRF_MODULE_ENABLED
(
SPI0
)

142 
IRQ_HANDLER
(0);

144 #i‡
NRF_MODULE_ENABLED
(
SPI1
)

145 
IRQ_HANDLER
(1);

147 #i‡
NRF_MODULE_ENABLED
(
SPI2
)

148 
IRQ_HANDLER
(2);

150 
ƒf_drv_úq_h™dÀr_t
 c⁄° 
	gm_úq_h™dÀrs
[
ENABLED_SPI_COUNT
] = {

151 #i‡
NRF_MODULE_ENABLED
(
SPI0
)

152 
IRQ_HANDLER_NAME
(0),

154 #i‡
NRF_MODULE_ENABLED
(
SPI1
)

155 
IRQ_HANDLER_NAME
(1),

157 #i‡
NRF_MODULE_ENABLED
(
SPI2
)

158 
IRQ_HANDLER_NAME
(2),

162 
	#IRQ_HANDLER
(
n
Ë
SPI
##n##
	`_IRQ_HANDLER
()

	)

166 
ªt_code_t
 
	$ƒf_drv_•i_öô
(
ƒf_drv_•i_t
 c⁄° * c⁄° 
p_ö°™˚
,

167 
ƒf_drv_•i_c⁄fig_t
 c⁄° * 
p_c⁄fig
,

168 
ƒf_drv_•i_h™dÀr_t
 
h™dÀr
)

170 
	`ASSERT
(
p_c⁄fig
);

171 
•i_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

172 
ªt_code_t
 
îr_code
;

174 i‡(
p_cb
->
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
)

176 
îr_code
 = 
NRF_ERROR_INVALID_STATE
;

177 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

178  
îr_code
;

181 #i‡
	`NRF_MODULE_ENABLED
(
PERIPHERAL_RESOURCE_SHARING
)

182 i‡(
	`ƒf_drv_comm⁄_≥r_ªs_acquúe
(
p_ö°™˚
->
p_ªgi°îs
,

183 
m_úq_h™dÀrs
[
p_ö°™˚
->
drv_ö°_idx
]Ë!
NRF_SUCCESS
)

185 
îr_code
 = 
NRF_ERROR_BUSY
;

186 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

187  
îr_code
;

191 
p_cb
->
h™dÀr
 = handler;

193 
uöt32_t
 
mosi_pö
;

194 
uöt32_t
 
miso_pö
;

200 i‡(
p_c⁄fig
->
mode
 <
NRF_DRV_SPI_MODE_1
)

202 
	`ƒf_gpio_pö_˛ór
(
p_c⁄fig
->
sck_pö
);

206 
	`ƒf_gpio_pö_£t
(
p_c⁄fig
->
sck_pö
);

208 
NRF_GPIO
->
PIN_CNF
[
p_c⁄fig
->
sck_pö
] =

209 (
GPIO_PIN_CNF_DIR_Ouçut
 << 
GPIO_PIN_CNF_DIR_Pos
)

210 | (
GPIO_PIN_CNF_INPUT_C⁄√˘
 << 
GPIO_PIN_CNF_INPUT_Pos
)

211 | (
GPIO_PIN_CNF_PULL_DißbÀd
 << 
GPIO_PIN_CNF_PULL_Pos
)

212 | (
GPIO_PIN_CNF_DRIVE_S0S1
 << 
GPIO_PIN_CNF_DRIVE_Pos
)

213 | (
GPIO_PIN_CNF_SENSE_DißbÀd
 << 
GPIO_PIN_CNF_SENSE_Pos
);

215 i‡(
p_c⁄fig
->
mosi_pö
 !
NRF_DRV_SPI_PIN_NOT_USED
)

217 
mosi_pö
 = 
p_c⁄fig
->mosi_pin;

218 
	`ƒf_gpio_pö_˛ór
(
mosi_pö
);

219 
	`ƒf_gpio_cfg_ouçut
(
mosi_pö
);

223 
mosi_pö
 = 
NRF_SPI_PIN_NOT_CONNECTED
;

226 i‡(
p_c⁄fig
->
miso_pö
 !
NRF_DRV_SPI_PIN_NOT_USED
)

228 
miso_pö
 = 
p_c⁄fig
->miso_pin;

229 
	`ƒf_gpio_cfg_öput
(
miso_pö
, 
NRF_GPIO_PIN_NOPULL
);

233 
miso_pö
 = 
NRF_SPI_PIN_NOT_CONNECTED
;

236 i‡(
p_c⁄fig
->
ss_pö
 !
NRF_DRV_SPI_PIN_NOT_USED
)

238 
	`ƒf_gpio_pö_£t
(
p_c⁄fig
->
ss_pö
);

239 
	`ƒf_gpio_cfg_ouçut
(
p_c⁄fig
->
ss_pö
);

241 
m_cb
[
p_ö°™˚
->
drv_ö°_idx
].
ss_pö
 = 
p_c⁄fig
->ss_pin;

243 
CODE_FOR_SPIM


245 
NRF_SPIM_Ty≥
 * 
p_•im
 = 
p_ö°™˚
->
p_ªgi°îs
;

246 
	`ƒf_•im_pös_£t
(
p_•im
, 
p_c⁄fig
->
sck_pö
, 
mosi_pö
, 
miso_pö
);

247 
	`ƒf_•im_‰equícy_£t
(
p_•im
,

248 (
ƒf_•im_‰equícy_t
)
p_c⁄fig
->
‰equícy
);

249 
	`ƒf_•im_c⁄figuª
(
p_•im
,

250 (
ƒf_•im_mode_t
)
p_c⁄fig
->
mode
,

251 (
ƒf_•im_bô_‹dî_t
)
p_c⁄fig
->
bô_‹dî
);

253 
	`ƒf_•im_‹c_£t
(
p_•im
, 
p_c⁄fig
->
‹c
);

255 i‡(
p_cb
->
h™dÀr
)

257 
	`ƒf_•im_öt_íabÀ
(
p_•im
, 
END_INT_MASK
);

260 
	`ƒf_•im_íabÀ
(
p_•im
);

262 
CODE_FOR_SPI


264 
NRF_SPI_Ty≥
 * 
p_•i
 = 
p_ö°™˚
->
p_ªgi°îs
;

265 
	`ƒf_•i_pös_£t
(
p_•i
, 
p_c⁄fig
->
sck_pö
, 
mosi_pö
, 
miso_pö
);

266 
	`ƒf_•i_‰equícy_£t
(
p_•i
,

267 (
ƒf_•i_‰equícy_t
)
p_c⁄fig
->
‰equícy
);

268 
	`ƒf_•i_c⁄figuª
(
p_•i
,

269 (
ƒf_•i_mode_t
)
p_c⁄fig
->
mode
,

270 (
ƒf_•i_bô_‹dî_t
)
p_c⁄fig
->
bô_‹dî
);

272 
m_cb
[
p_ö°™˚
->
drv_ö°_idx
].
‹c
 = 
p_c⁄fig
->orc;

274 i‡(
p_cb
->
h™dÀr
)

276 
	`ƒf_•i_öt_íabÀ
(
p_•i
, 
NRF_SPI_INT_READY_MASK
);

279 
	`ƒf_•i_íabÀ
(
p_•i
);

282 i‡(
p_cb
->
h™dÀr
)

284 
	`ƒf_drv_comm⁄_úq_íabÀ
(
p_ö°™˚
->
úq
, 
p_c⁄fig
->
úq_¥i‹ôy
);

287 
p_cb
->
å™s„r_ö_¥ogªss
 = 
Ál£
;

288 
p_cb
->
°©e
 = 
NRF_DRV_STATE_INITIALIZED
;

290 
	`NRF_LOG_INFO
("Init\r\n");

292 
îr_code
 = 
NRF_SUCCESS
;

293 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

294  
îr_code
;

295 
	}
}

297 
	$ƒf_drv_•i_unöô
(
ƒf_drv_•i_t
 c⁄° * c⁄° 
p_ö°™˚
)

299 
•i_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

300 
	`ASSERT
(
p_cb
->
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
);

302 i‡(
p_cb
->
h™dÀr
)

304 
	`ƒf_drv_comm⁄_úq_dißbÀ
(
p_ö°™˚
->
úq
);

307 
	#DISABLE_ALL
 0xFFFFFFFF

	)

309 
CODE_FOR_SPIM


311 
NRF_SPIM_Ty≥
 * 
p_•im
 = 
p_ö°™˚
->
p_ªgi°îs
;

312 i‡(
p_cb
->
h™dÀr
)

314 
	`ƒf_•im_öt_dißbÀ
(
p_•im
, 
DISABLE_ALL
);

315 i‡(
p_cb
->
å™s„r_ö_¥ogªss
)

318 
	`ƒf_•im_èsk_åiggî
(
p_•im
, 
NRF_SPIM_TASK_STOP
);

319 !
	`ƒf_•im_evít_check
(
p_•im
, 
NRF_SPIM_EVENT_STOPPED
)) {}

320 
p_cb
->
å™s„r_ö_¥ogªss
 = 
Ál£
;

323 
	`ƒf_•im_dißbÀ
(
p_•im
);

325 
CODE_FOR_SPI


327 
NRF_SPI_Ty≥
 * 
p_•i
 = 
p_ö°™˚
->
p_ªgi°îs
;

328 i‡(
p_cb
->
h™dÀr
)

330 
	`ƒf_•i_öt_dißbÀ
(
p_•i
, 
DISABLE_ALL
);

332 
	`ƒf_•i_dißbÀ
(
p_•i
);

334 #unde‡
DISABLE_ALL


336 #i‡
	`NRF_MODULE_ENABLED
(
PERIPHERAL_RESOURCE_SHARING
)

337 
	`ƒf_drv_comm⁄_≥r_ªs_ªÀa£
(
p_ö°™˚
->
p_ªgi°îs
);

340 
p_cb
->
°©e
 = 
NRF_DRV_STATE_UNINITIALIZED
;

341 
	}
}

343 
ªt_code_t
 
	$ƒf_drv_•i_å™s„r
(
ƒf_drv_•i_t
 c⁄° * c⁄° 
p_ö°™˚
,

344 
uöt8_t
 c⁄° * 
p_tx_buf„r
,

345 
uöt8_t
 
tx_buf„r_Àngth
,

346 
uöt8_t
 * 
p_rx_buf„r
,

347 
uöt8_t
 
rx_buf„r_Àngth
)

349 
ƒf_drv_•i_x„r_desc_t
 
x„r_desc
;

350 
x„r_desc
.
p_tx_buf„r
 =Ö_tx_buffer;

351 
x„r_desc
.
p_rx_buf„r
 =Ö_rx_buffer;

352 
x„r_desc
.
tx_Àngth
 = 
tx_buf„r_Àngth
;

353 
x„r_desc
.
rx_Àngth
 = 
rx_buf„r_Àngth
;

355 
	`NRF_LOG_INFO
("Tøns„∏tx_Àn:%d,Ñx_Àn:%d.\r\n", 
tx_buf„r_Àngth
, 
rx_buf„r_Àngth
);

356 
	`NRF_LOG_DEBUG
("Tx data:\r\n");

357 
	`NRF_LOG_HEXDUMP_DEBUG
((
uöt8_t
 *)
p_tx_buf„r
, 
tx_buf„r_Àngth
 * (p_tx_buffer));

358  
	`ƒf_drv_•i_x„r
(
p_ö°™˚
, &
x„r_desc
, 0);

359 
	}
}

361 
	$föish_å™s„r
(
•i_c⁄åﬁ_block_t
 * 
p_cb
)

364 i‡(
p_cb
->
ss_pö
 !
NRF_DRV_SPI_PIN_NOT_USED
)

366 
	`ƒf_gpio_pö_£t
(
p_cb
->
ss_pö
);

371 
p_cb
->
å™s„r_ö_¥ogªss
 = 
Ál£
;

372 
p_cb
->
evt
.
ty≥
 = 
NRF_DRV_SPI_EVENT_DONE
;

373 
	`NRF_LOG_INFO
("Tøns„∏rx_Àn:%d.\r\n", 
p_cb
->
evt
.
d©a
.
d⁄e
.
rx_Àngth
);

374 
	`NRF_LOG_DEBUG
("Rx data:\r\n");

375 
	`NRF_LOG_HEXDUMP_DEBUG
((
uöt8_t
 *)
p_cb
->
evt
.
d©a
.
d⁄e
.
p_rx_buf„r
,

376 
p_cb
->
evt
.
d©a
.
d⁄e
.
rx_Àngth
 * ’_cb->evt.d©a.d⁄e.
p_rx_buf„r
));

377 
p_cb
->
	`h™dÀr
(&p_cb->
evt
);

378 
	}
}

380 #ifde‡
SPI_IN_USE


385 
boﬁ
 
	$å™s„r_byã
(
NRF_SPI_Ty≥
 * 
p_•i
, 
•i_c⁄åﬁ_block_t
 * 
p_cb
)

389 vﬁ©ûê
uöt8_t
 
rx_d©a
 = 
	`ƒf_•i_rxd_gë
(
p_•i
);

390 i‡(
p_cb
->
byãs_å™s„ºed
 <Ö_cb->
evt
.
d©a
.
d⁄e
.
rx_Àngth
)

392 
p_cb
->
evt
.
d©a
.
d⁄e
.
p_rx_buf„r
[p_cb->
byãs_å™s„ºed
] = 
rx_d©a
;

395 ++
p_cb
->
byãs_å™s„ºed
;

405 
uöt16_t
 
byãs_u£d
 = 
p_cb
->
byãs_å™s„ºed
 + 1;

406 i‡(
byãs_u£d
 < 
p_cb
->
evt
.
d©a
.
d⁄e
.
tx_Àngth
)

408 
	`ƒf_•i_txd_£t
(
p_•i
, 
p_cb
->
evt
.
d©a
.
d⁄e
.
p_tx_buf„r
[
byãs_u£d
]);

409  
åue
;

411 i‡(
byãs_u£d
 < 
p_cb
->
evt
.
d©a
.
d⁄e
.
rx_Àngth
)

413 
	`ƒf_•i_txd_£t
(
p_•i
, 
p_cb
->
‹c
);

414  
åue
;

417  (
p_cb
->
byãs_å™s„ºed
 <Ö_cb->
evt
.
d©a
.
d⁄e
.
tx_Àngth
 ||

418 
p_cb
->
byãs_å™s„ºed
 <Ö_cb->
evt
.
d©a
.
d⁄e
.
rx_Àngth
);

419 
	}
}

421 
	$•i_x„r
(
NRF_SPI_Ty≥
 * 
p_•i
,

422 
•i_c⁄åﬁ_block_t
 * 
p_cb
,

423 
ƒf_drv_•i_x„r_desc_t
 c⁄° * 
p_x„r_desc
)

425 
p_cb
->
byãs_å™s„ºed
 = 0;

426 
	`ƒf_•i_öt_dißbÀ
(
p_•i
, 
NRF_SPI_INT_READY_MASK
);

428 
	`ƒf_•i_evít_˛ór
(
p_•i
, 
NRF_SPI_EVENT_READY
);

433 
	`ƒf_•i_txd_£t
(
p_•i
,

434 (
p_x„r_desc
->
tx_Àngth
 > 0 ?Ö_x„r_desc->
p_tx_buf„r
[0] : 
p_cb
->
‹c
));

440 i‡(
p_x„r_desc
->
tx_Àngth
 > 1)

442 
	`ƒf_•i_txd_£t
(
p_•i
, 
p_x„r_desc
->
p_tx_buf„r
[1]);

444 i‡(
p_x„r_desc
->
rx_Àngth
 > 1)

446 
	`ƒf_•i_txd_£t
(
p_•i
, 
p_cb
->
‹c
);

454 i‡(
p_cb
->
h™dÀr
)

456 
	`ƒf_•i_öt_íabÀ
(
p_•i
, 
NRF_SPI_INT_READY_MASK
);

461 !
	`ƒf_•i_evít_check
(
p_•i
, 
NRF_SPI_EVENT_READY
)) {}

462 
	`ƒf_•i_evít_˛ór
(
p_•i
, 
NRF_SPI_EVENT_READY
);

463 
	`NRF_LOG_DEBUG
("SPI: Event: NRF_SPI_EVENT_READY.\r\n");

464 } 
	`å™s„r_byã
(
p_•i
, 
p_cb
));

465 i‡(
p_cb
->
ss_pö
 !
NRF_DRV_SPI_PIN_NOT_USED
)

467 
	`ƒf_gpio_pö_£t
(
p_cb
->
ss_pö
);

470 
	}
}

473 #ifde‡
SPIM_IN_USE


474 
__STATIC_INLINE
 
	$•im_öt_íabÀ
(
NRF_SPIM_Ty≥
 * 
p_•im
, 
boﬁ
 
íabÀ
)

476 i‡(!
íabÀ
)

478 
	`ƒf_•im_öt_dißbÀ
(
p_•im
, 
END_INT_MASK
);

482 
	`ƒf_•im_öt_íabÀ
(
p_•im
, 
END_INT_MASK
);

484 
	}
}

486 
__STATIC_INLINE
 
	$•im_li°_íabÀ_h™dÀ
(
NRF_SPIM_Ty≥
 * 
p_•im
, 
uöt32_t
 
Êags
)

488 i‡(
NRF_DRV_SPI_FLAG_TX_POSTINC
 & 
Êags
)

490 
	`ƒf_•im_tx_li°_íabÀ
(
p_•im
);

494 
	`ƒf_•im_tx_li°_dißbÀ
(
p_•im
);

497 i‡(
NRF_DRV_SPI_FLAG_RX_POSTINC
 & 
Êags
)

499 
	`ƒf_•im_rx_li°_íabÀ
(
p_•im
);

503 
	`ƒf_•im_rx_li°_dißbÀ
(
p_•im
);

505 
	}
}

507 
ªt_code_t
 
	$•im_x„r
(
NRF_SPIM_Ty≥
 * 
p_•im
,

508 
•i_c⁄åﬁ_block_t
 * 
p_cb
,

509 
ƒf_drv_•i_x„r_desc_t
 c⁄° * 
p_x„r_desc
,

510 
uöt32_t
 
Êags
)

512 
ªt_code_t
 
îr_code
;

515 i‡((
p_x„r_desc
->
p_tx_buf„r
 !
NULL
 && !
	`ƒf_drv_is_ö_RAM
(p_xfer_desc->p_tx_buffer)) ||

516 (
p_x„r_desc
->
p_rx_buf„r
 !
NULL
 && !
	`ƒf_drv_is_ö_RAM
(p_xfer_desc->p_rx_buffer)))

518 
p_cb
->
å™s„r_ö_¥ogªss
 = 
Ál£
;

519 
îr_code
 = 
NRF_ERROR_INVALID_ADDR
;

520 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

521  
îr_code
;

524 
	`ƒf_•im_tx_buf„r_£t
(
p_•im
, 
p_x„r_desc
->
p_tx_buf„r
,Ö_x„r_desc->
tx_Àngth
);

525 
	`ƒf_•im_rx_buf„r_£t
(
p_•im
, 
p_x„r_desc
->
p_rx_buf„r
,Ö_x„r_desc->
rx_Àngth
);

527 
	`ƒf_•im_evít_˛ór
(
p_•im
, 
NRF_SPIM_EVENT_END
);

529 
	`•im_li°_íabÀ_h™dÀ
(
p_•im
, 
Êags
);

531 i‡(!(
Êags
 & 
NRF_DRV_SPI_FLAG_HOLD_XFER
))

533 
	`ƒf_•im_èsk_åiggî
(
p_•im
, 
NRF_SPIM_TASK_START
);

536 i‡(!
p_cb
->
h™dÀr
)

538 !
	`ƒf_•im_evít_check
(
p_•im
, 
NRF_SPIM_EVENT_END
)){}

539 i‡(
p_cb
->
ss_pö
 !
NRF_DRV_SPI_PIN_NOT_USED
)

541 
	`ƒf_gpio_pö_£t
(
p_cb
->
ss_pö
);

546 
	`•im_öt_íabÀ
(
p_•im
, !(
Êags
 & 
NRF_DRV_SPI_FLAG_NO_XFER_EVT_HANDLER
));

548 
îr_code
 = 
NRF_SUCCESS
;

549 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

550  
îr_code
;

551 
	}
}

554 
ªt_code_t
 
	$ƒf_drv_•i_x„r
(
ƒf_drv_•i_t
 c⁄° * c⁄° 
p_ö°™˚
,

555 
ƒf_drv_•i_x„r_desc_t
 c⁄° * 
p_x„r_desc
,

556 
uöt32_t
 
Êags
)

558 
•i_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

559 
	`ASSERT
(
p_cb
->
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
);

560 
	`ASSERT
(
p_x„r_desc
->
p_tx_buf„r
 !
NULL
 ||Ö_x„r_desc->
tx_Àngth
 == 0);

561 
	`ASSERT
(
p_x„r_desc
->
p_rx_buf„r
 !
NULL
 ||Ö_x„r_desc->
rx_Àngth
 == 0);

563 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

565 i‡(
p_cb
->
å™s„r_ö_¥ogªss
)

567 
îr_code
 = 
NRF_ERROR_BUSY
;

568 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

569  
îr_code
;

573 i‡(
p_cb
->
h™dÀr
 && !(
Êags
 & (
NRF_DRV_SPI_FLAG_REPEATED_XFER
 | 
NRF_DRV_SPI_FLAG_NO_XFER_EVT_HANDLER
)))

575 
p_cb
->
å™s„r_ö_¥ogªss
 = 
åue
;

579 
p_cb
->
evt
.
d©a
.
d⁄e
 = *
p_x„r_desc
;

580 
p_cb
->
tx_d⁄e
 = 
Ál£
;

581 
p_cb
->
rx_d⁄e
 = 
Ál£
;

583 i‡(
p_cb
->
ss_pö
 !
NRF_DRV_SPI_PIN_NOT_USED
)

585 
	`ƒf_gpio_pö_˛ór
(
p_cb
->
ss_pö
);

587 
CODE_FOR_SPIM


589  
	`•im_x„r
(
p_ö°™˚
->
p_ªgi°îs
, 
p_cb
, 
p_x„r_desc
, 
Êags
);

591 
CODE_FOR_SPI


593 i‡(
Êags
)

595 
p_cb
->
å™s„r_ö_¥ogªss
 = 
Ál£
;

596 
îr_code
 = 
NRF_ERROR_NOT_SUPPORTED
;

600 
	`•i_x„r
(
p_ö°™˚
->
p_ªgi°îs
, 
p_cb
, 
p_x„r_desc
);

602 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

603  
îr_code
;

605 
	}
}

606 #ifde‡
SPIM_IN_USE


607 
	$úq_h™dÀr_•im
(
NRF_SPIM_Ty≥
 * 
p_•im
, 
•i_c⁄åﬁ_block_t
 * 
p_cb
)

609 
	`ASSERT
(
p_cb
->
h™dÀr
);

611 i‡(
	`ƒf_•im_evít_check
(
p_•im
, 
NRF_SPIM_EVENT_END
))

613 
	`ƒf_•im_evít_˛ór
(
p_•im
, 
NRF_SPIM_EVENT_END
);

614 
	`NRF_LOG_DEBUG
("SPIM: Event: NRF_SPIM_EVENT_END.\r\n");

615 
	`föish_å™s„r
(
p_cb
);

617 
	}
}

619 
uöt32_t
 
	$ƒf_drv_•i_°¨t_èsk_gë
(
ƒf_drv_•i_t
 c⁄° * 
p_ö°™˚
)

621 
NRF_SPIM_Ty≥
 * 
p_•im
 = (NRF_SPIM_Ty≥ *)
p_ö°™˚
->
p_ªgi°îs
;

622  
	`ƒf_•im_èsk_addªss_gë
(
p_•im
, 
NRF_SPIM_TASK_START
);

623 
	}
}

625 
uöt32_t
 
	$ƒf_drv_•i_íd_evít_gë
(
ƒf_drv_•i_t
 c⁄° * 
p_ö°™˚
)

627 
NRF_SPIM_Ty≥
 * 
p_•im
 = (NRF_SPIM_Ty≥ *)
p_ö°™˚
->
p_ªgi°îs
;

628  
	`ƒf_•im_evít_addªss_gë
(
p_•im
, 
NRF_SPIM_EVENT_END
);

629 
	}
}

632 #ifde‡
SPI_IN_USE


633 
	$úq_h™dÀr_•i
(
NRF_SPI_Ty≥
 * 
p_•i
, 
•i_c⁄åﬁ_block_t
 * 
p_cb
)

635 
	`ASSERT
(
p_cb
->
h™dÀr
);

637 
	`ƒf_•i_evít_˛ór
(
p_•i
, 
NRF_SPI_EVENT_READY
);

638 
	`NRF_LOG_DEBUG
("SPI: Event: NRF_SPI_EVENT_READY.\r\n");

640 i‡(!
	`å™s„r_byã
(
p_•i
, 
p_cb
))

642 
	`föish_å™s„r
(
p_cb
);

644 
	}
}

647 #i‡
NRF_MODULE_ENABLED
(
SPI0
)

648 
	$IRQ_HANDLER
(0)

650 
•i_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
SPI0_INSTANCE_INDEX
];

651 #i‡
SPI0_USE_EASY_DMA


652 
	`úq_h™dÀr_•im
(
NRF_SPIM0
, 
p_cb
);

654 
	`úq_h™dÀr_•i
(
NRF_SPI0
, 
p_cb
);

656 
	}
}

659 #i‡
NRF_MODULE_ENABLED
(
SPI1
)

660 
	$IRQ_HANDLER
(1)

662 
•i_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
SPI1_INSTANCE_INDEX
];

663 #i‡
SPI1_USE_EASY_DMA


664 
	`úq_h™dÀr_•im
(
NRF_SPIM1
, 
p_cb
);

666 
	`úq_h™dÀr_•i
(
NRF_SPI1
, 
p_cb
);

668 
	}
}

671 #i‡
NRF_MODULE_ENABLED
(
SPI2
)

672 
	$IRQ_HANDLER
(2)

674 
•i_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
SPI2_INSTANCE_INDEX
];

675 #i‡
SPI2_USE_EASY_DMA


676 
	`úq_h™dÀr_•im
(
NRF_SPIM2
, 
p_cb
);

678 
	`úq_h™dÀr_•i
(
NRF_SPI2
, 
p_cb
);

680 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\twi_master\nrf_drv_twi.c

41 
	~"sdk_comm⁄.h
"

42 #i‡
NRF_MODULE_ENABLED
(
TWI
)

43 
	#ENABLED_TWI_COUNT
 (
TWI0_ENABLED
+
TWI1_ENABLED
)

	)

44 #i‡
ENABLED_TWI_COUNT


45 
	~"ƒf_drv_twi.h
"

46 
	~"ƒf_drv_comm⁄.h
"

47 
	~"ƒf_gpio.h
"

48 
	~"ƒf_as£π.h
"

49 
	~"≠p_utû_∂©f‹m.h
"

50 
	~"ƒf_dñay.h
"

52 
	~<°dio.h
>

54 
	#NRF_LOG_MODULE_NAME
 "TWI"

	)

56 #i‡
TWI_CONFIG_LOG_ENABLED


57 
	#NRF_LOG_LEVEL
 
TWI_CONFIG_LOG_LEVEL


	)

58 
	#NRF_LOG_INFO_COLOR
 
TWI_CONFIG_INFO_COLOR


	)

59 
	#NRF_LOG_DEBUG_COLOR
 
TWI_CONFIG_DEBUG_COLOR


	)

60 
	#EVT_TO_STR
(
evít
Ë”víà=
NRF_DRV_TWI_EVT_DONE
 ? "EVT_DONE" : \

61 (
evít
 =
NRF_DRV_TWI_EVT_ADDRESS_NACK
 ? "EVT_ADDRESS_NACK" : \

62 (
evít
 =
NRF_DRV_TWI_EVT_DATA_NACK
 ? "EVT_DATA_NACK" : "UNKNOWN ERROR"))))))

	)

63 
	#EVT_TO_STR_TWI
(
evít
Ë”víà=
NRF_TWI_EVENT_STOPPED
 ? "NRF_TWI_EVENT_STOPPED" : \

64 (
evít
 =
NRF_TWI_EVENT_RXDREADY
 ? "NRF_TWI_EVENT_RXDREADY" : \

65 (
evít
 =
NRF_TWI_EVENT_TXDSENT
 ? "NRF_TWI_EVENT_TXDSENT" : \

66 (
evít
 =
NRF_TWI_EVENT_ERROR
 ? "NRF_TWI_EVENT_ERROR" : \

67 (
evít
 =
NRF_TWI_EVENT_BB
 ? "NRF_TWI_EVENT_BB" : \

68 (
evít
 =
NRF_TWI_EVENT_SUSPENDED
 ? "NRF_TWI_EVENT_SUSPENDED" : "UNKNOWN ERROR"))))))

	)

69 
	#EVT_TO_STR_TWIM
(
evít
Ë”víà=
NRF_TWIM_EVENT_STOPPED
 ? "NRF_TWIM_EVENT_STOPPED" : \

70 (
evít
 =
NRF_TWIM_EVENT_ERROR
 ? "NRF_TWIM_EVENT_ERROR" : \

71 (
evít
 =
NRF_TWIM_EVENT_SUSPENDED
 ? "NRF_TWIM_EVENT_SUSPENDED" : \

72 (
evít
 =
NRF_TWIM_EVENT_RXSTARTED
 ? "NRF_TWIM_EVENT_RXSTARTED" : \

73 (
evít
 =
NRF_TWIM_EVENT_TXSTARTED
 ? "NRF_TWIM_EVENT_TXSTARTED" : \

74 (
evít
 =
NRF_TWIM_EVENT_LASTRX
 ? "NRF_TWIM_EVENT_LASTRX" : \

75 (
evít
 =
NRF_TWIM_EVENT_LASTTX
 ? "NRF_TWIM_EVENT_LASTTX" : "UNKNOWN ERROR")))))))

	)

76 
	#TRANSFER_TO_STR
(
ty≥
Ë—y≥ =
NRF_DRV_TWI_XFER_TX
 ? "XFER_TX" : \

77 (
ty≥
 =
NRF_DRV_TWI_XFER_RX
 ? "XFER_RX" : \

78 (
ty≥
 =
NRF_DRV_TWI_XFER_TXRX
 ? "XFER_TXRX" : \

79 (
ty≥
 =
NRF_DRV_TWI_XFER_TXTX
 ? "XFER_TXTX" : "UNKNOWN TRANSFER TYPE"))))

	)

81 
	#EVT_TO_STR
(
evít
Ë""

	)

82 
	#EVT_TO_STR_TWI
(
evít
Ë""

	)

83 
	#EVT_TO_STR_TWIM
(
evít
Ë""

	)

84 
	#TRANSFER_TO_STR
(
evít
Ë""

	)

85 
	#NRF_LOG_LEVEL
 0

	)

87 
	~"ƒf_log.h
"

88 
	~"ƒf_log_˘æ.h
"

91 
	#TWI0_IRQ_HANDLER
 
SPI0_TWI0_IRQH™dÀr


	)

92 
	#TWI1_IRQ_HANDLER
 
SPI1_TWI1_IRQH™dÀr


	)

94 #i‡(
deföed
(
TWIM_IN_USE
Ë&& deföed(
TWI_IN_USE
))

96 
	#CODE_FOR_TWIM
(
code
Ëi‡(
p_ö°™˚
->
u£_ósy_dma
Ë{ codê}

	)

97 
	#CODE_FOR_TWI
(
code
Ë{ codê}

	)

98 #ñi‡(
deföed
(
TWIM_IN_USE
Ë&& !deföed(
TWI_IN_USE
))

100 
	#CODE_FOR_TWIM
(
code
Ë{ codê}

	)

101 
	#CODE_FOR_TWI
(
code
)

	)

102 #ñi‡(!
deföed
(
TWIM_IN_USE
Ë&& deföed(
TWI_IN_USE
))

104 
	#CODE_FOR_TWIM
(
code
)

	)

105 
	#CODE_FOR_TWI
(
code
Ë{ codê}

	)

111 
	#DISABLE_ALL_INT_SHORT
 0xFFFFFFFF

	)

113 
	#SCL_PIN_INIT_CONF
 ( (
GPIO_PIN_CNF_SENSE_DißbÀd
 << 
GPIO_PIN_CNF_SENSE_Pos
) \

114 | (
GPIO_PIN_CNF_DRIVE_S0D1
 << 
GPIO_PIN_CNF_DRIVE_Pos
) \

115 | (
GPIO_PIN_CNF_PULL_PuŒup
 << 
GPIO_PIN_CNF_PULL_Pos
) \

116 | (
GPIO_PIN_CNF_INPUT_C⁄√˘
 << 
GPIO_PIN_CNF_INPUT_Pos
) \

117 | (
GPIO_PIN_CNF_DIR_I≈ut
 << 
GPIO_PIN_CNF_DIR_Pos
))

	)

118 
	#SDA_PIN_INIT_CONF
 
SCL_PIN_INIT_CONF


	)

120 
	#SDA_PIN_UNINIT_CONF
 ( (
GPIO_PIN_CNF_SENSE_DißbÀd
 << 
GPIO_PIN_CNF_SENSE_Pos
) \

121 | (
GPIO_PIN_CNF_DRIVE_H0H1
 << 
GPIO_PIN_CNF_DRIVE_Pos
) \

122 | (
GPIO_PIN_CNF_PULL_DißbÀd
 << 
GPIO_PIN_CNF_PULL_Pos
) \

123 | (
GPIO_PIN_CNF_INPUT_Disc⁄√˘
 << 
GPIO_PIN_CNF_INPUT_Pos
) \

124 | (
GPIO_PIN_CNF_DIR_I≈ut
 << 
GPIO_PIN_CNF_DIR_Pos
))

	)

125 
	#SCL_PIN_UNINIT_CONF
 
SDA_PIN_UNINIT_CONF


	)

127 
	#SCL_PIN_INIT_CONF_CLR
 ( (
GPIO_PIN_CNF_SENSE_DißbÀd
 << 
GPIO_PIN_CNF_SENSE_Pos
) \

128 | (
GPIO_PIN_CNF_DRIVE_S0D1
 << 
GPIO_PIN_CNF_DRIVE_Pos
) \

129 | (
GPIO_PIN_CNF_PULL_PuŒup
 << 
GPIO_PIN_CNF_PULL_Pos
) \

130 | (
GPIO_PIN_CNF_INPUT_C⁄√˘
 << 
GPIO_PIN_CNF_INPUT_Pos
) \

131 | (
GPIO_PIN_CNF_DIR_Ouçut
 << 
GPIO_PIN_CNF_DIR_Pos
))

	)

132 
	#SDA_PIN_INIT_CONF_CLR
 
SCL_PIN_INIT_CONF_CLR


	)

138 
ƒf_drv_twi_evt_h™dÀr_t
 
	mh™dÀr
;

139 * 
	mp_c⁄ãxt
;

140 vﬁ©ûê
uöt32_t
 
	möt_mask
;

141 
ƒf_drv_twi_x„r_desc_t
 
	mx„r_desc
;

142 
uöt32_t
 
	mÊags
;

143 
uöt8_t
 * 
	mp_cuº_buf
;

144 
uöt8_t
 
	mcuº_Àngth
;

145 
boﬁ
 
	mcuº_no_°›
;

146 
ƒf_drv_°©e_t
 
	m°©e
;

147 
boﬁ
 
	mîr‹
;

148 vﬁ©ûê
boﬁ
 
	mbusy
;

149 
boﬁ
 
	mª≥©ed
;

150 
uöt8_t
 
	mbyãs_å™s„ºed
;

151 
boﬁ
 
	mhﬁd_bus_unöô
;

152 } 
	ttwi_c⁄åﬁ_block_t
;

154 
twi_c⁄åﬁ_block_t
 
	gm_cb
[
ENABLED_TWI_COUNT
];

156 #i‡
NRF_MODULE_ENABLED
(
PERIPHERAL_RESOURCE_SHARING
)

157 
	#IRQ_HANDLER_NAME
(
n
Ë
úq_h™dÀr_f‹_ö°™˚_
##
	)
n

158 
	#IRQ_HANDLER
(
n
Ë
	`IRQ_HANDLER_NAME
“)()

	)

160 #i‡
NRF_MODULE_ENABLED
(
TWI0
)

161 
IRQ_HANDLER
(0);

163 #i‡
NRF_MODULE_ENABLED
(
TWI1
)

164 
IRQ_HANDLER
(1);

166 
ƒf_drv_úq_h™dÀr_t
 c⁄° 
	gm_úq_h™dÀrs
[
ENABLED_TWI_COUNT
] = {

167 #i‡
NRF_MODULE_ENABLED
(
TWI0
)

168 
IRQ_HANDLER_NAME
(0),

170 #i‡
NRF_MODULE_ENABLED
(
TWI1
)

171 
IRQ_HANDLER_NAME
(1),

175 
	#IRQ_HANDLER
(
n
Ë
SPI
##n##
_TWI
##n##
	`_IRQH™dÀr
()

	)

178 
ªt_code_t
 
	$twi_¥o˚ss_îr‹
(
uöt32_t
 
îr‹§c
)

180 
ªt_code_t
 
ªt
 = 
NRF_ERROR_INTERNAL
;

182 i‡(
îr‹§c
 & 
NRF_TWI_ERROR_OVERRUN
)

184 
ªt
 = 
NRF_ERROR_DRV_TWI_ERR_OVERRUN
;;

187 i‡(
îr‹§c
 & 
NRF_TWI_ERROR_ADDRESS_NACK
)

189 
ªt
 = 
NRF_ERROR_DRV_TWI_ERR_ANACK
;

192 i‡(
îr‹§c
 & 
NRF_TWI_ERROR_DATA_NACK
)

194 
ªt
 = 
NRF_ERROR_DRV_TWI_ERR_DNACK
;

197  
ªt
;

198 
	}
}

200 
	$twi_˛ór_bus
(
ƒf_drv_twi_c⁄fig_t
 c⁄° * 
p_c⁄fig
)

202 
NRF_GPIO
->
PIN_CNF
[
p_c⁄fig
->
s˛
] = 
SCL_PIN_INIT_CONF
;

203 
NRF_GPIO
->
PIN_CNF
[
p_c⁄fig
->
sda
] = 
SDA_PIN_INIT_CONF
;

205 
	`ƒf_gpio_pö_£t
(
p_c⁄fig
->
s˛
);

206 
	`ƒf_gpio_pö_£t
(
p_c⁄fig
->
sda
);

208 
NRF_GPIO
->
PIN_CNF
[
p_c⁄fig
->
s˛
] = 
SCL_PIN_INIT_CONF_CLR
;

209 
NRF_GPIO
->
PIN_CNF
[
p_c⁄fig
->
sda
] = 
SDA_PIN_INIT_CONF_CLR
;

211 
	`ƒf_dñay_us
(4);

213 
i
 = 0; i < 9; i++)

215 i‡(
	`ƒf_gpio_pö_ªad
(
p_c⁄fig
->
sda
))

217 i‡(
i
 == 0)

226 
	`ƒf_gpio_pö_˛ór
(
p_c⁄fig
->
s˛
);

227 
	`ƒf_dñay_us
(4);

228 
	`ƒf_gpio_pö_£t
(
p_c⁄fig
->
s˛
);

229 
	`ƒf_dñay_us
(4);

231 
	`ƒf_gpio_pö_˛ór
(
p_c⁄fig
->
sda
);

232 
	`ƒf_dñay_us
(4);

233 
	`ƒf_gpio_pö_£t
(
p_c⁄fig
->
sda
);

234 
	}
}

236 
ªt_code_t
 
	$ƒf_drv_twi_öô
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
,

237 
ƒf_drv_twi_c⁄fig_t
 c⁄° * 
p_c⁄fig
,

238 
ƒf_drv_twi_evt_h™dÀr_t
 
evít_h™dÀr
,

239 * 
p_c⁄ãxt
)

241 
	`ASSERT
(
p_c⁄fig
);

242 
	`ASSERT
(
p_c⁄fig
->
s˛
 !p_c⁄fig->
sda
);

243 
twi_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

244 
ªt_code_t
 
îr_code
;

246 i‡(
p_cb
->
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
)

248 
îr_code
 = 
NRF_ERROR_INVALID_STATE
;

249 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

250  
îr_code
;

253 #i‡
	`NRF_MODULE_ENABLED
(
PERIPHERAL_RESOURCE_SHARING
)

254 i‡(
	`ƒf_drv_comm⁄_≥r_ªs_acquúe
(
p_ö°™˚
->
ªg
.
p_twi
,

255 
m_úq_h™dÀrs
[
p_ö°™˚
->
drv_ö°_idx
]Ë!
NRF_SUCCESS
)

257 
îr_code
 = 
NRF_ERROR_BUSY
;

258 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

259  
îr_code
;

263 
p_cb
->
h™dÀr
 = 
evít_h™dÀr
;

264 
p_cb
->
p_c⁄ãxt
 =Ö_context;

265 
p_cb
->
öt_mask
 = 0;

266 
p_cb
->
ª≥©ed
 = 
Ál£
;

267 
p_cb
->
busy
 = 
Ál£
;

268 
p_cb
->
hﬁd_bus_unöô
 = 
p_c⁄fig
->hold_bus_uninit;

270 if(
p_c⁄fig
->
˛ór_bus_öô
)

273 
	`twi_˛ór_bus
(
p_c⁄fig
);

280 
NRF_GPIO
->
PIN_CNF
[
p_c⁄fig
->
s˛
] = 
SCL_PIN_INIT_CONF
;

281 
NRF_GPIO
->
PIN_CNF
[
p_c⁄fig
->
sda
] = 
SDA_PIN_INIT_CONF
;

283 
CODE_FOR_TWIM


285 
NRF_TWIM_Ty≥
 * 
p_twim
 = 
p_ö°™˚
->
ªg
.p_twim;

286 
	`ƒf_twim_pös_£t
(
p_twim
, 
p_c⁄fig
->
s˛
,Ö_c⁄fig->
sda
);

287 
	`ƒf_twim_‰equícy_£t
(
p_twim
,

288 (
ƒf_twim_‰equícy_t
)
p_c⁄fig
->
‰equícy
);

290 
CODE_FOR_TWI


292 
NRF_TWI_Ty≥
 * 
p_twi
 = 
p_ö°™˚
->
ªg
.p_twi;

293 
	`ƒf_twi_pös_£t
(
p_twi
, 
p_c⁄fig
->
s˛
,Ö_c⁄fig->
sda
);

294 
	`ƒf_twi_‰equícy_£t
(
p_twi
,

295 (
ƒf_twi_‰equícy_t
)
p_c⁄fig
->
‰equícy
);

298 i‡(
p_cb
->
h™dÀr
)

300 
CODE_FOR_TWIM


302 
	`ƒf_drv_comm⁄_úq_íabÀ
(
	`ƒf_drv_gë_IRQn
((*)
p_ö°™˚
->
ªg
.
p_twim
),

303 
p_c⁄fig
->
öãºu±_¥i‹ôy
);

305 
CODE_FOR_TWI


307 
	`ƒf_drv_comm⁄_úq_íabÀ
(
	`ƒf_drv_gë_IRQn
((*)
p_ö°™˚
->
ªg
.
p_twi
),

308 
p_c⁄fig
->
öãºu±_¥i‹ôy
);

312 
p_cb
->
°©e
 = 
NRF_DRV_STATE_INITIALIZED
;

314 
îr_code
 = 
NRF_SUCCESS
;

315 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

316  
îr_code
;

317 
	}
}

319 
	$ƒf_drv_twi_unöô
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
)

321 
twi_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

322 
	`ASSERT
(
p_cb
->
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
);

324 i‡(
p_cb
->
h™dÀr
)

326 
CODE_FOR_TWIM


328 
	`ƒf_drv_comm⁄_úq_dißbÀ
(
	`ƒf_drv_gë_IRQn
((*)
p_ö°™˚
->
ªg
.
p_twim
));

330 
CODE_FOR_TWI


332 
	`ƒf_drv_comm⁄_úq_dißbÀ
(
	`ƒf_drv_gë_IRQn
((*)
p_ö°™˚
->
ªg
.
p_twi
));

335 
	`ƒf_drv_twi_dißbÀ
(
p_ö°™˚
);

337 #i‡
	`NRF_MODULE_ENABLED
(
PERIPHERAL_RESOURCE_SHARING
)

338 
	`ƒf_drv_comm⁄_≥r_ªs_ªÀa£
(
p_ö°™˚
->
ªg
.
p_twi
);

341 i‡(!
p_cb
->
hﬁd_bus_unöô
)

343 
CODE_FOR_TWIM


345 
NRF_GPIO
->
PIN_CNF
[
p_ö°™˚
->
ªg
.
p_twim
->
PSEL
.
SCL
] = 
SCL_PIN_UNINIT_CONF
;

346 
NRF_GPIO
->
PIN_CNF
[
p_ö°™˚
->
ªg
.
p_twim
->
PSEL
.
SDA
] = 
SDA_PIN_UNINIT_CONF
;

348 
CODE_FOR_TWI


350 
NRF_GPIO
->
PIN_CNF
[
p_ö°™˚
->
ªg
.
p_twi
->
PSELSCL
] = 
SCL_PIN_UNINIT_CONF
;

351 
NRF_GPIO
->
PIN_CNF
[
p_ö°™˚
->
ªg
.
p_twi
->
PSELSDA
] = 
SDA_PIN_UNINIT_CONF
;

355 
p_cb
->
°©e
 = 
NRF_DRV_STATE_UNINITIALIZED
;

356 
	`NRF_LOG_INFO
("In°™˚ unöôülized: %d.\r\n", 
p_ö°™˚
->
drv_ö°_idx
);

357 
	}
}

359 
	$ƒf_drv_twi_íabÀ
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
)

361 
twi_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

362 
	`ASSERT
(
p_cb
->
°©e
 =
NRF_DRV_STATE_INITIALIZED
);

364 
CODE_FOR_TWIM


366 
NRF_TWIM_Ty≥
 * 
p_twim
 = 
p_ö°™˚
->
ªg
.p_twim;

368 
	`ƒf_twim_íabÀ
(
p_twim
);

370 
CODE_FOR_TWI


372 
NRF_TWI_Ty≥
 * 
p_twi
 = 
p_ö°™˚
->
ªg
.p_twi;

374 
	`ƒf_twi_íabÀ
(
p_twi
);

377 
p_cb
->
°©e
 = 
NRF_DRV_STATE_POWERED_ON
;

378 
	`NRF_LOG_INFO
("In°™˚É«bÀd: %d.\r\n", 
p_ö°™˚
->
drv_ö°_idx
);

379 
	}
}

381 
	$ƒf_drv_twi_dißbÀ
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
)

383 
twi_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

384 
	`ASSERT
(
p_cb
->
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
);

386 
CODE_FOR_TWIM


388 
NRF_TWIM_Ty≥
 * 
p_twim
 = 
p_ö°™˚
->
ªg
.p_twim;

389 
p_cb
->
öt_mask
 = 0;

390 
	`ƒf_twim_öt_dißbÀ
(
p_twim
, 
DISABLE_ALL_INT_SHORT
);

391 
	`ƒf_twim_sh‹ts_dißbÀ
(
p_twim
, 
DISABLE_ALL_INT_SHORT
);

392 
	`ƒf_twim_dißbÀ
(
p_twim
);

394 
CODE_FOR_TWI


396 
NRF_TWI_Ty≥
 * 
p_twi
 = 
p_ö°™˚
->
ªg
.p_twi;

397 
	`ƒf_twi_öt_dißbÀ
(
p_twi
, 
DISABLE_ALL_INT_SHORT
);

398 
	`ƒf_twi_sh‹ts_dißbÀ
(
p_twi
, 
DISABLE_ALL_INT_SHORT
);

399 
	`ƒf_twi_dißbÀ
(
p_twi
);

402 
p_cb
->
°©e
 = 
NRF_DRV_STATE_INITIALIZED
;

403 
	`NRF_LOG_INFO
("In°™˚ dißbÀd: %d.\r\n", 
p_ö°™˚
->
drv_ö°_idx
);

404 
	}
}

406 #ifde‡
TWI_IN_USE


407 
boﬁ
 
	$twi_£nd_byã
(
NRF_TWI_Ty≥
 * 
p_twi
,

408 
uöt8_t
 c⁄° * 
p_d©a
,

409 
uöt8_t
 
Àngth
,

410 
uöt8_t
 * 
p_byãs_å™s„ºed
,

411 
boﬁ
 
no_°›
)

413 i‡(*
p_byãs_å™s„ºed
 < 
Àngth
)

415 
	`ƒf_twi_txd_£t
(
p_twi
, 
p_d©a
[*
p_byãs_å™s„ºed
]);

416 ++(*
p_byãs_å™s„ºed
);

420 i‡(
no_°›
)

422 
	`ƒf_twi_èsk_åiggî
(
p_twi
, 
NRF_TWI_TASK_SUSPEND
);

423  
Ál£
;

427 
	`ƒf_twi_èsk_åiggî
(
p_twi
, 
NRF_TWI_TASK_STOP
);

430  
åue
;

431 
	}
}

433 
	$twi_ª˚ive_byã
(
NRF_TWI_Ty≥
 * 
p_twi
,

434 
uöt8_t
 * 
p_d©a
,

435 
uöt8_t
 
Àngth
,

436 
uöt8_t
 * 
p_byãs_å™s„ºed
)

438 i‡(*
p_byãs_å™s„ºed
 < 
Àngth
)

440 
p_d©a
[*
p_byãs_å™s„ºed
] = 
	`ƒf_twi_rxd_gë
(
p_twi
);

442 ++(*
p_byãs_å™s„ºed
);

444 i‡(*
p_byãs_å™s„ºed
 =
Àngth
 - 1)

446 
	`ƒf_twi_sh‹ts_£t
(
p_twi
, 
NRF_TWI_SHORT_BB_STOP_MASK
);

448 i‡(*
p_byãs_å™s„ºed
 =
Àngth
)

453 
	`ƒf_twi_èsk_åiggî
(
p_twi
, 
NRF_TWI_TASK_RESUME
);

455 
	}
}

457 
boﬁ
 
	$twi_å™s„r
(
NRF_TWI_Ty≥
 * 
p_twi
,

458 
boﬁ
 * 
p_îr‹
,

459 
uöt8_t
 * 
p_byãs_å™s„ºed
,

460 
uöt8_t
 * 
p_d©a
,

461 
uöt8_t
 
Àngth
,

462 
boﬁ
 
no_°›
)

464 
boﬁ
 
do_°›_check
 = ((*
p_îr‹
Ë|| ((*
p_byãs_å™s„ºed
Ë=
Àngth
));

466 i‡(*
p_îr‹
)

468 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_ERROR
);

469 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_TXDSENT
);

470 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_RXDREADY
);

472 i‡(
	`ƒf_twi_evít_check
(
p_twi
, 
NRF_TWI_EVENT_ERROR
))

474 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_ERROR
);

475 
	`NRF_LOG_DEBUG
("TWI: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWI
(
NRF_TWI_EVENT_ERROR
));

476 
	`ƒf_twi_èsk_åiggî
(
p_twi
, 
NRF_TWI_TASK_STOP
);

477 *
p_îr‹
 = 
åue
;

481 i‡(
	`ƒf_twi_evít_check
(
p_twi
, 
NRF_TWI_EVENT_TXDSENT
))

483 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_TXDSENT
);

484 
	`NRF_LOG_DEBUG
("TWI: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWI
(
NRF_TWI_EVENT_TXDSENT
));

485 i‡(
	`ƒf_twi_evít_check
(
p_twi
, 
NRF_TWI_EVENT_ERROR
))

487 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_ERROR
);

488 
	`NRF_LOG_DEBUG
("TWI: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWI
(
NRF_TWI_EVENT_ERROR
));

489 
	`ƒf_twi_èsk_åiggî
(
p_twi
, 
NRF_TWI_TASK_STOP
);

490 *
p_îr‹
 = 
åue
;

494 i‡(!
	`twi_£nd_byã
(
p_twi
, 
p_d©a
, 
Àngth
, 
p_byãs_å™s„ºed
, 
no_°›
))

496  
Ál£
;

500 i‡(
	`ƒf_twi_evít_check
(
p_twi
, 
NRF_TWI_EVENT_RXDREADY
))

502 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_RXDREADY
);

503 
	`NRF_LOG_DEBUG
("TWI: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWI
(
NRF_TWI_EVENT_RXDREADY
));

504 i‡(
	`ƒf_twi_evít_check
(
p_twi
, 
NRF_TWI_EVENT_ERROR
))

506 
	`NRF_LOG_DEBUG
("TWI: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWI
(
NRF_TWI_EVENT_ERROR
));

507 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_ERROR
);

508 
	`ƒf_twi_èsk_åiggî
(
p_twi
, 
NRF_TWI_TASK_STOP
);

509 *
p_îr‹
 = 
åue
;

513 
	`twi_ª˚ive_byã
(
p_twi
, 
p_d©a
, 
Àngth
, 
p_byãs_å™s„ºed
);

518 i‡(
do_°›_check
 && 
	`ƒf_twi_evít_check
(
p_twi
, 
NRF_TWI_EVENT_STOPPED
))

520 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_STOPPED
);

521 
	`NRF_LOG_DEBUG
("TWI: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWI
(
NRF_TWI_EVENT_STOPPED
));

522  
Ál£
;

525  
åue
;

526 
	}
}

528 
ªt_code_t
 
	$twi_tx_°¨t_å™s„r
(
twi_c⁄åﬁ_block_t
 * 
p_cb
,

529 
NRF_TWI_Ty≥
 * 
p_twi
,

530 
uöt8_t
 c⁄° * 
p_d©a
,

531 
uöt8_t
 
Àngth
,

532 
boﬁ
 
no_°›
)

534 
ªt_code_t
 
ªt_code
 = 
NRF_SUCCESS
;

536 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_STOPPED
);

537 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_ERROR
);

538 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_TXDSENT
);

539 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_RXDREADY
);

540 
	`ƒf_twi_sh‹ts_£t
(
p_twi
, 0);

542 
p_cb
->
byãs_å™s„ºed
 = 0;

543 
p_cb
->
îr‹
 = 
Ál£
;

546 
	`ƒf_twi_èsk_åiggî
(
p_twi
, 
NRF_TWI_TASK_RESUME
);

547 
	`ƒf_twi_èsk_åiggî
(
p_twi
, 
NRF_TWI_TASK_STARTTX
);

549 ()
	`twi_£nd_byã
(
p_twi
, 
p_d©a
, 
Àngth
, &
p_cb
->
byãs_å™s„ºed
, 
no_°›
);

551 i‡(
p_cb
->
h™dÀr
)

553 
p_cb
->
öt_mask
 = 
NRF_TWI_INT_STOPPED_MASK
 |

554 
NRF_TWI_INT_ERROR_MASK
 |

555 
NRF_TWI_INT_TXDSENT_MASK
 |

556 
NRF_TWI_INT_RXDREADY_MASK
;

557 
	`ƒf_twi_öt_íabÀ
(
p_twi
, 
p_cb
->
öt_mask
);

561 
	`twi_å™s„r
(
p_twi
, &
p_cb
->
îr‹
, &p_cb->
byãs_å™s„ºed
, (
uöt8_t
 *)
p_d©a
, 
Àngth
, 
no_°›
))

564 i‡(
p_cb
->
îr‹
)

566 
uöt32_t
 
îr‹§c
 = 
	`ƒf_twi_îr‹§c_gë_™d_˛ór
(
p_twi
);

568 i‡(
îr‹§c
)

570 
ªt_code
 = 
	`twi_¥o˚ss_îr‹
(
îr‹§c
);

575  
ªt_code
;

576 
	}
}

578 
ªt_code_t
 
	$twi_rx_°¨t_å™s„r
(
twi_c⁄åﬁ_block_t
 * 
p_cb
,

579 
NRF_TWI_Ty≥
 * 
p_twi
,

580 
uöt8_t
 c⁄° * 
p_d©a
,

581 
uöt8_t
 
Àngth
)

583 
ªt_code_t
 
ªt_code
 = 
NRF_SUCCESS
;

585 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_STOPPED
);

586 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_ERROR
);

587 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_TXDSENT
);

588 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_RXDREADY
);

590 
p_cb
->
byãs_å™s„ºed
 = 0;

591 
p_cb
->
îr‹
 = 
Ál£
;

593 i‡(
Àngth
 == 1)

595 
	`ƒf_twi_sh‹ts_£t
(
p_twi
, 
NRF_TWI_SHORT_BB_STOP_MASK
);

599 
	`ƒf_twi_sh‹ts_£t
(
p_twi
, 
NRF_TWI_SHORT_BB_SUSPEND_MASK
);

602 
	`ƒf_twi_èsk_åiggî
(
p_twi
, 
NRF_TWI_TASK_RESUME
);

603 
	`ƒf_twi_èsk_åiggî
(
p_twi
, 
NRF_TWI_TASK_STARTRX
);

605 i‡(
p_cb
->
h™dÀr
)

607 
p_cb
->
öt_mask
 = 
NRF_TWI_INT_STOPPED_MASK
 |

608 
NRF_TWI_INT_ERROR_MASK
 |

609 
NRF_TWI_INT_TXDSENT_MASK
 |

610 
NRF_TWI_INT_RXDREADY_MASK
;

611 
	`ƒf_twi_öt_íabÀ
(
p_twi
, 
p_cb
->
öt_mask
);

615 
	`twi_å™s„r
(
p_twi
, &
p_cb
->
îr‹
, &p_cb->
byãs_å™s„ºed
, (
uöt8_t
*)
p_d©a
, 
Àngth
, 
Ál£
))

618 i‡(
p_cb
->
îr‹
)

620 
uöt32_t
 
îr‹§c
 = 
	`ƒf_twi_îr‹§c_gë_™d_˛ór
(
p_twi
);

622 i‡(
îr‹§c
)

624 
ªt_code
 = 
	`twi_¥o˚ss_îr‹
(
îr‹§c
);

628  
ªt_code
;

629 
	}
}

631 
__STATIC_INLINE
 
ªt_code_t
 
	$twi_x„r
(
twi_c⁄åﬁ_block_t
 * 
p_cb
,

632 
NRF_TWI_Ty≥
 * 
p_twi
,

633 
ƒf_drv_twi_x„r_desc_t
 c⁄° * 
p_x„r_desc
,

634 
uöt32_t
 
Êags
)

637 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

640 
	`ƒf_twi_öt_dißbÀ
(
p_twi
, 
DISABLE_ALL_INT_SHORT
);

642 i‡(
p_cb
->
busy
)

644 
	`ƒf_twi_öt_íabÀ
(
p_twi
, 
p_cb
->
öt_mask
);

645 
îr_code
 = 
NRF_ERROR_BUSY
;

646 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

647  
îr_code
;

651 
p_cb
->
busy
 = (
NRF_DRV_TWI_FLAG_NO_XFER_EVT_HANDLER
 & 
Êags
Ë? 
Ál£
 : 
åue
;

654 i‡(
Êags
 & 
NRF_DRV_TWI_FLAG_HOLD_XFER
)

656 
îr_code
 = 
NRF_ERROR_NOT_SUPPORTED
;

657 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

658  
îr_code
;

661 
p_cb
->
Êags
 = flags;

662 
p_cb
->
x„r_desc
 = *
p_x„r_desc
;

663 
p_cb
->
cuº_Àngth
 = 
p_x„r_desc
->
¥im¨y_Àngth
;

664 
p_cb
->
p_cuº_buf
 = 
p_x„r_desc
->
p_¥im¨y_buf
;

665 
	`ƒf_twi_addªss_£t
(
p_twi
, 
p_x„r_desc
->
addªss
);

667 i‡(
p_x„r_desc
->
ty≥
 !
NRF_DRV_TWI_XFER_RX
)

669 
p_cb
->
cuº_no_°›
 = ((
p_x„r_desc
->
ty≥
 =
NRF_DRV_TWI_XFER_TX
) &&

670 !(
Êags
 & 
NRF_DRV_TWI_FLAG_TX_NO_STOP
)Ë? 
Ál£
 : 
åue
;

672 
îr_code
 = 
	`twi_tx_°¨t_å™s„r
(
p_cb
, 
p_twi
, 
p_x„r_desc
->
p_¥im¨y_buf
,Ö_x„r_desc->
¥im¨y_Àngth
,Ö_cb->
cuº_no_°›
);

676 
p_cb
->
cuº_no_°›
 = 
Ál£
;

678 
îr_code
 = 
	`twi_rx_°¨t_å™s„r
(
p_cb
, 
p_twi
, 
p_x„r_desc
->
p_¥im¨y_buf
,Ö_x„r_desc->
¥im¨y_Àngth
);

680 i‡(
p_cb
->
h™dÀr
 =
NULL
)

682 
p_cb
->
busy
 = 
Ál£
;

684  
îr_code
;

685 
	}
}

688 #ifde‡
TWIM_IN_USE


689 
__STATIC_INLINE
 
	$twim_li°_íabÀ_h™dÀ
(
NRF_TWIM_Ty≥
 * 
p_twim
, 
uöt32_t
 
Êags
)

691 i‡(
NRF_DRV_TWI_FLAG_TX_POSTINC
 & 
Êags
)

693 
	`ƒf_twim_tx_li°_íabÀ
(
p_twim
);

697 
	`ƒf_twim_tx_li°_dißbÀ
(
p_twim
);

700 i‡(
NRF_DRV_TWI_FLAG_RX_POSTINC
 & 
Êags
)

702 
	`ƒf_twim_rx_li°_íabÀ
(
p_twim
);

706 
	`ƒf_twim_rx_li°_dißbÀ
(
p_twim
);

708 
	}
}

709 
__STATIC_INLINE
 
ªt_code_t
 
	$twim_x„r
(
twi_c⁄åﬁ_block_t
 * 
p_cb
,

710 
NRF_TWIM_Ty≥
 * 
p_twim
,

711 
ƒf_drv_twi_x„r_desc_t
 c⁄° * 
p_x„r_desc
,

712 
uöt32_t
 
Êags
)

714 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

715 
ƒf_twim_èsk_t
 
°¨t_èsk
 = 
NRF_TWIM_TASK_STARTTX
;

716 
ƒf_twim_evít_t
 
evt_to_waô
 = 
NRF_TWIM_EVENT_STOPPED
;

718 i‡(!
	`ƒf_drv_is_ö_RAM
(
p_x„r_desc
->
p_¥im¨y_buf
))

720 
îr_code
 = 
NRF_ERROR_INVALID_ADDR
;

721 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

722  
îr_code
;

725 
	`ƒf_twim_öt_dißbÀ
(
p_twim
, 
DISABLE_ALL_INT_SHORT
);

726 i‡(
p_cb
->
busy
)

728 
	`ƒf_twim_öt_íabÀ
(
p_twim
, 
p_cb
->
öt_mask
);

729 
îr_code
 = 
NRF_ERROR_BUSY
;

730 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

731  
îr_code
;

735 
p_cb
->
busy
 = ((
NRF_DRV_TWI_FLAG_NO_XFER_EVT_HANDLER
 & 
Êags
) ||

736 (
NRF_DRV_TWI_FLAG_REPEATED_XFER
 & 
Êags
)Ë? 
Ál£
: 
åue
;

739 
p_cb
->
x„r_desc
 = *
p_x„r_desc
;

740 
p_cb
->
ª≥©ed
 = (
Êags
 & 
NRF_DRV_TWI_FLAG_REPEATED_XFER
Ë? 
åue
 : 
Ál£
;

741 
	`ƒf_twim_addªss_£t
(
p_twim
, 
p_x„r_desc
->
addªss
);

743 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_STOPPED
);

744 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_ERROR
);

746 
	`twim_li°_íabÀ_h™dÀ
(
p_twim
, 
Êags
);

747 
p_x„r_desc
->
ty≥
)

749 
NRF_DRV_TWI_XFER_TXTX
:

750 
	`ASSERT
(!(
Êags
 & 
NRF_DRV_TWI_FLAG_REPEATED_XFER
));

751 
	`ASSERT
(!(
Êags
 & 
NRF_DRV_TWI_FLAG_HOLD_XFER
));

752 
	`ASSERT
(!(
Êags
 & 
NRF_DRV_TWI_FLAG_NO_XFER_EVT_HANDLER
));

753 i‡(!
	`ƒf_drv_is_ö_RAM
(
p_x„r_desc
->
p_£c⁄d¨y_buf
))

755 
îr_code
 = 
NRF_ERROR_INVALID_ADDR
;

756 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

757  
îr_code
;

759 
	`ƒf_twim_sh‹ts_£t
(
p_twim
, 
NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK
);

760 
	`ƒf_twim_tx_buf„r_£t
(
p_twim
, 
p_x„r_desc
->
p_¥im¨y_buf
,Ö_x„r_desc->
¥im¨y_Àngth
);

761 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_TXSTARTED
);

762 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_LASTTX
);

763 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_SUSPENDED
);

764 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
NRF_TWIM_TASK_RESUME
);

765 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
NRF_TWIM_TASK_STARTTX
);

766 !
	`ƒf_twim_evít_check
(
p_twim
, 
NRF_TWIM_EVENT_TXSTARTED
))

768 
	`NRF_LOG_DEBUG
("TWIM: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWIM
(
NRF_TWIM_EVENT_TXSTARTED
));

769 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_TXSTARTED
);

770 
	`ƒf_twim_tx_buf„r_£t
(
p_twim
, 
p_x„r_desc
->
p_£c⁄d¨y_buf
,Ö_x„r_desc->
£c⁄d¨y_Àngth
);

771 
p_cb
->
öt_mask
 = 
NRF_TWIM_INT_SUSPENDED_MASK
 | 
NRF_TWIM_INT_ERROR_MASK
;

773 
NRF_DRV_TWI_XFER_TXRX
:

774 
	`ƒf_twim_tx_buf„r_£t
(
p_twim
, 
p_x„r_desc
->
p_¥im¨y_buf
,Ö_x„r_desc->
¥im¨y_Àngth
);

775 i‡(!
	`ƒf_drv_is_ö_RAM
(
p_x„r_desc
->
p_£c⁄d¨y_buf
))

777 
îr_code
 = 
NRF_ERROR_INVALID_ADDR
;

778 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

779  
îr_code
;

781 
	`ƒf_twim_rx_buf„r_£t
(
p_twim
, 
p_x„r_desc
->
p_£c⁄d¨y_buf
,Ö_x„r_desc->
£c⁄d¨y_Àngth
);

782 
	`ƒf_twim_sh‹ts_£t
(
p_twim
, 
NRF_TWIM_SHORT_LASTTX_STARTRX_MASK
 |

783 
NRF_TWIM_SHORT_LASTRX_STOP_MASK
);

784 
p_cb
->
öt_mask
 = 
NRF_TWIM_INT_STOPPED_MASK
 | 
NRF_TWIM_INT_ERROR_MASK
;

786 
NRF_DRV_TWI_XFER_TX
:

787 
	`ƒf_twim_tx_buf„r_£t
(
p_twim
, 
p_x„r_desc
->
p_¥im¨y_buf
,Ö_x„r_desc->
¥im¨y_Àngth
);

788 i‡(
NRF_DRV_TWI_FLAG_TX_NO_STOP
 & 
Êags
)

790 
	`ƒf_twim_sh‹ts_£t
(
p_twim
, 
NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK
);

791 
p_cb
->
öt_mask
 = 
NRF_TWIM_INT_SUSPENDED_MASK
 | 
NRF_TWIM_INT_ERROR_MASK
;

792 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_SUSPENDED
);

793 
evt_to_waô
 = 
NRF_TWIM_EVENT_SUSPENDED
;

797 
	`ƒf_twim_sh‹ts_£t
(
p_twim
, 
NRF_TWIM_SHORT_LASTTX_STOP_MASK
);

798 
p_cb
->
öt_mask
 = 
NRF_TWIM_INT_STOPPED_MASK
 | 
NRF_TWIM_INT_ERROR_MASK
;

800 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
NRF_TWIM_TASK_RESUME
);

802 
NRF_DRV_TWI_XFER_RX
:

803 
	`ƒf_twim_rx_buf„r_£t
(
p_twim
, 
p_x„r_desc
->
p_¥im¨y_buf
,Ö_x„r_desc->
¥im¨y_Àngth
);

804 
	`ƒf_twim_sh‹ts_£t
(
p_twim
, 
NRF_TWIM_SHORT_LASTRX_STOP_MASK
);

805 
p_cb
->
öt_mask
 = 
NRF_TWIM_INT_STOPPED_MASK
 | 
NRF_TWIM_INT_ERROR_MASK
;

806 
°¨t_èsk
 = 
NRF_TWIM_TASK_STARTRX
;

807 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
NRF_TWIM_TASK_RESUME
);

810 
îr_code
 = 
NRF_ERROR_INVALID_PARAM
;

814 i‡(!(
Êags
 & 
NRF_DRV_TWI_FLAG_HOLD_XFER
Ë&& (
p_x„r_desc
->
ty≥
 !
NRF_DRV_TWI_XFER_TXTX
))

816 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
°¨t_èsk
);

819 i‡(
p_cb
->
h™dÀr
)

821 i‡(
Êags
 & 
NRF_DRV_TWI_FLAG_NO_XFER_EVT_HANDLER
)

823 
p_cb
->
öt_mask
 = 
NRF_TWIM_INT_ERROR_MASK
;

825 
	`ƒf_twim_öt_íabÀ
(
p_twim
, 
p_cb
->
öt_mask
);

829 !
	`ƒf_twim_evít_check
(
p_twim
, 
evt_to_waô
))

831 i‡(
	`ƒf_twim_evít_check
(
p_twim
, 
NRF_TWIM_EVENT_ERROR
))

833 
	`NRF_LOG_DEBUG
("TWIM: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWIM
(
NRF_TWIM_EVENT_ERROR
));

834 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_ERROR
);

835 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
NRF_TWIM_TASK_RESUME
);

836 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
NRF_TWIM_TASK_STOP
);

837 
evt_to_waô
 = 
NRF_TWIM_EVENT_STOPPED
;

841 
uöt32_t
 
îr‹§c
 = 
	`ƒf_twim_îr‹§c_gë_™d_˛ór
(
p_twim
);

843 
p_cb
->
busy
 = 
Ál£
;

845 i‡(
îr‹§c
)

847 
îr_code
 = 
	`twi_¥o˚ss_îr‹
(
îr‹§c
);

850  
îr_code
;

851 
	}
}

854 
ªt_code_t
 
	$ƒf_drv_twi_x„r
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
,

855 
ƒf_drv_twi_x„r_desc_t
 c⁄° * 
p_x„r_desc
,

856 
uöt32_t
 
Êags
)

859 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

860 
twi_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

863 
	`ASSERT
–!((
p_cb
->
h™dÀr
 =
NULL
Ë&& (
p_x„r_desc
->
ty≥
 =
NRF_DRV_TWI_XFER_TXRX
)));

864 
	`ASSERT
–!((
p_cb
->
h™dÀr
 =
NULL
Ë&& (
p_x„r_desc
->
ty≥
 =
NRF_DRV_TWI_XFER_TXTX
)));

866 
	`NRF_LOG_INFO
("Tøns„∏ty≥: %s.\r\n", (
uöt32_t
)
	`TRANSFER_TO_STR
(
p_x„r_desc
->
ty≥
));

867 
	`NRF_LOG_INFO
("Tøns„∏buf„r†Àngth:Örim¨y: %d, sec⁄d¨y: %d.\r\n", 
p_x„r_desc
->
¥im¨y_Àngth
,Ö_x„r_desc->
£c⁄d¨y_Àngth
);

868 
	`NRF_LOG_DEBUG
("Primary buffer data:\r\n");

869 
	`NRF_LOG_HEXDUMP_DEBUG
((
uöt8_t
 *)
p_x„r_desc
->
p_¥im¨y_buf
,Ö_x„r_desc->
¥im¨y_Àngth
 * (p_xfer_desc->p_primary_buf));

870 
	`NRF_LOG_DEBUG
("Secondary buffer data:\r\n");

871 
	`NRF_LOG_HEXDUMP_DEBUG
((
uöt8_t
 *)
p_x„r_desc
->
p_£c⁄d¨y_buf
,Ö_x„r_desc->
£c⁄d¨y_Àngth
 * (p_xfer_desc->p_secondary_buf));

873 
CODE_FOR_TWIM


876 
îr_code
 = 
	`twim_x„r
(
p_cb
, (
NRF_TWIM_Ty≥
 *)
p_ö°™˚
->
ªg
.
p_twim
, 
p_x„r_desc
, 
Êags
);

878 
CODE_FOR_TWI


880 i‡–(
NRF_DRV_TWI_FLAG_TX_POSTINC
 | 
NRF_DRV_TWI_FLAG_RX_POSTINC
Ë& 
Êags
)

882 
îr_code
 = 
NRF_ERROR_NOT_SUPPORTED
;

883 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

884  
îr_code
;

887 
îr_code
 = 
	`twi_x„r
(
p_cb
, (
NRF_TWI_Ty≥
 *)
p_ö°™˚
->
ªg
.
p_twi
, 
p_x„r_desc
, 
Êags
);

889 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

890  
îr_code
;

891 
	}
}

893 
ªt_code_t
 
	$ƒf_drv_twi_tx
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
,

894 
uöt8_t
 
addªss
,

895 
uöt8_t
 c⁄° * 
p_d©a
,

896 
uöt8_t
 
Àngth
,

897 
boﬁ
 
no_°›
)

899 
ƒf_drv_twi_x„r_desc_t
 
x„r
 = 
	`NRF_DRV_TWI_XFER_DESC_TX
(
addªss
, (
uöt8_t
*)
p_d©a
, 
Àngth
);

901  
	`ƒf_drv_twi_x„r
(
p_ö°™˚
, &
x„r
, 
no_°›
 ? 
NRF_DRV_TWI_FLAG_TX_NO_STOP
 : 0);

902 
	}
}

904 
ªt_code_t
 
	$ƒf_drv_twi_rx
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
,

905 
uöt8_t
 
addªss
,

906 
uöt8_t
 * 
p_d©a
,

907 
uöt8_t
 
Àngth
)

909 
ƒf_drv_twi_x„r_desc_t
 
x„r
 = 
	`NRF_DRV_TWI_XFER_DESC_RX
(
addªss
, 
p_d©a
, 
Àngth
);

910  
	`ƒf_drv_twi_x„r
(
p_ö°™˚
, &
x„r
, 0);

911 
	}
}

913 
uöt32_t
 
	$ƒf_drv_twi_d©a_cou¡_gë
(
ƒf_drv_twi_t
 c⁄° * c⁄° 
p_ö°™˚
)

915 
CODE_FOR_TWIM


917 
	`ASSERT
(
Ál£
);

920 
CODE_FOR_TWI


922  
m_cb
[
p_ö°™˚
->
drv_ö°_idx
].
byãs_å™s„ºed
;

924 
	}
}

925 
uöt32_t
 
	$ƒf_drv_twi_°¨t_èsk_gë
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
, 
ƒf_drv_twi_x„r_ty≥_t
 
x„r_ty≥
)

927 
CODE_FOR_TWIM


929  (
uöt32_t
)
	`ƒf_twim_èsk_addªss_gë
(
p_ö°™˚
->
ªg
.
p_twim
,

930 (
x„r_ty≥
 !
NRF_DRV_TWI_XFER_RX
Ë? 
NRF_TWIM_TASK_STARTTX
 : 
NRF_TWIM_TASK_STARTRX
);

932 
CODE_FOR_TWI


934  (
uöt32_t
)
	`ƒf_twi_èsk_addªss_gë
(
p_ö°™˚
->
ªg
.
p_twi
,

935 (
x„r_ty≥
 !
NRF_DRV_TWI_XFER_RX
Ë? 
NRF_TWI_TASK_STARTTX
 : 
NRF_TWI_TASK_STARTRX
);

937 
	}
}

939 
uöt32_t
 
	$ƒf_drv_twi_°›≥d_evít_gë
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
)

941 
CODE_FOR_TWIM


943  (
uöt32_t
)
	`ƒf_twim_evít_addªss_gë
(
p_ö°™˚
->
ªg
.
p_twim
, 
NRF_TWIM_EVENT_STOPPED
);

945 
CODE_FOR_TWI


947  (
uöt32_t
)
	`ƒf_twi_evít_addªss_gë
(
p_ö°™˚
->
ªg
.
p_twi
, 
NRF_TWI_EVENT_STOPPED
);

949 
	}
}

951 #ifde‡
TWIM_IN_USE


952 
	$úq_h™dÀr_twim
(
NRF_TWIM_Ty≥
 * 
p_twim
, 
twi_c⁄åﬁ_block_t
 * 
p_cb
)

954 
	`ASSERT
(
p_cb
->
h™dÀr
);

956 i‡(
	`ƒf_twim_evít_check
(
p_twim
, 
NRF_TWIM_EVENT_ERROR
))

958 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_ERROR
);

959 
	`NRF_LOG_DEBUG
("TWIM: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWIM
(
NRF_TWIM_EVENT_ERROR
));

960 i‡(!
	`ƒf_twim_evít_check
(
p_twim
, 
NRF_TWIM_EVENT_STOPPED
))

962 
	`ƒf_twim_öt_dißbÀ
(
p_twim
, 
p_cb
->
öt_mask
);

963 
p_cb
->
öt_mask
 = 
NRF_TWIM_INT_STOPPED_MASK
;

964 
	`ƒf_twim_öt_íabÀ
(
p_twim
, 
p_cb
->
öt_mask
);

966 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
NRF_TWIM_TASK_RESUME
);

967 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
NRF_TWIM_TASK_STOP
);

972 
ƒf_drv_twi_evt_t
 
evít
;

974 i‡(
	`ƒf_twim_evít_check
(
p_twim
, 
NRF_TWIM_EVENT_STOPPED
))

976 
	`NRF_LOG_DEBUG
("TWIM: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWIM
(
NRF_TWIM_EVENT_STOPPED
));

977 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_STOPPED
);

978 
evít
.
x„r_desc
 = 
p_cb
->xfer_desc;

979 i‡(
p_cb
->
îr‹
)

982 
evít
.
x„r_desc
.
¥im¨y_Àngth
 = (
p_cb
->x„r_desc.
ty≥
 =
NRF_DRV_TWI_XFER_RX
) ?

983 (
uöt8_t
)
	`ƒf_twim_rxd_amou¡_gë
(
p_twim
Ë: (uöt8_t)
	`ƒf_twim_txd_amou¡_gë
(p_twim);

984 
evít
.
x„r_desc
.
£c⁄d¨y_Àngth
 = (
p_cb
->x„r_desc.
ty≥
 =
NRF_DRV_TWI_XFER_TXRX
) ?

985 (
uöt8_t
)
	`ƒf_twim_rxd_amou¡_gë
(
p_twim
Ë: (uöt8_t)
	`ƒf_twim_txd_amou¡_gë
(p_twim);

988 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_LASTTX
);

989 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_LASTRX
);

990 i‡(!
p_cb
->
ª≥©ed
 ||Ö_cb->
îr‹
)

992 
	`ƒf_twim_sh‹ts_£t
(
p_twim
, 0);

993 
p_cb
->
öt_mask
 = 0;

994 
	`ƒf_twim_öt_dißbÀ
(
p_twim
, 
DISABLE_ALL_INT_SHORT
);

999 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_SUSPENDED
);

1000 
	`NRF_LOG_DEBUG
("TWIM: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWIM
(
NRF_TWIM_EVENT_SUSPENDED
));

1001 i‡(
p_cb
->
x„r_desc
.
ty≥
 =
NRF_DRV_TWI_XFER_TX
)

1003 
evít
.
x„r_desc
 = 
p_cb
->xfer_desc;

1004 i‡(!
p_cb
->
ª≥©ed
)

1006 
	`ƒf_twim_sh‹ts_£t
(
p_twim
, 0);

1007 
p_cb
->
öt_mask
 = 0;

1008 
	`ƒf_twim_öt_dißbÀ
(
p_twim
, 
DISABLE_ALL_INT_SHORT
);

1013 
	`ƒf_twim_sh‹ts_£t
(
p_twim
, 
NRF_TWIM_SHORT_LASTTX_STOP_MASK
);

1014 
p_cb
->
öt_mask
 = 
NRF_TWIM_INT_STOPPED_MASK
 | 
NRF_TWIM_INT_ERROR_MASK
;

1015 
	`ƒf_twim_öt_dißbÀ
(
p_twim
, 
DISABLE_ALL_INT_SHORT
);

1016 
	`ƒf_twim_öt_íabÀ
(
p_twim
, 
p_cb
->
öt_mask
);

1017 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
NRF_TWIM_TASK_STARTTX
);

1018 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
NRF_TWIM_TASK_RESUME
);

1023 
uöt32_t
 
îr‹§c
 = 
	`ƒf_twim_îr‹§c_gë_™d_˛ór
(
p_twim
);

1024 i‡(
îr‹§c
 & 
NRF_TWIM_ERROR_ADDRESS_NACK
)

1026 
evít
.
ty≥
 = 
NRF_DRV_TWI_EVT_ADDRESS_NACK
;

1027 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_DRV_TWI_EVT_ADDRESS_NACK
));

1029 i‡(
îr‹§c
 & 
NRF_TWIM_ERROR_DATA_NACK
)

1031 
evít
.
ty≥
 = 
NRF_DRV_TWI_EVT_DATA_NACK
;

1032 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_DRV_TWI_EVT_DATA_NACK
));

1036 
evít
.
ty≥
 = 
NRF_DRV_TWI_EVT_DONE
;

1037 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_DRV_TWI_EVT_DONE
));

1040 i‡(!
p_cb
->
ª≥©ed
)

1042 
p_cb
->
busy
 = 
Ál£
;

1044 
p_cb
->
	`h™dÀr
(&
evít
,Ö_cb->
p_c⁄ãxt
);

1045 
	}
}

1048 #ifde‡
TWI_IN_USE


1049 
	$úq_h™dÀr_twi
(
NRF_TWI_Ty≥
 * 
p_twi
, 
twi_c⁄åﬁ_block_t
 * 
p_cb
)

1051 
	`ASSERT
(
p_cb
->
h™dÀr
);

1053 i‡(
	`twi_å™s„r
(
p_twi
, &
p_cb
->
îr‹
, &p_cb->
byãs_å™s„ºed
,Ö_cb->
p_cuº_buf
,Ö_cb->
cuº_Àngth
,Ö_cb->
cuº_no_°›
 ))

1058 i‡(!
p_cb
->
îr‹
 &&

1059 ((
p_cb
->
x„r_desc
.
ty≥
 =
NRF_DRV_TWI_XFER_TXRX
) ||

1060 (
p_cb
->
x„r_desc
.
ty≥
 =
NRF_DRV_TWI_XFER_TXTX
)) &&

1061 
p_cb
->
p_cuº_buf
 =p_cb->
x„r_desc
.
p_¥im¨y_buf
)

1063 
p_cb
->
p_cuº_buf
 =Ö_cb->
x„r_desc
.
p_£c⁄d¨y_buf
;

1064 
p_cb
->
cuº_Àngth
 =Ö_cb->
x„r_desc
.
£c⁄d¨y_Àngth
;

1065 
p_cb
->
cuº_no_°›
 = (p_cb->
Êags
 & 
NRF_DRV_TWI_FLAG_TX_NO_STOP
);

1067 i‡(
p_cb
->
x„r_desc
.
ty≥
 =
NRF_DRV_TWI_XFER_TXTX
)

1069 ()
	`twi_tx_°¨t_å™s„r
(
p_cb
, 
p_twi
,Ö_cb->
p_cuº_buf
,Ö_cb->
cuº_Àngth
,Ö_cb->
cuº_no_°›
);

1073 ()
	`twi_rx_°¨t_å™s„r
(
p_cb
, 
p_twi
,Ö_cb->
p_cuº_buf
,Ö_cb->
cuº_Àngth
);

1078 
ƒf_drv_twi_evt_t
 
evít
;

1079 
evít
.
x„r_desc
 = 
p_cb
->xfer_desc;

1081 i‡(
p_cb
->
îr‹
)

1083 
uöt32_t
 
îr‹§c
 = 
	`ƒf_twi_îr‹§c_gë_™d_˛ór
(
p_twi
);

1084 i‡(
îr‹§c
 & 
NRF_TWI_ERROR_ADDRESS_NACK
)

1086 
evít
.
ty≥
 = 
NRF_DRV_TWI_EVT_ADDRESS_NACK
;

1087 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_DRV_TWI_EVT_ADDRESS_NACK
));

1089 i‡(
îr‹§c
 & 
NRF_TWI_ERROR_DATA_NACK
)

1091 
evít
.
ty≥
 = 
NRF_DRV_TWI_EVT_DATA_NACK
;

1092 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_DRV_TWI_EVT_DATA_NACK
));

1097 
evít
.
ty≥
 = 
NRF_DRV_TWI_EVT_DONE
;

1098 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_DRV_TWI_EVT_DONE
));

1101 
p_cb
->
busy
 = 
Ál£
;

1103 i‡(!(
NRF_DRV_TWI_FLAG_NO_XFER_EVT_HANDLER
 & 
p_cb
->
Êags
))

1105 
p_cb
->
	`h™dÀr
(&
evít
,Ö_cb->
p_c⁄ãxt
);

1109 
	}
}

1112 #i‡
NRF_MODULE_ENABLED
(
TWI0
)

1113 
	$IRQ_HANDLER
(0)

1115 #i‡(
TWI0_USE_EASY_DMA
 == 1)

1116 
	`úq_h™dÀr_twim
(
NRF_TWIM0
,

1118 
	`úq_h™dÀr_twi
(
NRF_TWI0
,

1120 &
m_cb
[
TWI0_INSTANCE_INDEX
]);

1121 
	}
}

1124 #i‡
NRF_MODULE_ENABLED
(
TWI1
)

1125 
	$IRQ_HANDLER
(1)

1127 #i‡(
TWI1_USE_EASY_DMA
 == 1)

1128 
	`úq_h™dÀr_twim
(
NRF_TWIM1
,

1130 
	`úq_h™dÀr_twi
(
NRF_TWI1
,

1132 &
m_cb
[
TWI1_INSTANCE_INDEX
]);

1133 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\uart\nrf_drv_uart.c

40 
	~"sdk_comm⁄.h
"

42 #i‡
NRF_MODULE_ENABLED
(
UART
)

43 
	~"ƒf_drv_u¨t.h
"

44 
	~"ƒf_as£π.h
"

45 
	~"ƒf_drv_comm⁄.h
"

46 
	~"ƒf_gpio.h
"

47 
	~"≠p_utû_∂©f‹m.h
"

50 
	~"ƒf_u¨t.h
"

51 
	~"≠p_u¨t.h
"

52 
	~"../../LMS_UWB_2021/maö.h
"

55 
	#NRF_LOG_MODULE_NAME
 "UART"

	)

57 #i‡
UART_CONFIG_LOG_ENABLED


58 
	#NRF_LOG_LEVEL
 
UART_CONFIG_LOG_LEVEL


	)

59 
	#NRF_LOG_INFO_COLOR
 
UART_CONFIG_INFO_COLOR


	)

60 
	#NRF_LOG_DEBUG_COLOR
 
UART_CONFIG_DEBUG_COLOR


	)

61 
	#EVT_TO_STR
(
evít
Ë”víà=
NRF_UART_EVENT_ERROR
 ? "NRF_UART_EVENT_ERROR" : "UNKNOWN EVENT")

	)

63 
	#EVT_TO_STR
(
evít
Ë""

	)

64 
	#NRF_LOG_LEVEL
 0

	)

66 
	~"ƒf_log.h
"

67 
	~"ƒf_log_˘æ.h
"

69 #i‡(
deföed
(
UARTE_IN_USE
Ë&& deföed(
UART_IN_USE
))

71 
	#CODE_FOR_UARTE
(
code
Ëi‡(
m_cb
[
p_ö°™˚
->
drv_ö°_idx
].
u£_ósy_dma
Ë{ codê}

	)

72 
	#CODE_FOR_UARTE_INT
(
idx
, 
code
Ëi‡(
m_cb
[idx].
u£_ósy_dma
Ë{ codê}

	)

73 
	#CODE_FOR_UART
(
code
Ë{ codê}

	)

74 #ñi‡(
deföed
(
UARTE_IN_USE
Ë&& !deföed(
UART_IN_USE
))

76 
	#CODE_FOR_UARTE
(
code
Ë{ codê}

	)

77 
	#CODE_FOR_UARTE_INT
(
idx
, 
code
Ë{ codê}

	)

78 
	#CODE_FOR_UART
(
code
)

	)

79 #ñi‡(!
deföed
(
UARTE_IN_USE
Ë&& deföed(
UART_IN_USE
))

81 
	#CODE_FOR_UARTE
(
code
)

	)

82 
	#CODE_FOR_UARTE_INT
(
idx
, 
code
)

	)

83 
	#CODE_FOR_UART
(
code
Ë{ codê}

	)

88 
	#TX_COUNTER_ABORT_REQ_VALUE
 256

	)

92 * 
	mp_c⁄ãxt
;

93 
ƒf_u¨t_evít_h™dÀr_t
 
	mh™dÀr
;

94 
uöt8_t
 c⁄° * 
	mp_tx_buf„r
;

95 
uöt8_t
 * 
	mp_rx_buf„r
;

96 
uöt8_t
 * 
	mp_rx_£c⁄d¨y_buf„r
;

97 vﬁ©ûê
uöt16_t
 
	mtx_cou¡î
;

98 
uöt8_t
 
	mtx_buf„r_Àngth
;

99 
uöt8_t
 
	mrx_buf„r_Àngth
;

100 
uöt8_t
 
	mrx_£c⁄d¨y_buf„r_Àngth
;

101 vﬁ©ûê
uöt8_t
 
	mrx_cou¡î
;

102 
boﬁ
 
	mrx_íabÀd
;

103 
ƒf_drv_°©e_t
 
	m°©e
;

104 #i‡(
deföed
(
UARTE_IN_USE
Ë&& deföed(
UART_IN_USE
))

105 
boﬁ
 
	mu£_ósy_dma
;

107 } 
	tu¨t_c⁄åﬁ_block_t
;

109 
u¨t_c⁄åﬁ_block_t
 
	gm_cb
[
UART_ENABLED_COUNT
];

111 
__STATIC_INLINE
 
	$≠∂y_c⁄fig
(
ƒf_drv_u¨t_t
 c⁄° * 
p_ö°™˚
, 
ƒf_drv_u¨t_c⁄fig_t
 c⁄° * 
p_c⁄fig
)

113 i‡(
p_c⁄fig
->
p£…xd
 !
NRF_UART_PSEL_DISCONNECTED
)

115 
	`ƒf_gpio_pö_£t
(
p_c⁄fig
->
p£…xd
);

116 
	`ƒf_gpio_cfg_ouçut
(
p_c⁄fig
->
p£…xd
);

118 i‡(
p_c⁄fig
->
p£Ãxd
 !
NRF_UART_PSEL_DISCONNECTED
)

120 
	`ƒf_gpio_cfg_öput
(
p_c⁄fig
->
p£Ãxd
, 
NRF_GPIO_PIN_NOPULL
);

123 
CODE_FOR_UARTE


125 
	`ƒf_u¨ã_baudøã_£t
(
p_ö°™˚
->
ªg
.
p_u¨ã
, (
ƒf_u¨ã_baudøã_t
)
p_c⁄fig
->
baudøã
);

126 
	`ƒf_u¨ã_c⁄figuª
(
p_ö°™˚
->
ªg
.
p_u¨ã
, (
ƒf_u¨ã_∑rôy_t
)
p_c⁄fig
->
∑rôy
,

127 (
ƒf_u¨ã_hwfc_t
)
p_c⁄fig
->
hwfc
);

128 
	`ƒf_u¨ã_txrx_pös_£t
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
p_c⁄fig
->
p£…xd
,Ö_c⁄fig->
p£Ãxd
);

129 i‡(
p_c⁄fig
->
hwfc
 =
NRF_UART_HWFC_ENABLED
)

131 i‡(
p_c⁄fig
->
p£l˘s
 !
NRF_UART_PSEL_DISCONNECTED
)

133 
	`ƒf_gpio_cfg_öput
(
p_c⁄fig
->
p£l˘s
, 
NRF_GPIO_PIN_NOPULL
);

135 i‡(
p_c⁄fig
->
p£Ãts
 !
NRF_UART_PSEL_DISCONNECTED
)

137 
	`ƒf_gpio_pö_£t
(
p_c⁄fig
->
p£Ãts
);

138 
	`ƒf_gpio_cfg_ouçut
(
p_c⁄fig
->
p£Ãts
);

140 
	`ƒf_u¨ã_hwfc_pös_£t
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
p_c⁄fig
->
p£Ãts
,Ö_c⁄fig->
p£l˘s
);

143 
CODE_FOR_UART


145 
	`ƒf_u¨t_baudøã_£t
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
p_c⁄fig
->
baudøã
);

146 
	`ƒf_u¨t_c⁄figuª
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
p_c⁄fig
->
∑rôy
,Ö_c⁄fig->
hwfc
);

147 
	`ƒf_u¨t_txrx_pös_£t
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
p_c⁄fig
->
p£…xd
,Ö_c⁄fig->
p£Ãxd
);

148 i‡(
p_c⁄fig
->
hwfc
 =
NRF_UART_HWFC_ENABLED
)

150 i‡(
p_c⁄fig
->
p£l˘s
 !
NRF_UART_PSEL_DISCONNECTED
)

152 
	`ƒf_gpio_cfg_öput
(
p_c⁄fig
->
p£l˘s
, 
NRF_GPIO_PIN_NOPULL
);

154 i‡(
p_c⁄fig
->
p£Ãts
 !
NRF_UART_PSEL_DISCONNECTED
)

156 
	`ƒf_gpio_pö_£t
(
p_c⁄fig
->
p£Ãts
);

157 
	`ƒf_gpio_cfg_ouçut
(
p_c⁄fig
->
p£Ãts
);

159 
	`ƒf_u¨t_hwfc_pös_£t
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
p_c⁄fig
->
p£Ãts
,Ö_c⁄fig->
p£l˘s
);

162 
	}
}

164 
__STATIC_INLINE
 
	$öãºu±s_íabÀ
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
, 
uöt8_t
 
öãºu±_¥i‹ôy
)

166 
CODE_FOR_UARTE


168 
	`ƒf_u¨ã_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_ENDRX
);

169 
	`ƒf_u¨ã_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_ENDTX
);

170 
	`ƒf_u¨ã_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_ERROR
);

171 
	`ƒf_u¨ã_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_RXTO
);

172 
	`ƒf_u¨ã_öt_íabÀ
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_INT_ENDRX_MASK
 |

173 
NRF_UARTE_INT_ENDTX_MASK
 |

174 
NRF_UARTE_INT_ERROR_MASK
 |

175 
NRF_UARTE_INT_RXTO_MASK
);

176 
	`ƒf_drv_comm⁄_úq_íabÀ
(
	`ƒf_drv_gë_IRQn
((*)
p_ö°™˚
->
ªg
.
p_u¨ã
), 
öãºu±_¥i‹ôy
);

178 
CODE_FOR_UART


180 
	`ƒf_u¨t_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_TXDRDY
);

181 
	`ƒf_u¨t_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_RXTO
);

182 
	`ƒf_u¨t_öt_íabÀ
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_INT_MASK_TXDRDY
 |

183 
NRF_UART_INT_MASK_RXTO
);

184 
	`ƒf_drv_comm⁄_úq_íabÀ
(
	`ƒf_drv_gë_IRQn
((*)
p_ö°™˚
->
ªg
.
p_u¨t
), 
öãºu±_¥i‹ôy
);

186 
	}
}

188 
__STATIC_INLINE
 
	$öãºu±s_dißbÀ
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

190 
CODE_FOR_UARTE


192 
	`ƒf_u¨ã_öt_dißbÀ
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_INT_ENDRX_MASK
 |

193 
NRF_UARTE_INT_ENDTX_MASK
 |

194 
NRF_UARTE_INT_ERROR_MASK
 |

195 
NRF_UARTE_INT_RXTO_MASK
);

196 
	`ƒf_drv_comm⁄_úq_dißbÀ
(
	`ƒf_drv_gë_IRQn
((*)
p_ö°™˚
->
ªg
.
p_u¨ã
));

198 
CODE_FOR_UART


200 
	`ƒf_u¨t_öt_dißbÀ
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_INT_MASK_RXDRDY
 |

201 
NRF_UART_INT_MASK_TXDRDY
 |

202 
NRF_UART_INT_MASK_ERROR
 |

203 
NRF_UART_INT_MASK_RXTO
);

204 
	`ƒf_drv_comm⁄_úq_dißbÀ
(
	`ƒf_drv_gë_IRQn
((*)
p_ö°™˚
->
ªg
.
p_u¨t
));

207 
	}
}

209 
__STATIC_INLINE
 
	$pös_to_deÁu…
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

212 
uöt32_t
 
txd
;

213 
uöt32_t
 
rxd
;

214 
uöt32_t
 
πs
;

215 
uöt32_t
 
˘s
;

217 
CODE_FOR_UARTE


219 
txd
 = 
	`ƒf_u¨ã_tx_pö_gë
(
p_ö°™˚
->
ªg
.
p_u¨ã
);

220 
rxd
 = 
	`ƒf_u¨ã_rx_pö_gë
(
p_ö°™˚
->
ªg
.
p_u¨ã
);

221 
πs
 = 
	`ƒf_u¨ã_πs_pö_gë
(
p_ö°™˚
->
ªg
.
p_u¨ã
);

222 
˘s
 = 
	`ƒf_u¨ã_˘s_pö_gë
(
p_ö°™˚
->
ªg
.
p_u¨ã
);

223 
	`ƒf_u¨ã_txrx_pös_disc⁄√˘
(
p_ö°™˚
->
ªg
.
p_u¨ã
);

224 
	`ƒf_u¨ã_hwfc_pös_disc⁄√˘
(
p_ö°™˚
->
ªg
.
p_u¨ã
);

226 
CODE_FOR_UART


228 
txd
 = 
	`ƒf_u¨t_tx_pö_gë
(
p_ö°™˚
->
ªg
.
p_u¨t
);

229 
rxd
 = 
	`ƒf_u¨t_rx_pö_gë
(
p_ö°™˚
->
ªg
.
p_u¨t
);

230 
πs
 = 
	`ƒf_u¨t_πs_pö_gë
(
p_ö°™˚
->
ªg
.
p_u¨t
);

231 
˘s
 = 
	`ƒf_u¨t_˘s_pö_gë
(
p_ö°™˚
->
ªg
.
p_u¨t
);

232 
	`ƒf_u¨t_txrx_pös_disc⁄√˘
(
p_ö°™˚
->
ªg
.
p_u¨t
);

233 
	`ƒf_u¨t_hwfc_pös_disc⁄√˘
(
p_ö°™˚
->
ªg
.
p_u¨t
);

236 i‡(
txd
 !
NRF_UART_PSEL_DISCONNECTED
)

238 
	`ƒf_gpio_cfg_deÁu…
(
txd
);

241 i‡(
rxd
 !
NRF_UART_PSEL_DISCONNECTED
)

243 
	`ƒf_gpio_cfg_deÁu…
(
rxd
);

246 i‡(
˘s
 !
NRF_UART_PSEL_DISCONNECTED
)

248 
	`ƒf_gpio_cfg_deÁu…
(
˘s
);

251 i‡(
πs
 !
NRF_UART_PSEL_DISCONNECTED
)

253 
	`ƒf_gpio_cfg_deÁu…
(
πs
);

256 
	}
}

258 
__STATIC_INLINE
 
	$u¨t_íabÀ
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

260 
	`CODE_FOR_UARTE
(
	`ƒf_u¨ã_íabÀ
(
p_ö°™˚
->
ªg
.
p_u¨ã
);)

261 
	`CODE_FOR_UART
(
	`ƒf_u¨t_íabÀ
(
p_ö°™˚
->
ªg
.
p_u¨t
););

262 
	}
}

264 
__STATIC_INLINE
 
	$u¨t_dißbÀ
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

266 
	`CODE_FOR_UARTE
(
	`ƒf_u¨ã_dißbÀ
(
p_ö°™˚
->
ªg
.
p_u¨ã
);)

267 
	`CODE_FOR_UART
(
	`ƒf_u¨t_dißbÀ
(
p_ö°™˚
->
ªg
.
p_u¨t
););

268 
	}
}

270 
ªt_code_t
 
	$ƒf_drv_u¨t_öô
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
, 
ƒf_drv_u¨t_c⁄fig_t
 c⁄° * 
p_c⁄fig
,

271 
ƒf_u¨t_evít_h™dÀr_t
 
evít_h™dÀr
)

273 
	`ASSERT
(
p_c⁄fig
);

274 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

275 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

277 i‡(
p_cb
->
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
)

279 
îr_code
 = 
NRF_ERROR_INVALID_STATE
;

281  
îr_code
;

284 #i‡(
	`deföed
(
UARTE_IN_USE
Ë&& deföed(
UART_IN_USE
))

285 
p_cb
->
u£_ósy_dma
 = 
p_c⁄fig
->use_easy_dma;

287 
	`≠∂y_c⁄fig
(
p_ö°™˚
, 
p_c⁄fig
);

289 
p_cb
->
h™dÀr
 = 
evít_h™dÀr
;

290 
p_cb
->
p_c⁄ãxt
 = 
p_c⁄fig
->p_context;

292 i‡(
p_cb
->
h™dÀr
)

294 
	`öãºu±s_íabÀ
(
p_ö°™˚
, 
p_c⁄fig
->
öãºu±_¥i‹ôy
);

297 
	`u¨t_íabÀ
(
p_ö°™˚
);

298 
p_cb
->
rx_buf„r_Àngth
 = 0;

299 
p_cb
->
rx_£c⁄d¨y_buf„r_Àngth
 = 0;

300 
p_cb
->
tx_buf„r_Àngth
 = 0;

301 
p_cb
->
°©e
 = 
NRF_DRV_STATE_INITIALIZED
;

302 
p_cb
->
rx_íabÀd
 = 
Ál£
;

304  
îr_code
;

305 
	}
}

307 
	$ƒf_drv_u¨t_unöô
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

309 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

311 
	`u¨t_dißbÀ
(
p_ö°™˚
);

313 i‡(
p_cb
->
h™dÀr
)

315 
	`öãºu±s_dißbÀ
(
p_ö°™˚
);

318 
	`pös_to_deÁu…
(
p_ö°™˚
);

320 
p_cb
->
°©e
 = 
NRF_DRV_STATE_UNINITIALIZED
;

321 
p_cb
->
h™dÀr
 = 
NULL
;

323 
	}
}

325 #i‡
deföed
(
UART_IN_USE
)

326 
__STATIC_INLINE
 
	$tx_byã
(
NRF_UART_Ty≥
 * 
p_u¨t
, 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
)

328 
	`ƒf_u¨t_evít_˛ór
(
p_u¨t
, 
NRF_UART_EVENT_TXDRDY
);

329 
uöt8_t
 
txd
 = 
p_cb
->
p_tx_buf„r
[p_cb->
tx_cou¡î
];

330 
p_cb
->
tx_cou¡î
++;

331 
	`ƒf_u¨t_txd_£t
(
p_u¨t
, 
txd
);

332 
	}
}

334 
__STATIC_INLINE
 
ªt_code_t
 
	$ƒf_drv_u¨t_tx_f‹_u¨t
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

336 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

337 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

339 
	`ƒf_u¨t_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_TXDRDY
);

340 
	`ƒf_u¨t_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_TASK_STARTTX
);

342 
	`tx_byã
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
p_cb
);

344 i‡(
p_cb
->
h™dÀr
 =
NULL
)

346 
p_cb
->
tx_cou¡î
 < (
uöt16_t
Ëp_cb->
tx_buf„r_Àngth
)

348 !
	`ƒf_u¨t_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_TXDRDY
) &&

349 
p_cb
->
tx_cou¡î
 !
TX_COUNTER_ABORT_REQ_VALUE
)

352 i‡(
p_cb
->
tx_cou¡î
 !
TX_COUNTER_ABORT_REQ_VALUE
)

354 
	`tx_byã
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
p_cb
);

358 i‡(
p_cb
->
tx_cou¡î
 =
TX_COUNTER_ABORT_REQ_VALUE
)

360 
îr_code
 = 
NRF_ERROR_FORBIDDEN
;

364 !
	`ƒf_u¨t_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_TXDRDY
))

367 
	`ƒf_u¨t_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_TASK_STOPTX
);

369 
p_cb
->
tx_buf„r_Àngth
 = 0;

372 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

373  
îr_code
;

374 
	}
}

377 #i‡
deföed
(
UARTE_IN_USE
)

378 
__STATIC_INLINE
 
ªt_code_t
 
	$ƒf_drv_u¨t_tx_f‹_u¨ã
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

380 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

381 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

383 
	`ƒf_u¨ã_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_ENDTX
);

384 
	`ƒf_u¨ã_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_TXSTOPPED
);

385 
	`ƒf_u¨ã_tx_buf„r_£t
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
p_cb
->
p_tx_buf„r
,Ö_cb->
tx_buf„r_Àngth
);

386 
	`ƒf_u¨ã_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_TASK_STARTTX
);

388 i‡(
p_cb
->
h™dÀr
 =
NULL
)

390 
boﬁ
 
ídtx
;

391 
boﬁ
 
tx°›≥d
;

394 
ídtx
 = 
	`ƒf_u¨ã_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_ENDTX
);

395 
tx°›≥d
 = 
	`ƒf_u¨ã_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_TXSTOPPED
);

397 (!
ídtx
Ë&& (!
tx°›≥d
));

399 i‡(
tx°›≥d
)

401 
îr_code
 = 
NRF_ERROR_FORBIDDEN
;

403 
p_cb
->
tx_buf„r_Àngth
 = 0;

406 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

407  
îr_code
;

408 
	}
}

411 
ªt_code_t
 
	$ƒf_drv_u¨t_tx
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
, 
uöt8_t
 c⁄° * c⁄° 
p_d©a
, uöt8_à
Àngth
)

413 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

414 
	`ASSERT
(
p_cb
->
°©e
 =
NRF_DRV_STATE_INITIALIZED
);

415 
	`ASSERT
(
Àngth
>0);

416 
	`ASSERT
(
p_d©a
);

418 
ªt_code_t
 
îr_code
;

420 
CODE_FOR_UARTE


424 i‡(!
	`ƒf_drv_is_ö_RAM
(
p_d©a
))

426 
îr_code
 = 
NRF_ERROR_INVALID_ADDR
;

427 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

428  
îr_code
;

432 i‡(
	`ƒf_drv_u¨t_tx_ö_¥ogªss
(
p_ö°™˚
))

434 
îr_code
 = 
NRF_ERROR_BUSY
;

435 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

436  
îr_code
;

438 
p_cb
->
tx_buf„r_Àngth
 = 
Àngth
;

439 
p_cb
->
p_tx_buf„r
 = 
p_d©a
;

440 
p_cb
->
tx_cou¡î
 = 0;

442 
	`NRF_LOG_INFO
("Tøns„∏tx_Àn: %d.\r\n", 
p_cb
->
tx_buf„r_Àngth
);

443 
	`NRF_LOG_DEBUG
("Tx data:\r\n");

444 
	`NRF_LOG_HEXDUMP_DEBUG
((
uöt8_t
 *)
p_cb
->
p_tx_buf„r
,Ö_cb->
tx_buf„r_Àngth
 * (p_cb->p_tx_buffer));

446 
CODE_FOR_UARTE


448  
	`ƒf_drv_u¨t_tx_f‹_u¨ã
(
p_ö°™˚
);

450 
CODE_FOR_UART


452  
	`ƒf_drv_u¨t_tx_f‹_u¨t
(
p_ö°™˚
);

454 
	}
}

456 
boﬁ
 
	$ƒf_drv_u¨t_tx_ö_¥ogªss
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

458  (
m_cb
[
p_ö°™˚
->
drv_ö°_idx
].
tx_buf„r_Àngth
 != 0);

459 
	}
}

461 #i‡
deföed
(
UART_IN_USE
)

462 
__STATIC_INLINE
 
	$rx_íabÀ
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

464 
	`ƒf_u¨t_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_ERROR
);

465 
	`ƒf_u¨t_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_RXDRDY
);

466 
	`ƒf_u¨t_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_TASK_STARTRX
);

467 
	}
}

469 
__STATIC_INLINE
 
	$rx_byã
(
NRF_UART_Ty≥
 * 
p_u¨t
, 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
)

471 i‡(!
p_cb
->
rx_buf„r_Àngth
)

473 
	`ƒf_u¨t_evít_˛ór
(
p_u¨t
, 
NRF_UART_EVENT_RXDRDY
);

475 (Ë
	`ƒf_u¨t_rxd_gë
(
p_u¨t
);

478 
	`ƒf_u¨t_evít_˛ór
(
p_u¨t
, 
NRF_UART_EVENT_RXDRDY
);

479 
p_cb
->
p_rx_buf„r
[p_cb->
rx_cou¡î
] = 
	`ƒf_u¨t_rxd_gë
(
p_u¨t
);

480 
p_cb
->
rx_cou¡î
++;

481 
	}
}

483 
__STATIC_INLINE
 
ªt_code_t
 
	$ƒf_drv_u¨t_rx_f‹_u¨t
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
, 
uöt8_t
 * 
p_d©a
, uöt8_à
Àngth
, 
boﬁ
 
£c⁄d_buf„r
)

485 
ªt_code_t
 
îr_code
;

487 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

489 i‡((!
p_cb
->
rx_íabÀd
Ë&& (!
£c⁄d_buf„r
))

491 
	`rx_íabÀ
(
p_ö°™˚
);

494 i‡(
p_cb
->
h™dÀr
 =
NULL
)

496 
	`ƒf_u¨t_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_RXTO
);

498 
boﬁ
 
rxrdy
;

499 
boﬁ
 
rxto
;

500 
boﬁ
 
îr‹
;

505 
îr‹
 = 
	`ƒf_u¨t_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_ERROR
);

506 
rxrdy
 = 
	`ƒf_u¨t_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_RXDRDY
);

507 
rxto
 = 
	`ƒf_u¨t_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_RXTO
);

508 } (!
rxrdy
Ë&& (!
rxto
Ë&& (!
îr‹
));

510 i‡(
îr‹
 || 
rxto
)

514 
	`rx_byã
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
p_cb
);

515 } 
p_cb
->
rx_buf„r_Àngth
 >Ö_cb->
rx_cou¡î
);

517 
p_cb
->
rx_buf„r_Àngth
 = 0;

518 i‡(
îr‹
)

520 
îr_code
 = 
NRF_ERROR_INTERNAL
;

521 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

522  
îr_code
;

525 i‡(
rxto
)

527 
îr_code
 = 
NRF_ERROR_FORBIDDEN
;

528 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

529  
îr_code
;

532 i‡(
p_cb
->
rx_íabÀd
)

534 
	`ƒf_u¨t_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_TASK_STARTRX
);

539 
	`ƒf_u¨t_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_TASK_STOPRX
);

544 
	`ƒf_u¨t_öt_íabÀ
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_INT_MASK_RXDRDY
 | 
NRF_UART_INT_MASK_ERROR
);

546 
îr_code
 = 
NRF_SUCCESS
;

547 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

548  
îr_code
;

549 
	}
}

552 #i‡
deföed
(
UARTE_IN_USE
)

553 
__STATIC_INLINE
 
ªt_code_t
 
	$ƒf_drv_u¨t_rx_f‹_u¨ã
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
, 
uöt8_t
 * 
p_d©a
, uöt8_à
Àngth
, 
boﬁ
 
£c⁄d_buf„r
)

555 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

556 
	`ƒf_u¨ã_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_ENDRX
);

557 
	`ƒf_u¨ã_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_RXTO
);

558 
	`ƒf_u¨ã_rx_buf„r_£t
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
p_d©a
, 
Àngth
);

559 i‡(!
£c⁄d_buf„r
)

561 
	`ƒf_u¨ã_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_TASK_STARTRX
);

565 
	`ƒf_u¨ã_sh‹ts_íabÀ
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_SHORT_ENDRX_STARTRX
);

568 i‡(
m_cb
[
p_ö°™˚
->
drv_ö°_idx
].
h™dÀr
 =
NULL
)

570 
boﬁ
 
ídrx
;

571 
boﬁ
 
rxto
;

572 
boﬁ
 
îr‹
;

574 
ídrx
 = 
	`ƒf_u¨ã_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_ENDRX
);

575 
rxto
 = 
	`ƒf_u¨ã_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_RXTO
);

576 
îr‹
 = 
	`ƒf_u¨ã_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_ERROR
);

577 }(!
ídrx
Ë&& (!
rxto
Ë&& (!
îr‹
));

579 
m_cb
[
p_ö°™˚
->
drv_ö°_idx
].
rx_buf„r_Àngth
 = 0;

581 i‡(
îr‹
)

583 
îr_code
 = 
NRF_ERROR_INTERNAL
;

586 i‡(
rxto
)

588 
îr_code
 = 
NRF_ERROR_FORBIDDEN
;

593 
	`ƒf_u¨ã_öt_íabÀ
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_INT_ERROR_MASK
 | 
NRF_UARTE_INT_ENDRX_MASK
);

595 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

596  
îr_code
;

597 
	}
}

600 
ªt_code_t
 
	$ƒf_drv_u¨t_rx
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
, 
uöt8_t
 * 
p_d©a
, uöt8_à
Àngth
)

602 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

604 
	`ASSERT
(
m_cb
[
p_ö°™˚
->
drv_ö°_idx
].
°©e
 =
NRF_DRV_STATE_INITIALIZED
);

605 
	`ASSERT
(
Àngth
>0);

607 
ªt_code_t
 
îr_code
;

609 
CODE_FOR_UARTE


613 i‡(!
	`ƒf_drv_is_ö_RAM
(
p_d©a
))

615 
îr_code
 = 
NRF_ERROR_INVALID_ADDR
;

616 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

617  
îr_code
;

621 
boﬁ
 
£c⁄d_buf„r
 = 
Ál£
;

623 i‡(
p_cb
->
h™dÀr
)

625 
CODE_FOR_UARTE


627 
	`ƒf_u¨ã_öt_dißbÀ
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_INT_ERROR_MASK
 | 
NRF_UARTE_INT_ENDRX_MASK
);

629 
CODE_FOR_UART


631 
	`ƒf_u¨t_öt_dißbÀ
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_INT_MASK_RXDRDY
 | 
NRF_UART_INT_MASK_ERROR
);

634 i‡(
p_cb
->
rx_buf„r_Àngth
 != 0)

636 i‡(
p_cb
->
rx_£c⁄d¨y_buf„r_Àngth
 != 0)

638 i‡(
p_cb
->
h™dÀr
)

640 
CODE_FOR_UARTE


642 
	`ƒf_u¨ã_öt_íabÀ
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_INT_ERROR_MASK
 | 
NRF_UARTE_INT_ENDRX_MASK
);

644 
CODE_FOR_UART


646 
	`ƒf_u¨t_öt_íabÀ
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_INT_MASK_RXDRDY
 | 
NRF_UART_INT_MASK_ERROR
);

649 
îr_code
 = 
NRF_ERROR_BUSY
;

650 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

651  
îr_code
;

653 
£c⁄d_buf„r
 = 
åue
;

656 i‡(!
£c⁄d_buf„r
)

658 
p_cb
->
rx_buf„r_Àngth
 = 
Àngth
;

659 
p_cb
->
p_rx_buf„r
 = 
p_d©a
;

660 
p_cb
->
rx_cou¡î
 = 0;

661 
p_cb
->
rx_£c⁄d¨y_buf„r_Àngth
 = 0;

665 
p_cb
->
p_rx_£c⁄d¨y_buf„r
 = 
p_d©a
;

666 
p_cb
->
rx_£c⁄d¨y_buf„r_Àngth
 = 
Àngth
;

669 
	`NRF_LOG_INFO
("Tøns„∏rx_Àn: %d.\r\n", 
Àngth
);

672 
CODE_FOR_UARTE


674  
	`ƒf_drv_u¨t_rx_f‹_u¨ã
(
p_ö°™˚
, 
p_d©a
, 
Àngth
, 
£c⁄d_buf„r
);

676 
CODE_FOR_UART


678  
	`ƒf_drv_u¨t_rx_f‹_u¨t
(
p_ö°™˚
, 
p_d©a
, 
Àngth
, 
£c⁄d_buf„r
);

680 
	}
}

682 
	$ƒf_drv_u¨t_rx_íabÀ
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

685 
CODE_FOR_UARTE


687 
	`ASSERT
(
Ál£
);

689 
CODE_FOR_UART


691 i‡(!
m_cb
[
p_ö°™˚
->
drv_ö°_idx
].
rx_íabÀd
)

693 
	`rx_íabÀ
(
p_ö°™˚
);

694 
m_cb
[
p_ö°™˚
->
drv_ö°_idx
].
rx_íabÀd
 = 
åue
;

697 
	}
}

699 
	$ƒf_drv_u¨t_rx_dißbÀ
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

702 
CODE_FOR_UARTE


704 
	`ASSERT
(
Ál£
);

706 
CODE_FOR_UART


708 
	`ƒf_u¨t_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_TASK_STOPRX
);

709 
m_cb
[
p_ö°™˚
->
drv_ö°_idx
].
rx_íabÀd
 = 
Ál£
;

711 
	}
}

713 
uöt32_t
 
	$ƒf_drv_u¨t_îr‹§c_gë
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

715 
uöt32_t
 
îr§c
;

716 
CODE_FOR_UARTE


718 
	`ƒf_u¨ã_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_ERROR
);

719 
îr§c
 = 
	`ƒf_u¨ã_îr‹§c_gë_™d_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
);

721 
CODE_FOR_UART


723 
	`ƒf_u¨t_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_ERROR
);

724 
îr§c
 = 
	`ƒf_u¨t_îr‹§c_gë_™d_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨t
);

726  
îr§c
;

727 
	}
}

729 
__STATIC_INLINE
 
	$rx_d⁄e_evít
(
u¨t_c⁄åﬁ_block_t
 * 
p_cb
, 
uöt8_t
 
byãs
, uöt8_à* 
p_d©a
)

731 
ƒf_drv_u¨t_evít_t
 
evít
;

733 
evít
.
ty≥
 = 
NRF_DRV_UART_EVT_RX_DONE
;

734 
evít
.
d©a
.
rxtx
.
byãs
 = bytes;

735 
evít
.
d©a
.
rxtx
.
p_d©a
 =Ö_data;

737 
p_cb
->
	`h™dÀr
(&
evít
,Ö_cb->
p_c⁄ãxt
);

738 
	}
}

740 
__STATIC_INLINE
 
	$tx_d⁄e_evít
(
u¨t_c⁄åﬁ_block_t
 * 
p_cb
, 
uöt8_t
 
byãs
)

742 
ƒf_drv_u¨t_evít_t
 
evít
;

744 
evít
.
ty≥
 = 
NRF_DRV_UART_EVT_TX_DONE
;

745 
evít
.
d©a
.
rxtx
.
byãs
 = bytes;

746 
evít
.
d©a
.
rxtx
.
p_d©a
 = (
uöt8_t
 *)
p_cb
->
p_tx_buf„r
;

748 
p_cb
->
tx_buf„r_Àngth
 = 0;

750 
p_cb
->
	`h™dÀr
(&
evít
,Ö_cb->
p_c⁄ãxt
);

751 
	}
}

753 
	$ƒf_drv_u¨t_tx_ab‹t
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

755 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

757 
CODE_FOR_UARTE


759 
	`ƒf_u¨ã_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_TXSTOPPED
);

760 
	`ƒf_u¨ã_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_TASK_STOPTX
);

761 i‡(
p_cb
->
h™dÀr
 =
NULL
)

763 !
	`ƒf_u¨ã_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_TXSTOPPED
));

766 
CODE_FOR_UART


768 
	`ƒf_u¨t_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_TASK_STOPTX
);

769 i‡(
p_cb
->
h™dÀr
)

771 
	`tx_d⁄e_evít
(
p_cb
,Ö_cb->
tx_cou¡î
);

775 
p_cb
->
tx_cou¡î
 = 
TX_COUNTER_ABORT_REQ_VALUE
;

778 
	`NRF_LOG_INFO
("TXÅransactionáborted.\r\n");

779 
	}
}

781 
	$ƒf_drv_u¨t_rx_ab‹t
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

783 
CODE_FOR_UARTE


785 
	`ƒf_u¨ã_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_TASK_STOPRX
);

787 
CODE_FOR_UART


789 
	`ƒf_u¨t_öt_dißbÀ
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_INT_MASK_RXDRDY
 | 
NRF_UART_INT_MASK_ERROR
);

790 
	`ƒf_u¨t_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_TASK_STOPRX
);

792 
	`NRF_LOG_INFO
("RXÅransactionáborted.\r\n");

793 
	}
}

891 
	#rxSTART
 1

	)

892 
	#rxEND
 2

	)

893 
	#txSTART
 1

	)

894 
	#txEND
 2

	)

897 
	#SLEEP
 3

	)

899 #i‡
deföed
(
UARTE_IN_USE
)

900 
__STATIC_INLINE
 
	$u¨ã_úq_h™dÀr
(
NRF_UARTE_Ty≥
 * 
p_u¨ã
, 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
)

904 i‡(
	`ƒf_u¨ã_evít_check
(
p_u¨ã
, 
NRF_UARTE_EVENT_ERROR
))

906 
ƒf_drv_u¨t_evít_t
 
evít
;

908 
	`ƒf_u¨ã_evít_˛ór
(
p_u¨ã
, 
NRF_UARTE_EVENT_ERROR
);

910 
evít
.
ty≥
 = 
NRF_DRV_UART_EVT_ERROR
;

911 
evít
.
d©a
.
îr‹
.
îr‹_mask
 = 
	`ƒf_u¨ã_îr‹§c_gë_™d_˛ór
(
p_u¨ã
);

912 
evít
.
d©a
.
îr‹
.
rxtx
.
byãs
 = 
	`ƒf_u¨ã_rx_amou¡_gë
(
p_u¨ã
);

913 
evít
.
d©a
.
îr‹
.
rxtx
.
p_d©a
 = 
p_cb
->
p_rx_buf„r
;

916 
p_cb
->
rx_buf„r_Àngth
 = 0;

917 
p_cb
->
rx_£c⁄d¨y_buf„r_Àngth
 = 0;

919 
p_cb
->
	`h™dÀr
(&
evít
,Ö_cb->
p_c⁄ãxt
);

921 i‡(
	`ƒf_u¨ã_evít_check
(
p_u¨ã
, 
NRF_UARTE_EVENT_ENDRX
))

924 
	`ƒf_u¨ã_evít_˛ór
(
p_u¨ã
, 
NRF_UARTE_EVENT_ENDRX
);

925 
uöt8_t
 
amou¡
 = 
	`ƒf_u¨ã_rx_amou¡_gë
(
p_u¨ã
);

928 i‡(
amou¡
 =
p_cb
->
rx_buf„r_Àngth
)

931 i‡(
p_cb
->
rx_£c⁄d¨y_buf„r_Àngth
)

933 
uöt8_t
 * 
p_d©a
 = 
p_cb
->
p_rx_buf„r
;

934 
	`ƒf_u¨ã_sh‹ts_dißbÀ
(
p_u¨ã
, 
NRF_UARTE_SHORT_ENDRX_STARTRX
);

935 
p_cb
->
rx_buf„r_Àngth
 =Ö_cb->
rx_£c⁄d¨y_buf„r_Àngth
;

936 
p_cb
->
p_rx_buf„r
 =Ö_cb->
p_rx_£c⁄d¨y_buf„r
;

937 
p_cb
->
rx_£c⁄d¨y_buf„r_Àngth
 = 0;

938 
	`rx_d⁄e_evít
(
p_cb
, 
amou¡
, 
p_d©a
);

943 
U¨t_RXD
 = *
p_cb
->
p_rx_buf„r
 ;

944 
Êag_u¨t_rx_d©a
 = 
åue
 ;

978 
p_cb
->
rx_buf„r_Àngth
 = 0;

979 
	`rx_d⁄e_evít
(
p_cb
, 
amou¡
,Ö_cb->
p_rx_buf„r
);

985 i‡(
	`ƒf_u¨ã_evít_check
(
p_u¨ã
, 
NRF_UARTE_EVENT_RXTO
))

988 
	`ƒf_u¨ã_evít_˛ór
(
p_u¨ã
, 
NRF_UARTE_EVENT_RXTO
);

989 i‡(
p_cb
->
rx_buf„r_Àngth
)

991 
p_cb
->
rx_buf„r_Àngth
 = 0;

992 
	`rx_d⁄e_evít
(
p_cb
, 
	`ƒf_u¨ã_rx_amou¡_gë
(
p_u¨ã
),Ö_cb->
p_rx_buf„r
);

996 i‡(
	`ƒf_u¨ã_evít_check
(
p_u¨ã
, 
NRF_UARTE_EVENT_ENDTX
))

998 
	`ƒf_u¨ã_evít_˛ór
(
p_u¨ã
, 
NRF_UARTE_EVENT_ENDTX
);

999 i‡(
p_cb
->
tx_buf„r_Àngth
)

1001 
	`tx_d⁄e_evít
(
p_cb
, 
	`ƒf_u¨ã_tx_amou¡_gë
(
p_u¨ã
));

1004 
	}
}

1009 #i‡
UART0_ENABLED


1010 
	$UART0_IRQH™dÀr
()

1012 
CODE_FOR_UARTE_INT


1014 
UART0_INSTANCE_INDEX
,

1015 
	`u¨ã_úq_h™dÀr
(
NRF_UARTE0
, &
m_cb
[
UART0_INSTANCE_INDEX
]);

1017 
CODE_FOR_UART


1021 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\uart\nrf_drv_uart.h

54 #i‚de‡
NRF_DRV_UART_H


55 
	#NRF_DRV_UART_H


	)

57 
	~"ƒf_u¨t.h
"

58 #ifde‡
UARTE_PRESENT


59 
	~"ƒf_u¨ã.h
"

62 
	~"sdk_îr‹s.h
"

63 
	~"sdk_c⁄fig.h
"

65 #ifde‡
__˝lu•lus


69 #i‚de‡
UART1_ENABLED


70 
	#UART1_ENABLED
 0

	)

73 #i‚de‡
UART0_ENABLED


74 
	#UART0_ENABLED
 0

	)

77 
	#UART0_INSTANCE_INDEX
 0

	)

78 
	#UART1_INSTANCE_INDEX
 
UART0_ENABLED


	)

79 
	#UART_ENABLED_COUNT
 
UART0_ENABLED
 + 
UART1_ENABLED


	)

81 #i‡
deföed
(
UARTE_PRESENT
)

82 
	#NRF_DRV_UART_PERIPHERAL
(
id
) \

83 (
	`CONCAT_3
(
UART
, 
id
, 
_CONFIG_USE_EASY_DMA
) == 1 ? \

84 (*)
	`CONCAT_2
(
NRF_UARTE
, 
id
) \

85 : (*)
	`CONCAT_2
(
NRF_UART
, 
id
))

	)

87 
	#NRF_DRV_UART_PERIPHERAL
(
id
Ë(*)
	`CONCAT_2
(
NRF_UART
, id)

	)

93 #i‡
deföed
(
UARTE_PRESENT
)

95 #i‡(
UART_EASY_DMA_SUPPORT
 == 1)

96 
	#UARTE_IN_USE


	)

99 #i‡(
UART_LEGACY_SUPPORT
 == 1)

100 
	#UART_IN_USE


	)

103 #i‡(
UART_ENABLED
 =1Ë&& ((!
deföed
(
UARTE_IN_USE
Ë&& !deföed(
UART_IN_USE
)Ë|| ((
UART_EASY_DMA_SUPPORT
 =0Ë&& (
UART_LEGACY_SUPPORT
 == 0)))

107 #ñi‡
deföed
(
UART_PRESENT
)

108 
	#UART_IN_USE


	)

120 #i‡(
deföed
(
UARTE_IN_USE
))

121 
NRF_UARTE_Ty≥
 * 
p_u¨ã
;

123 #i‡(
deföed
(
UART_IN_USE
Ë|| (
UART_ENABLED
 == 0))

124 
NRF_UART_Ty≥
 * 
p_u¨t
;

126 } 
ªg
;

127 
uöt8_t
 
drv_ö°_idx
;

128 } 
	tƒf_drv_u¨t_t
;

133 
	#NRF_DRV_UART_INSTANCE
(
id
) \

135 .
ªg
 = {
	`NRF_DRV_UART_PERIPHERAL
(
id
)}, \

136 .
drv_ö°_idx
 = 
	`CONCAT_3
(
UART
, 
id
, 
_INSTANCE_INDEX
),\

137 }

	)

144 
NRF_DRV_UART_EVT_TX_DONE
,

145 
NRF_DRV_UART_EVT_RX_DONE
,

146 
NRF_DRV_UART_EVT_ERROR
,

147 } 
	tƒf_drv_u¨t_evt_ty≥_t
;

152 
uöt32_t
 
p£…xd
;

153 
uöt32_t
 
p£Ãxd
;

154 
uöt32_t
 
p£l˘s
;

155 
uöt32_t
 
p£Ãts
;

156 * 
p_c⁄ãxt
;

157 
ƒf_u¨t_hwfc_t
 
hwfc
;

158 
ƒf_u¨t_∑rôy_t
 
∑rôy
;

159 
ƒf_u¨t_baudøã_t
 
baudøã
;

160 
uöt8_t
 
öãºu±_¥i‹ôy
;

161 #ifde‡
UARTE_PRESENT


162 
boﬁ
 
u£_ósy_dma
;

164 } 
	tƒf_drv_u¨t_c⁄fig_t
;

167 #ifde‡
UARTE_PRESENT


168 #i‡!
UART_LEGACY_SUPPORT


169 
	#DEFAULT_CONFIG_USE_EASY_DMA
 
åue


	)

170 #ñi‡!
UART_EASY_DMA_SUPPORT


171 
	#DEFAULT_CONFIG_USE_EASY_DMA
 
Ál£


	)

173 
	#DEFAULT_CONFIG_USE_EASY_DMA
 
UART0_USE_EASY_DMA


	)

175 
	#NRF_DRV_UART_DEFAULT_CONFIG
 \

177 .
p£…xd
 = 
NRF_UART_PSEL_DISCONNECTED
, \

178 .
p£Ãxd
 = 
NRF_UART_PSEL_DISCONNECTED
, \

179 .
p£l˘s
 = 
NRF_UART_PSEL_DISCONNECTED
, \

180 .
p£Ãts
 = 
NRF_UART_PSEL_DISCONNECTED
, \

181 .
p_c⁄ãxt
 = 
NULL
, \

182 .
hwfc
 = (
ƒf_u¨t_hwfc_t
)
UART_DEFAULT_CONFIG_HWFC
, \

183 .
∑rôy
 = (
ƒf_u¨t_∑rôy_t
)
UART_DEFAULT_CONFIG_PARITY
, \

184 .
baudøã
 = (
ƒf_u¨t_baudøã_t
)
UART_DEFAULT_CONFIG_BAUDRATE
, \

185 .
öãºu±_¥i‹ôy
 = 
UART_DEFAULT_CONFIG_IRQ_PRIORITY
, \

186 .
u£_ósy_dma
 = 
åue
 \

187 }

	)

189 
	#NRF_DRV_UART_DEFAULT_CONFIG
 \

191 .
p£…xd
 = 
NRF_UART_PSEL_DISCONNECTED
, \

192 .
p£Ãxd
 = 
NRF_UART_PSEL_DISCONNECTED
, \

193 .
p£l˘s
 = 
NRF_UART_PSEL_DISCONNECTED
, \

194 .
p£Ãts
 = 
NRF_UART_PSEL_DISCONNECTED
, \

195 .
p_c⁄ãxt
 = 
NULL
, \

196 .
hwfc
 = (
ƒf_u¨t_hwfc_t
)
UART_DEFAULT_CONFIG_HWFC
, \

197 .
∑rôy
 = (
ƒf_u¨t_∑rôy_t
)
UART_DEFAULT_CONFIG_PARITY
, \

198 .
baudøã
 = (
ƒf_u¨t_baudøã_t
)
UART_DEFAULT_CONFIG_BAUDRATE
, \

199 .
öãºu±_¥i‹ôy
 = 
UART_DEFAULT_CONFIG_IRQ_PRIORITY
, \

200 }

	)

206 
uöt8_t
 * 
p_d©a
;

207 
uöt8_t
 
byãs
;

208 } 
	tƒf_drv_u¨t_x„r_evt_t
;

213 
ƒf_drv_u¨t_x„r_evt_t
 
rxtx
;

214 
uöt32_t
 
îr‹_mask
;

215 } 
	tƒf_drv_u¨t_îr‹_evt_t
;

220 
ƒf_drv_u¨t_evt_ty≥_t
 
ty≥
;

223 
ƒf_drv_u¨t_x„r_evt_t
 
rxtx
;

224 
ƒf_drv_u¨t_îr‹_evt_t
 
îr‹
;

225 } 
d©a
;

226 } 
	tƒf_drv_u¨t_evít_t
;

235 (*
ƒf_u¨t_evít_h™dÀr_t
)(
	tƒf_drv_u¨t_evít_t
 * 
	tp_evít
, * 
	tp_c⁄ãxt
);

250 
ªt_code_t
 
ƒf_drv_u¨t_öô
(
ƒf_drv_u¨t_t
 c⁄° * 
p_ö°™˚
,

251 
ƒf_drv_u¨t_c⁄fig_t
 c⁄° * 
p_c⁄fig
,

252 
ƒf_u¨t_evít_h™dÀr_t
 
evít_h™dÀr
);

258 
ƒf_drv_u¨t_unöô
(
ƒf_drv_u¨t_t
 c⁄° * 
p_ö°™˚
);

268 
__STATIC_INLINE
 
uöt32_t
 
ƒf_drv_u¨t_èsk_addªss_gë
(
ƒf_drv_u¨t_t
 c⁄° * 
p_ö°™˚
,

269 
ƒf_u¨t_èsk_t
 
èsk
);

279 
__STATIC_INLINE
 
uöt32_t
 
ƒf_drv_u¨t_evít_addªss_gë
(
ƒf_drv_u¨t_t
 c⁄° * 
p_ö°™˚
,

280 
ƒf_u¨t_evít_t
 
evít
);

305 
ªt_code_t
 
ƒf_drv_u¨t_tx
(
ƒf_drv_u¨t_t
 c⁄° * 
p_ö°™˚
,

306 
uöt8_t
 c⁄° * c⁄° 
p_d©a
, uöt8_à
Àngth
);

316 
boﬁ
 
ƒf_drv_u¨t_tx_ö_¥ogªss
(
ƒf_drv_u¨t_t
 c⁄° * 
p_ö°™˚
);

327 
ƒf_drv_u¨t_tx_ab‹t
(
ƒf_drv_u¨t_t
 c⁄° * 
p_ö°™˚
);

359 
ªt_code_t
 
ƒf_drv_u¨t_rx
(
ƒf_drv_u¨t_t
 c⁄° * 
p_ö°™˚
,

360 
uöt8_t
 * 
p_d©a
, uöt8_à
Àngth
);

372 
ƒf_drv_u¨t_rx_íabÀ
(
ƒf_drv_u¨t_t
 c⁄° * 
p_ö°™˚
);

383 
ƒf_drv_u¨t_rx_dißbÀ
(
ƒf_drv_u¨t_t
 c⁄° * 
p_ö°™˚
);

393 
ƒf_drv_u¨t_rx_ab‹t
(
ƒf_drv_u¨t_t
 c⁄° * 
p_ö°™˚
);

404 
uöt32_t
 
ƒf_drv_u¨t_îr‹§c_gë
(
ƒf_drv_u¨t_t
 c⁄° * 
p_ö°™˚
);

406 #i‚de‡
SUPPRESS_INLINE_IMPLEMENTATION


407 
__STATIC_INLINE
 
uöt32_t
 
ƒf_drv_u¨t_èsk_addªss_gë
(
ƒf_drv_u¨t_t
 c⁄° * 
p_ö°™˚
,

408 
ƒf_u¨t_èsk_t
 
èsk
)

410 #ifde‡
UART_IN_USE


411  
ƒf_u¨t_èsk_addªss_gë
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
èsk
);

413  
ƒf_u¨ã_èsk_addªss_gë
(
p_ö°™˚
->
ªg
.
p_u¨ã
, (
ƒf_u¨ã_èsk_t
)
èsk
);

417 
__STATIC_INLINE
 
uöt32_t
 
ƒf_drv_u¨t_evít_addªss_gë
(
ƒf_drv_u¨t_t
 c⁄° * 
p_ö°™˚
,

418 
ƒf_u¨t_evít_t
 
evít
)

420 #ifde‡
UART_IN_USE


421  
ƒf_u¨t_evít_addªss_gë
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
evít
);

423  
ƒf_u¨ã_evít_addªss_gë
(
p_ö°™˚
->
ªg
.
p_u¨ã
, (
ƒf_u¨ã_evít_t
)
evít
);

428 #ifde‡
__˝lu•lus


	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\wdt\nrf_drv_wdt.c

41 
	~"sdk_comm⁄.h
"

42 #i‡
NRF_MODULE_ENABLED
(
WDT
)

43 
	~"ƒf_drv_wdt.h
"

44 
	~"ƒf_drv_comm⁄.h
"

45 
	~"ƒf_îr‹.h
"

46 
	~"ƒf_as£π.h
"

47 
	~"ƒf_wdt.h
"

48 
	~"≠p_utû_∂©f‹m.h
"

49 
	~<°dboﬁ.h
>

50 
	~<°döt.h
>

52 
	#NRF_LOG_MODULE_NAME
 "WDT"

	)

54 #i‡
WDT_CONFIG_LOG_ENABLED


55 
	#NRF_LOG_LEVEL
 
WDT_CONFIG_LOG_LEVEL


	)

56 
	#NRF_LOG_INFO_COLOR
 
WDT_CONFIG_INFO_COLOR


	)

57 
	#NRF_LOG_DEBUG_COLOR
 
WDT_CONFIG_DEBUG_COLOR


	)

59 
	#NRF_LOG_LEVEL
 0

	)

61 
	~"ƒf_log.h
"

62 
	~"ƒf_log_˘æ.h
"

66 
ƒf_wdt_evít_h™dÀr_t
 
	gm_wdt_evít_h™dÀr
;

69 
ƒf_drv_°©e_t
 
	gm_°©e
;

72 
uöt32_t
 
	gm_Æloc_ödex
;

74 c⁄° 
ƒf_drv_wdt_c⁄fig_t
 
	gm_deÁu…_c⁄fig
 = 
NRF_DRV_WDT_DEAFULT_CONFIG
;

77 
	$WDT_IRQH™dÀr
()

79 i‡(
	`ƒf_wdt_öt_íabÀ_check
(
NRF_WDT_INT_TIMEOUT_MASK
Ë=
åue
)

81 
	`ƒf_wdt_evít_˛ór
(
NRF_WDT_EVENT_TIMEOUT
);

82 
	`m_wdt_evít_h™dÀr
();

84 
	}
}

87 
ªt_code_t
 
	$ƒf_drv_wdt_öô
(
ƒf_drv_wdt_c⁄fig_t
 c⁄° * 
p_c⁄fig
,

88 
ƒf_wdt_evít_h™dÀr_t
 
wdt_evít_h™dÀr
)

90 
	`ASSERT
(
wdt_evít_h™dÀr
 !
NULL
);

91 
ªt_code_t
 
îr_code
;

92 
m_wdt_evít_h™dÀr
 = 
wdt_evít_h™dÀr
;

94 i‡(
m_°©e
 =
NRF_DRV_STATE_UNINITIALIZED
)

96 
m_°©e
 = 
NRF_DRV_STATE_INITIALIZED
;

100 
îr_code
 = 
NRF_ERROR_INVALID_STATE
;

101 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

102  
îr_code
;

105 i‡(
p_c⁄fig
 =
NULL
)

107 
p_c⁄fig
 = &
m_deÁu…_c⁄fig
;

110 
	`ƒf_wdt_behaviour_£t
(
p_c⁄fig
->
behaviour
);

118 
	`ƒf_wdt_ªlﬂd_vÆue_£t
((
p_c⁄fig
->
ªlﬂd_vÆue
 * 32768) / 1000);

120 
	`ƒf_drv_comm⁄_úq_íabÀ
(
WDT_IRQn
, 
p_c⁄fig
->
öãºu±_¥i‹ôy
);

122 
îr_code
 = 
NRF_SUCCESS
;

123 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

124  
îr_code
;

125 
	}
}

128 
	$ƒf_drv_wdt_íabÀ
()

130 
	`ASSERT
(
m_Æloc_ödex
 != 0);

131 
	`ASSERT
(
m_°©e
 =
NRF_DRV_STATE_INITIALIZED
);

132 
	`ƒf_wdt_öt_íabÀ
(
NRF_WDT_INT_TIMEOUT_MASK
);

133 
	`ƒf_wdt_èsk_åiggî
(
NRF_WDT_TASK_START
);

134 
m_°©e
 = 
NRF_DRV_STATE_POWERED_ON
;

135 
	`NRF_LOG_INFO
("Enabled.\r\n");

136 
	}
}

139 
	$ƒf_drv_wdt_„ed
()

141 
	`ASSERT
(
m_°©e
 =
NRF_DRV_STATE_POWERED_ON
);

142 
uöt32_t
 
i
 = 0; i < 
m_Æloc_ödex
; i++)

144 
	`ƒf_wdt_ªlﬂd_ªque°_£t
((
ƒf_wdt_º_ªgi°î_t
)(
NRF_WDT_RR0
 + 
i
));

146 
	}
}

148 
ªt_code_t
 
	$ƒf_drv_wdt_ch™√l_Æloc
(
ƒf_drv_wdt_ch™√l_id
 * 
p_ch™√l_id
)

150 
ªt_code_t
 
ªsu…
;

151 
	`ASSERT
(
p_ch™√l_id
);

152 
	`ASSERT
(
m_°©e
 =
NRF_DRV_STATE_INITIALIZED
);

154 
	`CRITICAL_REGION_ENTER
();

155 i‡(
m_Æloc_ödex
 < 
NRF_WDT_CHANNEL_NUMBER
)

157 *
p_ch™√l_id
 = (
ƒf_drv_wdt_ch™√l_id
)(
NRF_WDT_RR0
 + 
m_Æloc_ödex
);

158 
m_Æloc_ödex
++;

159 
	`ƒf_wdt_ªlﬂd_ªque°_íabÀ
(*
p_ch™√l_id
);

160 
ªsu…
 = 
NRF_SUCCESS
;

164 
ªsu…
 = 
NRF_ERROR_NO_MEM
;

166 
	`CRITICAL_REGION_EXIT
();

167 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
ªsu…
));

168  
ªsu…
;

169 
	}
}

171 
	$ƒf_drv_wdt_ch™√l_„ed
(
ƒf_drv_wdt_ch™√l_id
 
ch™√l_id
)

173 
	`ASSERT
(
m_°©e
 =
NRF_DRV_STATE_POWERED_ON
);

174 
	`ƒf_wdt_ªlﬂd_ªque°_£t
(
ch™√l_id
);

175 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\bootloader\dfu\nrf_dfu_mbr.c

41 
	~"ƒf_dfu_mbr.h
"

42 
	~"ƒf_mbr.h
"

43 
	~"ƒf_dfu_ty≥s.h
"

44 
	~"ƒf_log.h
"

46 
uöt32_t
 
	$ƒf_dfu_mbr_c›y_bl
(
uöt32_t
 * 
p_§c
, uöt32_à
Àn
)

48 
uöt32_t
 
ªt_vÆ
;

49 
uöt32_t
 c⁄° 
Àn_w‹ds
 = 
Àn
 / (uint32_t);

51 
sd_mbr_comm™d_t
 
comm™d
 =

53 .
comm™d
 = 
SD_MBR_COMMAND_COPY_BL
,

54 .
∑øms
.
c›y_bl
.
bl_§c
 = 
p_§c
,

55 .
∑øms
.
c›y_bl
.
bl_Àn
 = 
Àn_w‹ds


58 
ªt_vÆ
 = 
	`sd_mbr_comm™d
(&
comm™d
);

60  
ªt_vÆ
;

61 
	}
}

64 
uöt32_t
 
	$ƒf_dfu_mbr_c›y_sd
(
uöt32_t
 * 
p_d°
, uöt32_à* 
p_§c
, uöt32_à
Àn
)

66 
uöt32_t
 
ªt_vÆ
;

67 
uöt32_t
 c⁄° 
Àn_w‹ds
 = 
Àn
 / (uint32_t);

69 if((
Àn_w‹ds
 & (
CODE_PAGE_SIZE
 / (
uöt32_t
) - 1)) != 0)

70  
NRF_ERROR_INVALID_LENGTH
;

72 
sd_mbr_comm™d_t
 
comm™d
 =

74 .
comm™d
 = 
SD_MBR_COMMAND_COPY_SD
,

75 .
∑øms
.
c›y_sd
.
§c
 = 
p_§c
,

76 .
∑øms
.
c›y_sd
.
d°
 = 
p_d°
,

77 .
∑øms
.
c›y_sd
.
Àn
 = 
Àn_w‹ds


80 
ªt_vÆ
 = 
	`sd_mbr_comm™d
(&
comm™d
);

82  
ªt_vÆ
;

83 
	}
}

86 
uöt32_t
 
	$ƒf_dfu_mbr_öô_sd
()

88 
uöt32_t
 
ªt_vÆ
;

90 
sd_mbr_comm™d_t
 
comm™d
 =

92 .
comm™d
 = 
SD_MBR_COMMAND_INIT_SD


95 
ªt_vÆ
 = 
	`sd_mbr_comm™d
(&
comm™d
);

97  
ªt_vÆ
;

98 
	}
}

101 
uöt32_t
 
	$ƒf_dfu_mbr_com∑ª
(
uöt32_t
 * 
p_±r1
, uöt32_à* 
p_±r2
, uöt32_à
Àn
)

103 
uöt32_t
 
ªt_vÆ
;

104 
uöt32_t
 c⁄° 
Àn_w‹ds
 = 
Àn
 / (uint32_t);

106 
sd_mbr_comm™d_t
 
comm™d
 =

108 .
comm™d
 = 
SD_MBR_COMMAND_COMPARE
,

109 .
∑øms
.
com∑ª
.
±r1
 = 
p_±r1
,

110 .
∑øms
.
com∑ª
.
±r2
 = 
p_±r2
,

111 .
∑øms
.
com∑ª
.
Àn
 = 
Àn_w‹ds


114 
ªt_vÆ
 = 
	`sd_mbr_comm™d
(&
comm™d
);

116  
ªt_vÆ
;

117 
	}
}

120 
uöt32_t
 
	$ƒf_dfu_mbr_ve˘‹_èbÀ_£t
(
uöt32_t
 
addªss
)

122 
uöt32_t
 
ªt_vÆ
;

124 
	`NRF_LOG_INFO
("running vectorÅable set\r\n");

125 
sd_mbr_comm™d_t
 
comm™d
 =

127 .
comm™d
 = 
SD_MBR_COMMAND_VECTOR_TABLE_BASE_SET
,

128 .
∑øms
.
ba£_£t
.
addªss
 =áddress

131 
ªt_vÆ
 = 
	`sd_mbr_comm™d
(&
comm™d
);

132 
	`NRF_LOG_INFO
("AfterÑunning vectorÅable set\r\n");

134  
ªt_vÆ
;

135 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\bootloader\nrf_bootloader_app_start.c

41 
	~<°döt.h
>

42 
	~"ƒf_boŸlﬂdî_≠p_°¨t.h
"

43 
	~"compûî_ab°ø˘i⁄.h
"

44 
	~"ƒf_log.h
"

45 
	~"ƒf_dfu_mbr.h
"

46 
	~"ƒf_sdm.h
"

48 #i‡
deföed
 ( 
__CC_ARM
 )

49 
__ASM
 
	$ƒf_boŸlﬂdî_≠p_°¨t_im∂
(
uöt32_t
 
°¨t_addr
)

51 
LDR
 
R5
, [
R0
] ; 
Gë
 
Aµ
 
öôül
 
MSP
 
boŸlﬂdî
.

52 
MSR
 
MSP
, 
R5
 ; 
Së
 
the
 
maö
 
°ack
 
poöãr
 
to
Åhê
≠∂iˇti⁄s
 MSP.

53 
LDR
 
R0
, [R0, #0
x04
] ; 
Lﬂd
 
Re£t
 
h™dÀr
 
öto
 R0. 
This
 
wûl
 
be
 
fú°
 
¨gumít
 
to
 
bønch
 
	`ö°ru˘i⁄
 (
BX
).

55 
MOVS
 
R4
, #0
xFF
 ; 
Lﬂd
 
⁄es
 
to
 R4.

56 
SXTB
 
R4
, R4 ; 
Sign
 
exãnd
 R4 
to
 
obèö
 0xFFFFFFFF 
ö°ód
 
of
 0xFF.

57 
MRS
 
R5
, 
IPSR
 ; 
Lﬂd
 IPSR 
to
 R5Åÿ
check
 
h™dÀr
 
‹
 
thªad
 
mode
.

58 
CMP
 
R5
, #0
x00
 ; 
Com∑ª
, 0 
thí
 
we
 
¨e
 
ö
 
thªad
 
mode
 
™d
 
ˇn
  
to
 
ª£t
 
h™dÀr
 
of
 
boŸlﬂdî
.

59 
BNE
 
i§_ab‹t
 ; 
If
 
nŸ
 
zîo
 
we
 
√ed
 
to
 
exô
 
cuºít
 
ISR
 
™d
 
jump
Åÿ
ª£t
 
h™dÀr
 
of
 
boŸlﬂdî
.

61 
MOV
 
LR
, 
R4
 ; 
CÀ¨
 
the
 
lök
 
™d
 
£t
 
to
 
⁄es
Åÿ
ísuª
 
no
 , R4 = 0xFFFFFFFF.

62 
BX
 
R0
 ; 
Bønch
 
to
 
ª£t
 
h™dÀr
 
of
 
boŸlﬂdî
.

64 
i§_ab‹t


65 ; 
R4
 
c⁄èös
 
⁄es
 
‰om
 
löe
 
above
. 
Wûl
 
be
 
p›≥d
 
as
 
R12
 
whí
 
exôög
 
	`ISR
 (
CÀ™ög
 
up
 
the
 
ªgi°îs
).

66 
MOV
 
R5
, 
R4
 ; 
Fûl
 
wôh
 
⁄es
 
bef‹e
 
jumpög
 
to
 
ª£t
 
h™dlög
. 
We
 
be
 
p›≥d
 
as
 
LR
 
whí
 
exôög
 
ISR
. 
Ensuªs
 
no
 Åÿ
≠∂iˇti⁄
.

67 
MOV
 
R6
, 
R0
 ; 
Move
 
addªss
 
of
 
ª£t
 
h™dÀr
 
to
 R6. 
Wûl
 
be
 
p›≥d
 
as
 
PC
 
whí
 
exôög
 
ISR
. 
Ensuªs
 
the
Ñe£àh™dÀ∏
wûl
 bê
execuãd
 whí 
exi°
 ISR.

68 
MOVS
 
r7
, #0
x21
 ; 
Move
 
MSB
 
ª£t
 
vÆue
 
of
 
xPSR
 
to
 
R7
. 
Wûl
 
be
 
p›≥d
 
as
 xPSR 
whí
 
exôög
 
ISR
. xPSR 
is
 0x21000000 
thus
 MSB is 0x21.

69 
REV
 
r7
,Ñ7 ; 
Revî£
 
byã
 
‹dî
 
to
 
put
 0x21 
as
 
MSB
.

70 
PUSH
 {
r4
-
r7
} ; 
Push
 
evîythög
 
to
 
√w
 
°ack
Åÿ
Ælow
 
öãºu±
 
h™dÀr
Åÿ
„tch
 
ô
 
⁄
 
exôög
 
the
 
ISR
.

72 
MOVS
 
R4
, #0
x00
 ; 
Fûl
 
wôh
 
zîos
 
bef‹e
 
jumpög
 
to
 
ª£t
 
h™dlög
. 
We
 
be
 
p›≥d
 
as
 
R0
 
whí
 
exôög
 
	`ISR
 (
CÀ™ög
 
up
 
of
 
the
 
ªgi°îs
).

73 
MOVS
 
R5
, #0
x00
 ; 
Fûl
 
wôh
 
zîos
 
bef‹e
 
jumpög
 
to
 
ª£t
 
h™dlög
. 
We
 
be
 
p›≥d
 
as
 
R1
 
whí
 
exôög
 
	`ISR
 (
CÀ™ög
 
up
 
of
 
the
 
ªgi°îs
).

74 
MOVS
 
R6
, #0
x00
 ; 
Fûl
 
wôh
 
zîos
 
bef‹e
 
jumpög
 
to
 
ª£t
 
h™dlög
. 
We
 
be
 
p›≥d
 
as
 
R2
 
whí
 
exôög
 
	`ISR
 (
CÀ™ög
 
up
 
of
 
the
 
ªgi°îs
).

75 
MOVS
 
R7
, #0
x00
 ; 
Fûl
 
wôh
 
zîos
 
bef‹e
 
jumpög
 
to
 
ª£t
 
h™dlög
. 
We
 
be
 
p›≥d
 
as
 
R3
 
whí
 
exôög
 
	`ISR
 (
CÀ™ög
 
up
 
of
 
the
 
ªgi°îs
).

76 
PUSH
 {
r4
-
r7
} ; 
Push
 
	`zîos
 (
R4
-
R7
Ë
to
 
°ack
Åÿ
¥ï¨e
 
exôög
 
the
 
öãºu±
 
routöe
.

78 
MOVS
 
R0
, #0
xF9
 ; 
Move
 
the
 
executi⁄
  
comm™d
 
öto
 , 0xFFFFFFF9.

79 
SXTB
 
R0
, R0 ; 
Sign
 
exãnd
 R0 
to
 
obèö
 0xFFFFFFF9 
ö°ód
 
of
 0xF9.

80 
BX
 
R0
 ; 
No
  - 
H™dÀr
 
mode
 
wûl
 
be
 
exôed
. 
Sèck
 wû»bê
p›≥d
 
™d
 
executi⁄
 wû» 
ö
 
ª£t
 
h™dÀr
 
öôülizög
 
Ÿhî
 
≠∂iˇti⁄
.

81 
ALIGN


82 
	}
}

84 #ñi‡
deföed
 ( 
__GNUC__
 )

86 
__©åibuã__
 ((
noölöe
)Ë
	$ƒf_boŸlﬂdî_≠p_°¨t_im∂
(
uöt32_t
 
°¨t_addr
)

88 
__ASM
 volatile(

121 :: "r" (
°¨t_addr
)

124 
	}
}

126 #ñi‡
deföed
 ( 
__ICCARM__
 )

128 
ölöe
 
	$ƒf_boŸlﬂdî_≠p_°¨t_im∂
(
uöt32_t
 
°¨t_addr
)

130 
	`__ASM
("ldrÑ5, [%0]\n"

161 :: "r" (
°¨t_addr
)

163 
	}
}

167 #îr‹ 
Compûî
 
nŸ
 
suµ‹ãd
.

172 
	$ƒf_boŸlﬂdî_≠p_°¨t
(
uöt32_t
 
°¨t_addr
)

174 
	`NRF_LOG_INFO
("Ru¬ögÇrf_boŸlﬂdî_≠p_°¨àwôháddªss: 0x%08x\r\n", 
°¨t_addr
);

176 #ifde‡
BLE_STACK_SUPPORT_REQD


177 
uöt32_t
 
îr_code
;

180 
îr_code
 = 
	`ƒf_dfu_mbr_öô_sd
();

181 if(
îr_code
 !
NRF_SUCCESS
)

183 
	`NRF_LOG_INFO
("FailedÑunningÇrf_dfu_mbr_init_sd\r\n");

190 
	`NRF_LOG_INFO
("Disabling interrupts\r\n");

192 
NVIC
->
ICER
[0]=0xFFFFFFFF;

193 #i‡
	`deföed
(
__NRF_NVIC_ISER_COUNT
) && __NRF_NVIC_ISER_COUNT == 2

194 
NVIC
->
ICER
[1]=0xFFFFFFFF;

197 #ifde‡
BLE_STACK_SUPPORT_REQD


199 
	`NRF_LOG_INFO
("Sëtög SD ve˘‹ÅabÀ ba£: 0x%08x\r\n", 
°¨t_addr
);

200 
îr_code
 = 
	`sd_so·devi˚_ve˘‹_èbÀ_ba£_£t
(
°¨t_addr
);

201 if(
îr_code
 !
NRF_SUCCESS
)

203 
	`NRF_LOG_INFO
("FailedÑunning sd_softdevice_vector_table_base_set\r\n");

209 
	`ƒf_boŸlﬂdî_≠p_°¨t_im∂
(
°¨t_addr
);

210 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\fifo\app_fifo.c

40 
	~"sdk_comm⁄.h
"

41 #i‡
NRF_MODULE_ENABLED
(
APP_FIFO
)

42 
	~"≠p_fifo.h
"

44 
__INLINE
 
uöt32_t
 
	$fifo_Àngth
(
≠p_fifo_t
 * 
p_fifo
)

46 
uöt32_t
 
tmp
 = 
p_fifo
->
ªad_pos
;

47  
p_fifo
->
wrôe_pos
 - 
tmp
;

48 
	}
}

51 
	#FIFO_LENGTH
(Ë
	`fifo_Àngth
(
p_fifo
Ë

	)

55 
__INLINE
 
	$fifo_put
(
≠p_fifo_t
 * 
p_fifo
, 
uöt8_t
 
byã
)

57 
p_fifo
->
p_buf
[p_fifo->
wrôe_pos
 &Ö_fifo->
buf_size_mask
] = 
byã
;

58 
p_fifo
->
wrôe_pos
++;

59 
	}
}

63 
__INLINE
 
	$fifo_≥ek
(
≠p_fifo_t
 * 
p_fifo
, 
uöt16_t
 
ödex
, 
uöt8_t
 * 
p_byã
)

65 *
p_byã
 = 
p_fifo
->
p_buf
[’_fifo->
ªad_pos
 + 
ödex
Ë&Ö_fifo->
buf_size_mask
];

66 
	}
}

70 
__INLINE
 
	$fifo_gë
(
≠p_fifo_t
 * 
p_fifo
, 
uöt8_t
 * 
p_byã
)

72 
	`fifo_≥ek
(
p_fifo
, 0, 
p_byã
);

73 
p_fifo
->
ªad_pos
++;

74 
	}
}

77 
uöt32_t
 
	$≠p_fifo_öô
(
≠p_fifo_t
 * 
p_fifo
, 
uöt8_t
 * 
p_buf
, 
uöt16_t
 
buf_size
)

80 i‡(
p_buf
 =
NULL
)

82  
NRF_ERROR_NULL
;

86 i‡(!
	`IS_POWER_OF_TWO
(
buf_size
))

88  
NRF_ERROR_INVALID_LENGTH
;

91 
p_fifo
->
p_buf
 =Ö_buf;

92 
p_fifo
->
buf_size_mask
 = 
buf_size
 - 1;

93 
p_fifo
->
ªad_pos
 = 0;

94 
p_fifo
->
wrôe_pos
 = 0;

96  
NRF_SUCCESS
;

97 
	}
}

100 
uöt32_t
 
	$≠p_fifo_put
(
≠p_fifo_t
 * 
p_fifo
, 
uöt8_t
 
byã
)

102 i‡(
	`FIFO_LENGTH
(Ë<
p_fifo
->
buf_size_mask
)

104 
	`fifo_put
(
p_fifo
, 
byã
);

105  
NRF_SUCCESS
;

108  
NRF_ERROR_NO_MEM
;

109 
	}
}

112 
uöt32_t
 
	$≠p_fifo_gë
(
≠p_fifo_t
 * 
p_fifo
, 
uöt8_t
 * 
p_byã
)

114 i‡(
	`FIFO_LENGTH
() != 0)

116 
	`fifo_gë
(
p_fifo
, 
p_byã
);

117  
NRF_SUCCESS
;

120  
NRF_ERROR_NOT_FOUND
;

122 
	}
}

125 
uöt32_t
 
	$≠p_fifo_≥ek
(
≠p_fifo_t
 * 
p_fifo
, 
uöt16_t
 
ödex
, 
uöt8_t
 * 
p_byã
)

127 i‡(
	`FIFO_LENGTH
(Ë> 
ödex
)

129 
	`fifo_≥ek
(
p_fifo
, 
ödex
, 
p_byã
);

130  
NRF_SUCCESS
;

133  
NRF_ERROR_NOT_FOUND
;

134 
	}
}

137 
uöt32_t
 
	$≠p_fifo_Êush
(
≠p_fifo_t
 * 
p_fifo
)

139 
p_fifo
->
ªad_pos
 =Ö_fifo->
wrôe_pos
;

140  
NRF_SUCCESS
;

141 
	}
}

144 
uöt32_t
 
	$≠p_fifo_ªad
(
≠p_fifo_t
 * 
p_fifo
, 
uöt8_t
 * 
p_byã_¨øy
, 
uöt32_t
 * 
p_size
)

146 
	`VERIFY_PARAM_NOT_NULL
(
p_fifo
);

147 
	`VERIFY_PARAM_NOT_NULL
(
p_size
);

149 c⁄° 
uöt32_t
 
byã_cou¡
 = 
	`fifo_Àngth
(
p_fifo
);

150 c⁄° 
uöt32_t
 
ªque°ed_Àn
 = (*
p_size
);

151 
uöt32_t
 
ödex
 = 0;

152 
uöt32_t
 
ªad_size
 = 
	`MIN
(
ªque°ed_Àn
, 
byã_cou¡
);

154 (*
p_size
Ë
byã_cou¡
;

157 i‡(
byã_cou¡
 == 0)

159  
NRF_ERROR_NOT_FOUND
;

163 i‡(
p_byã_¨øy
 =
NULL
)

165  
NRF_SUCCESS
;

169 
ödex
 < 
ªad_size
)

171 
	`fifo_gë
(
p_fifo
, &
p_byã_¨øy
[
ödex
++]);

174 (*
p_size
Ë
ªad_size
;

176  
NRF_SUCCESS
;

177 
	}
}

180 
uöt32_t
 
	$≠p_fifo_wrôe
(
≠p_fifo_t
 * 
p_fifo
, 
uöt8_t
 c⁄° * 
p_byã_¨øy
, 
uöt32_t
 * 
p_size
)

182 
	`VERIFY_PARAM_NOT_NULL
(
p_fifo
);

183 
	`VERIFY_PARAM_NOT_NULL
(
p_size
);

185 c⁄° 
uöt32_t
 
avaûabÀ_cou¡
 = 
p_fifo
->
buf_size_mask
 - 
	`fifo_Àngth
(p_fifo) + 1;

186 c⁄° 
uöt32_t
 
ªque°ed_Àn
 = (*
p_size
);

187 
uöt32_t
 
ödex
 = 0;

188 
uöt32_t
 
wrôe_size
 = 
	`MIN
(
ªque°ed_Àn
, 
avaûabÀ_cou¡
);

190 (*
p_size
Ë
avaûabÀ_cou¡
;

193 i‡(
avaûabÀ_cou¡
 == 0)

195  
NRF_ERROR_NO_MEM
;

199 i‡(
p_byã_¨øy
 =
NULL
)

201  
NRF_SUCCESS
;

205 
ödex
 < 
wrôe_size
)

207 
	`fifo_put
(
p_fifo
, 
p_byã_¨øy
[
ödex
++]);

210 (*
p_size
Ë
wrôe_size
;

212  
NRF_SUCCESS
;

213 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\log\src\nrf_log_backend_serial.c

40 
	~"sdk_comm⁄.h
"

41 #i‡
NRF_MODULE_ENABLED
(
NRF_LOG
)

42 
	~"ƒf_log_backíd.h
"

43 
	~"ƒf_îr‹.h
"

44 
	~<°d¨g.h
>

45 
	~<°rög.h
>

46 
	~<°dio.h
>

47 
	~<˘y≥.h
>

49 #i‡
NRF_LOG_BACKEND_SERIAL_USES_RTT


50 
	~<SEGGER_RTT_C⁄f.h
>

51 
	~<SEGGER_RTT.h
>

54 #i‡
NRF_LOG_BACKEND_SERIAL_USES_UART


55 
	~"ƒf_drv_u¨t.h
"

58 #i‡
NRF_LOG_BACKEND_SERIAL_USES_UART


59 
	gm_u¨t_buf„r
[
NRF_LOG_BACKEND_MAX_STRING_LENGTH
];

60 
ƒf_drv_u¨t_t
 
	gm_u¨t
 = 
NRF_DRV_UART_INSTANCE
(
NRF_LOG_BACKEND_UART_INSTANCE
);

62 #i‡!
NRF_MODULE_ENABLED
(
UART
)

68 
	#HEXDUMP_BYTES_PER_LINE
 16

	)

69 
	#HEXDUMP_HEXBYTE_AREA
 3

70 
	#TIMESTAMP_STR
(
vÆ
Ë"[%0" 
	`NUM_TO_STR
(vÆË"d]"

	)

72 
	#RTT_RETRY_COUNTER
 10

73 

	)

74 
	#HEXDUMP_MAX_STR_LEN
 (
NRF_LOG_BACKEND_MAX_STRING_LENGTH
 - \

75 (
HEXDUMP_HEXBYTE_AREA
*
HEXDUMP_BYTES_PER_LINE
 +\

76 
NRF_LOG_TIMESTAMP_DIGITS
 + \

78 2)Ë

	)

80 
boﬁ
 
	gm_öôülized
 = 
Ál£
;

81 
boﬁ
 
	gm_blockög_mode
 = 
Ál£
;

82 c⁄° 
	gm_deÁu…_cﬁ‹
[] = "\x1B[0m";

84 #i‡(
NRF_LOG_BACKEND_SERIAL_USES_UART
)

85 vﬁ©ûê
boﬁ
 
	gm_rx_d⁄e
 = 
Ál£
;

88 #i‡(
NRF_LOG_BACKEND_SERIAL_USES_UART
)

89 
	$u¨t_evít_h™dÀr
(
ƒf_drv_u¨t_evít_t
 * 
p_evít
, * 
p_c⁄ãxt
)

92 i‡(
p_evít
->
ty≥
 =
NRF_DRV_UART_EVT_RX_DONE
)

94 
m_rx_d⁄e
 = 
åue
;

96 
	}
}

100 
ªt_code_t
 
	$ƒf_log_backíd_öô
(
boﬁ
 
blockög
)

103 i‡(
m_öôülized
 && (
blockög
 =
m_blockög_mode
))

105  
NRF_SUCCESS
;

107 #i‡(
NRF_LOG_BACKEND_SERIAL_USES_RTT
)

108 
	`SEGGER_RTT_Inô
();

111 #i‡(
NRF_LOG_BACKEND_SERIAL_USES_UART
)

112 
uöt32_t
 
ªt_code
;

113 
ƒf_drv_u¨t_c⁄fig_t
 
u¨t_c⁄fig
 = 
NRF_DRV_UART_DEFAULT_CONFIG
;

114 
u¨t_c⁄fig
.
hwfc
 =

115 (
ƒf_u¨t_hwfc_t
)
NRF_LOG_BACKEND_SERIAL_UART_FLOW_CONTROL
;

116 
u¨t_c⁄fig
.
p£…xd
 = 
NRF_LOG_BACKEND_SERIAL_UART_TX_PIN
;

117 
u¨t_c⁄fig
.
p£Ãxd
 = 
NRF_LOG_BACKEND_SERIAL_UART_RX_PIN
;

118 
u¨t_c⁄fig
.
p£Ãts
 = 
NRF_LOG_BACKEND_SERIAL_UART_RTS_PIN
;

119 
u¨t_c⁄fig
.
p£l˘s
 = 
NRF_LOG_BACKEND_SERIAL_UART_CTS_PIN
;

120 
u¨t_c⁄fig
.
baudøã
 =

121 (
ƒf_u¨t_baudøã_t
)
NRF_LOG_BACKEND_SERIAL_UART_BAUDRATE
;

122 
	`ƒf_drv_u¨t_unöô
(&
m_u¨t
);

123 
ªt_code
 = 
	`ƒf_drv_u¨t_öô
(&
m_u¨t
, &
u¨t_c⁄fig
,

124 
blockög
 ? 
NULL
 : 
u¨t_evít_h™dÀr
);

125 i‡(
ªt_code
 !
NRF_SUCCESS
)

127  
ªt_code
;

131 
m_öôülized
 = 
åue
;

132 
m_blockög_mode
 = 
blockög
;

133  
NRF_SUCCESS
;

134 
	}
}

137 
boﬁ
 
	$£rül_is_busy
()

139 
boﬁ
 
ªs
 = 
Ál£
;

141 #i‡(
NRF_LOG_BACKEND_SERIAL_USES_UART
)

142 
ªs
 = 
	`ƒf_drv_u¨t_tx_ö_¥ogªss
(&
m_u¨t
);

145 #i‡(
NRF_LOG_BACKEND_SERIAL_USES_RTT
)

149  
ªs
;

150 
	}
}

153 
boﬁ
 
	$£rül_tx
(
uöt8_t
 * 
p_buf
, 
uöt32_t
 
Àn
)

155 
boﬁ
 
ªt
 = 
åue
;

157 #i‡
NRF_LOG_BACKEND_SERIAL_USES_UART


158 
	`mem˝y
(
m_u¨t_buf„r
, 
p_buf
, 
Àn
);

159 
uöt32_t
 
ªt_code
 = 
	`ƒf_drv_u¨t_tx
(&
m_u¨t
, (
uöt8_t
 *)
m_u¨t_buf„r
, 
Àn
);

160 i‡(
ªt_code
 !
NRF_SUCCESS
)

162 
ªt
 = 
Ál£
;

166 #i‡
NRF_LOG_BACKEND_SERIAL_USES_RTT


167 
uöt32_t
 
idx
 = 0;

168 
uöt32_t
 
Àngth
 = 
Àn
;

169 
uöt32_t
 
¥o˚s£d
;

170 
uöt32_t
 
w©chdog_cou¡î
 = 
RTT_RETRY_COUNTER
;

173 
¥o˚s£d
 = 
	`SEGGER_RTT_WrôeNoLock
(0, &
p_buf
[
idx
], 
Àngth
);

174 
idx
 +
¥o˚s£d
;

175 
Àngth
 -
¥o˚s£d
;

176 i‡(
¥o˚s£d
 == 0)

179 
w©chdog_cou¡î
--;

180 i‡(
w©chdog_cou¡î
 == 0)

185 } 
Àngth
);

187  
ªt
;

188 
	}
}

191 
uöt8_t
 
	$£rül_gë_byã
()

193 
uöt8_t
 
d©a
;

194 #i‡
NRF_LOG_BACKEND_SERIAL_USES_UART


195 i‡(
m_blockög_mode
)

197 ()
	`ƒf_drv_u¨t_rx
(&
m_u¨t
, &
d©a
, 1);

201 
m_rx_d⁄e
 = 
Ál£
;

202 ()
	`ƒf_drv_u¨t_rx
(&
m_u¨t
, &
d©a
, 1);

203 !
m_rx_d⁄e
);

205 #ñi‡
NRF_LOG_BACKEND_SERIAL_USES_RTT


206 
d©a
 = (
uöt8_t
)
	`SEGGER_RTT_WaôKey
();

208  
d©a
;

209 
	}
}

212 
boﬁ
 
	$buf_Àn_upd©e
(
uöt32_t
 * 
p_buf_Àn
, 
öt32_t
 
√w_Àn
)

214 
boﬁ
 
ªt
;

215 i‡(
√w_Àn
 < 0)

217 
ªt
 = 
Ál£
;

221 *
p_buf_Àn
 +(
uöt32_t
)
√w_Àn
;

222 
ªt
 = 
åue
;

224  
ªt
;

225 
	}
}

228 
boﬁ
 
	$time°amp_¥o˚ss
(c⁄° 
uöt32_t
 * c⁄° 
p_time°amp
, * 
p_°r
, uöt32_à* 
p_Àn
)

230 
öt32_t
 
Àn
 = 0;

231 
boﬁ
 
ªt
 = 
åue
;

232 i‡(
p_time°amp
)

234 #i‡
NRF_LOG_USES_COLORS


235 
Àn
 = (
m_deÁu…_cﬁ‹
) - 1;

236 
	`mem˝y
(
p_°r
, 
m_deÁu…_cﬁ‹
, 
Àn
);

237 *
p_Àn
 +
Àn
;

239 
Àn
 = 
	`¢¥ötf
(&
p_°r
[Àn],
NRF_LOG_BACKEND_MAX_STRING_LENGTH
, 
	`TIMESTAMP_STR
(
NRF_LOG_TIMESTAMP_DIGITS
), ()*
p_time°amp
);

240 
ªt
 = 
	`buf_Àn_upd©e
(
p_Àn
, 
Àn
);

244 *
p_Àn
 = 0;

246  
ªt
;

247 
	}
}

250 
boﬁ
 
	$ƒf_log_backíd_£rül_°d_h™dÀr
(

251 
uöt8_t
 
£vîôy_Àvñ
,

252 c⁄° 
uöt32_t
 * c⁄° 
p_time°amp
,

253 c⁄° * c⁄° 
p_°r
,

254 
uöt32_t
 * 
p_¨gs
,

255 
uöt32_t
 
«rgs
)

257 
°r
[
NRF_LOG_BACKEND_MAX_STRING_LENGTH
];

258 
öt32_t
 
tmp_°r_Àn
 = 0;

259 
uöt32_t
 
buf„r_Àn
 = 0;

260 
boﬁ
 
°©us
 = 
åue
;

262 i‡(
	`£rül_is_busy
())

264  
Ál£
;

267 i‡(!
	`time°amp_¥o˚ss
(
p_time°amp
, &
°r
[
buf„r_Àn
], &buffer_len))

269  
Ál£
;

272 
«rgs
)

276 
tmp_°r_Àn
 = 
	`°æí
(
p_°r
);

277 i‡((
tmp_°r_Àn
 + 
buf„r_Àn
Ë< 
NRF_LOG_BACKEND_MAX_STRING_LENGTH
)

279 
	`mem˝y
(&
°r
[
buf„r_Àn
], 
p_°r
, 
tmp_°r_Àn
);

285 
tmp_°r_Àn
 = 
	`¢¥ötf
(&
°r
[
buf„r_Àn
], 
NRF_LOG_BACKEND_MAX_STRING_LENGTH
-buf„r_Àn, 
p_°r
, 
p_¨gs
[0]);

290 
tmp_°r_Àn
 = 
	`¢¥ötf
(&
°r
[
buf„r_Àn
], 
NRF_LOG_BACKEND_MAX_STRING_LENGTH
-buf„r_Àn, 
p_°r
, 
p_¨gs
[0],Ö_args[1]);

294 
tmp_°r_Àn
 = 
	`¢¥ötf
(&
°r
[
buf„r_Àn
], 
NRF_LOG_BACKEND_MAX_STRING_LENGTH
-buf„r_Àn, 
p_°r
, 
p_¨gs
[0],Ö_args[1],Ö_args[2]);

298 
tmp_°r_Àn
 =

299 
	`¢¥ötf
(&
°r
[
buf„r_Àn
], 
NRF_LOG_BACKEND_MAX_STRING_LENGTH
-buf„r_Àn, 
p_°r
, 
p_¨gs
[0],Ö_args[1],Ö_args[2],Ö_args[3]);

303 
tmp_°r_Àn
 =

304 
	`¢¥ötf
(&
°r
[
buf„r_Àn
],

305 
NRF_LOG_BACKEND_MAX_STRING_LENGTH
-
buf„r_Àn
,

306 
p_°r
,

307 
p_¨gs
[0],

308 
p_¨gs
[1],

309 
p_¨gs
[2],

310 
p_¨gs
[3],

311 
p_¨gs
[4]);

315 
tmp_°r_Àn
 =

316 
	`¢¥ötf
(&
°r
[
buf„r_Àn
],

317 
NRF_LOG_BACKEND_MAX_STRING_LENGTH
-
buf„r_Àn
,

318 
p_°r
,

319 
p_¨gs
[0],

320 
p_¨gs
[1],

321 
p_¨gs
[2],

322 
p_¨gs
[3],

323 
p_¨gs
[4],

324 
p_¨gs
[5]);

330 
°©us
 = 
	`buf_Àn_upd©e
(&
buf„r_Àn
, 
tmp_°r_Àn
);

331 
uöt32_t
 
fuŒ_buff_Àn
 = 
NRF_LOG_USES_COLORS
 ?

332 
buf„r_Àn
 + (
m_deÁu…_cﬁ‹
)-1 : buffer_len;

333 i‡(
°©us
 && (
fuŒ_buff_Àn
 <
NRF_LOG_BACKEND_MAX_STRING_LENGTH
))

335 i‡(
NRF_LOG_USES_COLORS
)

337 
	`mem˝y
(&
°r
[
buf„r_Àn
], 
m_deÁu…_cﬁ‹
, (m_default_color)-1);

338 
buf„r_Àn
 = 
fuŒ_buff_Àn
;

340  
	`£rül_tx
((
uöt8_t
 *)
°r
, 
buf„r_Àn
);

345  
Ál£
;

347 
	}
}

350 
	$byã2hex
(c⁄° 
uöt8_t
 
c
, * 
p_out
)

352 
uöt8_t
 
nibbÀ
;

353 
uöt32_t
 
i
 = 2;

355 
i
-- != 0)

357 
nibbÀ
 = (
c
 >> (4 * 
i
)) & 0x0F;

358 
p_out
[1 - 
i
] = (
nibbÀ
 > 9) ? ('A' +Çibble - 10) : ('0' +Çibble);

360 
	}
}

363 
uöt32_t
 
	$ƒf_log_backíd_£rül_hexdump_h™dÀr
(

364 
uöt8_t
 
£vîôy_Àvñ
,

365 c⁄° 
uöt32_t
 * c⁄° 
p_time°amp
,

366 c⁄° * c⁄° 
p_°r
,

367 
uöt32_t
 
off£t
,

368 c⁄° 
uöt8_t
 * c⁄° 
p_buf0
,

369 
uöt32_t
 
buf0_Àngth
,

370 c⁄° 
uöt8_t
 * c⁄° 
p_buf1
,

371 
uöt32_t
 
buf1_Àngth
)

373 
°r
[
NRF_LOG_BACKEND_MAX_STRING_LENGTH
];

374 
uöt32_t
 
¶í
;

375 * 
p_hex_∑π
;

376 * 
p_ch¨_∑π
;

377 
uöt8_t
 
c
;

378 
uöt32_t
 
byã_ö_löe
;

379 
uöt32_t
 
buf„r_Àn
 = 0;

380 
uöt32_t
 
byã_˙t
 = 
off£t
;

381 
uöt32_t
 
Àngth
 = 
buf0_Àngth
 + 
buf1_Àngth
;

382 
uöt32_t
 
time°amp_Àn
 = 
p_time°amp
 ?

383 
NRF_LOG_TIMESTAMP_DIGITS
+2 : 0;

385 i‡(
	`£rül_is_busy
())

387  
off£t
;

391 i‡(
off£t
 == 0)

393 i‡(!
	`time°amp_¥o˚ss
(
p_time°amp
, &
°r
[
buf„r_Àn
], &buffer_len))

395  
off£t
;

397 
¶í
 = 
	`°æí
(
p_°r
);

399 
¶í
 = (¶í > 
HEXDUMP_MAX_STR_LEN
) ? HEXDUMP_MAX_STR_LEN : slen;

400 
	`mem˝y
(&
°r
[
buf„r_Àn
], 
p_°r
, 
¶í
);

401 
buf„r_Àn
 +
¶í
;

407 
uöt32_t
 
i
;

408 
uöt32_t
 
hex_∑π_off£t
 = 
buf„r_Àn
;

409 
uöt32_t
 
ch¨_∑π_off£t
 = 
hex_∑π_off£t
 +

410 (
HEXDUMP_BYTES_PER_LINE
 * 
HEXDUMP_HEXBYTE_AREA
 + 1) +

411 
time°amp_Àn
;

413 
p_hex_∑π
 = &
°r
[
hex_∑π_off£t
];

414 
p_ch¨_∑π
 = &
°r
[
ch¨_∑π_off£t
];

417 
i
 = 0; i < 
time°amp_Àn
; i++)

419 *
p_hex_∑π
 = ' ';

420 ++
p_hex_∑π
;

423 
byã_ö_löe
 = 0; byã_ö_löê< 
HEXDUMP_BYTES_PER_LINE
; byte_in_line++)

425 i‡(
byã_˙t
 >
Àngth
)

428 *
p_hex_∑π
++ = ' ';

429 *
p_hex_∑π
++ = ' ';

430 *
p_hex_∑π
++ = ' ';

431 *
p_ch¨_∑π
++ = ' ';

435 i‡(
byã_˙t
 < 
buf0_Àngth
)

437 
c
 = 
p_buf0
[
byã_˙t
];

441 
c
 = 
p_buf1
[
byã_˙t
 - 
buf0_Àngth
];

443 
	`byã2hex
(
c
, 
p_hex_∑π
);

444 
p_hex_∑π
 += 2;

445 *
p_hex_∑π
++ = ' ';

446 *
p_ch¨_∑π
++ = 
	`i•röt
(
c
) ? c : '.';

447 
byã_˙t
++;

450 *
p_ch¨_∑π
++ = '\r';

451 *
p_ch¨_∑π
++ = '\n';

452 *
p_hex_∑π
++ = ' ';

453 
buf„r_Àn
 +
time°amp_Àn
 +

454 (
HEXDUMP_BYTES_PER_LINE
 * 
HEXDUMP_HEXBYTE_AREA
 + 1) +

455 
HEXDUMP_BYTES_PER_LINE
 +

457 i‡(
NRF_LOG_USES_COLORS
)

459 
	`mem˝y
(&
°r
[
buf„r_Àn
], 
m_deÁu…_cﬁ‹
, (m_default_color)-1);

460 
buf„r_Àn
 +(
m_deÁu…_cﬁ‹
)-1;

463 i‡(!
	`£rül_tx
((
uöt8_t
 *)
°r
, 
buf„r_Àn
))

465  
byã_˙t
;

468 i‡(
	`£rül_is_busy
())

470  
byã_˙t
;

472 
buf„r_Àn
 = 0;

474 
byã_˙t
 < 
Àngth
);

475  
byã_˙t
;

476 
	}
}

479 
ƒf_log_°d_h™dÀr_t
 
	$ƒf_log_backíd_°d_h™dÀr_gë
()

481  
ƒf_log_backíd_£rül_°d_h™dÀr
;

482 
	}
}

485 
ƒf_log_hexdump_h™dÀr_t
 
	$ƒf_log_backíd_hexdump_h™dÀr_gë
()

487  
ƒf_log_backíd_£rül_hexdump_h™dÀr
;

488 
	}
}

491 
uöt8_t
 
	$ƒf_log_backíd_gëch¨
()

493  
	`£rül_gë_byã
();

494 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\log\src\nrf_log_frontend.c

40 
	~"sdk_comm⁄.h
"

41 #i‡
NRF_MODULE_ENABLED
(
NRF_LOG
)

42 
	~"≠p_utû.h
"

43 
	~"≠p_utû_∂©f‹m.h
"

44 
	~"ƒf_log.h
"

45 
	~"ƒf_log_öã∫Æ.h
"

46 
	~"ƒf_log_backíd.h
"

47 
	~"ƒf_log_˘æ.h
"

48 
	~<°rög.h
>

50 #i‡
NRF_LOG_DEFERRED


51 
STATIC_ASSERT
((
NRF_LOG_DEFERRED_BUFSIZE
 =0Ë|| 
IS_POWER_OF_TWO
(NRF_LOG_DEFERRED_BUFSIZE));

53 
	#NRF_LOG_DEFERRED_BUFSIZE
 1

	)

66 
uöt32_t
 
	mwr_idx
;

67 
uöt32_t
 
	mrd_idx
;

68 
uöt32_t
 
	mmask
;

69 
uöt32_t
 
	mbuf„r
[
NRF_LOG_DEFERRED_BUFSIZE
];

70 
ƒf_log_time°amp_func_t
 
	mtime°amp_func
;

71 
ƒf_log_°d_h™dÀr_t
 
	m°d_h™dÀr
;

72 
ƒf_log_hexdump_h™dÀr_t
 
	mhexdump_h™dÀr
;

73 } 
	tlog_d©a_t
;

75 
log_d©a_t
 
	gm_log_d©a
;

76 #i‡(
NRF_LOG_DEFERRED
 == 1)

77 c⁄° * 
	gm_ovîÊow_öfo
 = 
NRF_LOG_ERROR_COLOR_CODE
 "Overflow\r\n";

137 
	#HEADER_SIZE
 ((
NRF_LOG_USES_TIMESTAMP
Ë? 2 : 1)

	)

139 
	#STD_ADDR_MASK
 ((
uöt32_t
)(1U << 22Ë- 1U)

	)

140 
	#HEADER_TYPE_STD
 1U

	)

141 
	#HEADER_TYPE_HEXDUMP
 2U

	)

142 
	#HEADER_TYPE_PUSHED
 0U

	)

146 
uöt32_t
 
	mty≥
 : 2;

147 
uöt32_t
 
	møw
 : 1;

148 
uöt32_t
 
	md©a
 : 29;

149 } 
	tƒf_log_gíîic_hódî_t
;

153 
uöt32_t
 
	mty≥
 : 2;

154 
uöt32_t
 
	møw
 : 1;

155 
uöt32_t
 
	m£vîôy
 : 3;

156 
uöt32_t
 
	m«rgs
 : 4;

157 
uöt32_t
 
	maddr
 : 22;

158 } 
	tƒf_log_°d_hódî_t
;

162 
uöt32_t
 
	mty≥
 : 2;

163 
uöt32_t
 
	møw
 : 1;

164 
uöt32_t
 
	m£vîôy
 : 3;

165 
uöt32_t
 
	moff£t
 : 10;

166 
uöt32_t
 
	mª£rved
 : 6;

167 
uöt32_t
 
	mÀn
 : 10;

168 } 
	tƒf_log_hexdump_hódî_t
;

172 
uöt32_t
 
	mty≥
 : 2;

173 
uöt32_t
 
	mª£rved0
 : 4;

174 
uöt32_t
 
	moff£t
 : 10;

175 
uöt32_t
 
	mª£rved1
 : 6;

176 
uöt32_t
 
	mÀn
 : 10;

177 } 
	tƒf_log_pushed_hódî_t
;

181 
ƒf_log_gíîic_hódî_t
 
	mgíîic
;

182 
ƒf_log_°d_hódî_t
 
	m°d
;

183 
ƒf_log_hexdump_hódî_t
 
	mhexdump
;

184 
ƒf_log_pushed_hódî_t
 
	mpushed
;

185 
uöt32_t
 
	møw
;

186 } 
	tƒf_log_hódî_t
;

189 #i‡
deföed
 ( 
__ICCARM__
 )

190 
	#STD_HEADER_DEF
(
NAME
, 
P_STR
, 
SEVERITY
, 
NARGS
) \

191 
ƒf_log_hódî_t
 
NAME
 = { \

192 .
°d
 = { \

193 .
ty≥
 = 
HEADER_TYPE_STD
, \

196 
NAME
.
°d
.
ty≥
 = 
HEADER_TYPE_STD
; \

197 
NAME
.
°d
.
øw
 = ((
SEVERITY
Ë& 
NRF_LOG_RAW
); \

198 
NAME
.
°d
.
£vîôy
 = (
SEVERITY
Ë& 
NRF_LOG_LEVEL_MASK
; \

199 
NAME
.
°d
.
«rgs
 = (
NARGS
); \

200 
NAME
.
°d
.
addr
 = ((
uöt32_t
)(
P_STR
Ë& 
STD_ADDR_MASK
)

	)

202 
	#STD_HEADER_DEF
(
NAME
, 
P_STR
, 
SEVERITY
, 
NARGS
) \

203 
ƒf_log_hódî_t
 
NAME
 = { \

204 .
°d
 = { \

205 .
ty≥
 = 
HEADER_TYPE_STD
, \

206 .
øw
 = ((
SEVERITY
Ë& 
NRF_LOG_RAW
), \

207 .
£vîôy
 = (
SEVERITY
Ë& 
NRF_LOG_LEVEL_MASK
, \

208 .
«rgs
 = (
NARGS
), \

209 .
addr
 = ((
uöt32_t
)(
P_STR
Ë& 
STD_ADDR_MASK
)\

211 }

	)

214 #i‡
deföed
 ( 
__ICCARM__
 )

215 
	#HEXDUMP_HEADER_DEF
(
NAME
, 
SEVERITY
, 
LENGTH
) \

216 
ƒf_log_hódî_t
 
NAME
 = { \

217 .
hexdump
 = { \

218 .
ty≥
 = 
HEADER_TYPE_HEXDUMP
, \

219 .
off£t
 = 0, \

222 
NAME
.
hexdump
.
øw
 = ((
SEVERITY
Ë& 
NRF_LOG_RAW
); \

223 
NAME
.
hexdump
.
£vîôy
 = (
SEVERITY
Ë& 
NRF_LOG_LEVEL_MASK
;\

224 
NAME
.
hexdump
.
Àn
 = (
LENGTH
)

	)

227 
	#HEXDUMP_HEADER_DEF
(
NAME
, 
SEVERITY
, 
LENGTH
) \

228 
ƒf_log_hódî_t
 
NAME
 = { \

229 .
hexdump
 = { \

230 .
ty≥
 = 
HEADER_TYPE_HEXDUMP
, \

231 .
øw
 = ((
SEVERITY
Ë& 
NRF_LOG_RAW
), \

232 .
£vîôy
 = (
SEVERITY
Ë& 
NRF_LOG_LEVEL_MASK
, \

233 .
off£t
 = 0, \

234 .
Àn
 = 
LENGTH
, \

236 }

	)

239 #i‡
deföed
 ( 
__ICCARM__
 )

240 
	#PUSHED_HEADER_DEF
(
NAME
, 
OFFSET
, 
LENGTH
) \

241 
ƒf_log_hódî_t
 
NAME
 = { \

242 .
pushed
 = { \

243 .
ty≥
 = 
HEADER_TYPE_PUSHED
, \

246 
NAME
.
pushed
.
off£t
 = (
OFFSET
); \

247 
NAME
.
pushed
.
Àn
 = (
LENGTH
)

	)

250 
	#PUSHED_HEADER_DEF
(
NAME
, 
OFFSET
, 
LENGTH
) \

251 
ƒf_log_hódî_t
 
NAME
 = { \

252 .
pushed
 = { \

253 .
ty≥
 = 
HEADER_TYPE_PUSHED
, \

254 .
off£t
 = (
OFFSET
), \

255 .
Àn
 = (
LENGTH
), \

257 }

	)

261 
ªt_code_t
 
	$ƒf_log_öô
(
ƒf_log_time°amp_func_t
 
time°amp_func
)

263 i‡(
NRF_LOG_USES_TIMESTAMP
 && (
time°amp_func
 =
NULL
))

265  
NRF_ERROR_INVALID_PARAM
;

268 
ªt_code_t
 
îr_code
 = 
	`ƒf_log_backíd_öô
(
NRF_LOG_DEFERRED
 ? 
Ál£
 : 
åue
);

270 i‡(
îr_code
 =
NRF_SUCCESS
)

272 
	`ƒf_log_‰⁄ãnd_öô
(
	`ƒf_log_backíd_°d_h™dÀr_gë
(),

273 
	`ƒf_log_backíd_hexdump_h™dÀr_gë
(),

274 
time°amp_func
);

276  
îr_code
;

277 
	}
}

280 
ªt_code_t
 
	$ƒf_log_blockög_backíd_£t
()

283  
	`ƒf_log_backíd_öô
(
åue
);

284 
	}
}

287 
	$ƒf_log_‰⁄ãnd_öô
(
ƒf_log_°d_h™dÀr_t
 
°d_h™dÀr
,

288 
ƒf_log_hexdump_h™dÀr_t
 
hexdump_h™dÀr
,

289 
ƒf_log_time°amp_func_t
 
time°amp_func
)

291 #i‡
NRF_LOG_DEFERRED


292 
m_log_d©a
.
mask
 = 
NRF_LOG_DEFERRED_BUFSIZE
 - 1;

293 
m_log_d©a
.
wr_idx
 = 0;

294 
m_log_d©a
.
rd_idx
 = 0;

296 #i‡
NRF_LOG_USES_TIMESTAMP


297 
m_log_d©a
.
time°amp_func
 =Åimestamp_func;

299 
	`ƒf_log_h™dÀrs_£t
(
°d_h™dÀr
, 
hexdump_h™dÀr
);

300 
	}
}

303 
	$ƒf_log_h™dÀrs_£t
(
ƒf_log_°d_h™dÀr_t
 
°d_h™dÀr
,

304 
ƒf_log_hexdump_h™dÀr_t
 
hexdump_h™dÀr
)

306 
m_log_d©a
.
°d_h™dÀr
 = std_handler;

307 
m_log_d©a
.
hexdump_h™dÀr
 = hexdump_handler;

308 
	}
}

310 #i‡(
NRF_LOG_DEFERRED
 == 1)

322 
ölöe
 
boﬁ
 
	$buf_¥óŒoc
(
uöt32_t
 
«rgs
, uöt32_à* 
p_wr_idx
)

324 
«rgs
 +
HEADER_SIZE
;

325 
uöt32_t
 
ovÊw_èg_size
 = 
HEADER_SIZE
;

326 
boﬁ
 
ªt
 = 
åue
;

327 
	`CRITICAL_REGION_ENTER
();

328 *
p_wr_idx
 = 
m_log_d©a
.
wr_idx
;

329 
uöt32_t
 
avaûabÀ_w‹ds
 = (
m_log_d©a
.
mask
 + 1Ë- (m_log_d©a.
wr_idx
 - m_log_d©a.
rd_idx
);

330 
uöt32_t
 
ªquúed_w‹ds
 = 
«rgs
 + 
ovÊw_èg_size
;

331 i‡(
ªquúed_w‹ds
 > 
avaûabÀ_w‹ds
)

333 i‡(
avaûabÀ_w‹ds
 >
HEADER_SIZE
)

336 
	`STD_HEADER_DEF
(
hódî
, 
m_ovîÊow_öfo
, 
NRF_LOG_LEVEL_INTERNAL
, 0);

337 
m_log_d©a
.
buf„r
[m_log_d©a.
wr_idx
++ & m_log_d©a.
mask
] =

338 
hódî
.
øw
;

339 #i‡
NRF_LOG_USES_TIMESTAMP


340 
m_log_d©a
.
buf„r
[m_log_d©a.
wr_idx
++ & m_log_d©a.
mask
] =

341 
m_log_d©a
.
	`time°amp_func
();

345 
ªt
 = 
Ál£
;

349 
m_log_d©a
.
wr_idx
 +
«rgs
;

351 
	`CRITICAL_REGION_EXIT
();

352  
ªt
;

353 
	}
}

370 
ölöe
 
uöt32_t
 * 
	$c⁄t_buf_¥óŒoc
(
uöt32_t
 
Àn32
,

371 
uöt32_t
 * 
p_off£t
,

372 
uöt32_t
 * 
p_wr_idx
)

374 
uöt32_t
 * 
p_buf
 = 
NULL
;

376 
Àn32
++;

378 
	`CRITICAL_REGION_ENTER
();

379 *
p_wr_idx
 = 
m_log_d©a
.
wr_idx
;

380 
uöt32_t
 
avaûabÀ_w‹ds
 = (
m_log_d©a
.
mask
 + 1) -

381 (
m_log_d©a
.
wr_idx
 & m_log_d©a.
mask
);

382 i‡(
Àn32
 <
avaûabÀ_w‹ds
)

385 
p_buf
 = &
m_log_d©a
.
buf„r
[(m_log_d©a.
wr_idx
 + 1Ë& m_log_d©a.
mask
];

386 
m_log_d©a
.
wr_idx
 +
Àn32
;

387 *
p_off£t
 = 0;

389 i‡(
Àn32
 < (
m_log_d©a
.
rd_idx
 & m_log_d©a.
mask
))

392 
m_log_d©a
.
wr_idx
 +(
Àn32
 + 
avaûabÀ_w‹ds
 - 1);

393 *
p_off£t
 = 
avaûabÀ_w‹ds
 - 1;

394 
p_buf
 = 
m_log_d©a
.
buf„r
;

396 
avaûabÀ_w‹ds
 = (
m_log_d©a
.
mask
 + 1Ë- (m_log_d©a.
wr_idx
 - m_log_d©a.
rd_idx
);

398 i‡(
avaûabÀ_w‹ds
 < 
HEADER_SIZE
)

400 
p_buf
 = 
NULL
;

402 
	`CRITICAL_REGION_EXIT
();

404  
p_buf
;

405 
	}
}

409 #i‡(
NRF_LOG_DEFERRED
 == 0)

410 
ölöe
 
	$ƒf_log_dúe˘_„ed
(
uöt8_t
 
ty≥
,

411 c⁄° * c⁄° 
p_°r
,

412 
uöt32_t
 * 
p_¨gs
,

413 
uöt32_t
 
«rgs
)

415 
uöt32_t
 
time°amp
 = 0;

416 
uöt32_t
 * 
p_time°amp
 = 
NRF_LOG_USES_TIMESTAMP
 ? &
time°amp
 : 
NULL
;

418 #i‡
NRF_LOG_USES_TIMESTAMP


419 
time°amp
 = 
m_log_d©a
.
	`time°amp_func
();

421 
	`UNUSED_VARIABLE
(
time°amp
);

424 
UNUSED_VARIABLE


425 (
m_log_d©a
.
	`°d_h™dÀr
(
ty≥
, 
p_time°amp
, (*)
p_°r
, 
p_¨gs
, 
«rgs
));

427 
	}
}

431 
uöt32_t
 
	$ƒf_log_push
(* c⁄° 
p_°r
)

433 #i‡(
NRF_LOG_DEFERRED
 == 0)

434  (
uöt32_t
)
p_°r
;

436 
uöt32_t
 
mask
 = 
m_log_d©a
.mask;

437 
uöt32_t
 
¶í
 = 
	`°æí
(
p_°r
) + 1;

438 
uöt32_t
 
buÊí
 = 
	`CEIL_DIV
(
¶í
, 4);

439 
uöt32_t
 
off£t
 = 0;

440 
uöt32_t
 
wr_idx
;

441 * 
p_d°_°r
 = (*)
	`c⁄t_buf_¥óŒoc
(
buÊí
, &
off£t
, &
wr_idx
);

442 i‡(
p_d°_°r
)

444 
	`PUSHED_HEADER_DEF
(
hódî
, 
off£t
, 
buÊí
);

445 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
hódî
.
øw
;

446 
	`mem˝y
(
p_d°_°r
, 
p_°r
, 
¶í
);

448  (
uöt32_t
)
p_d°_°r
;

450 
	}
}

453 
	$ƒf_log_‰⁄ãnd_°d_0
(
uöt8_t
 
£vîôy
, c⁄° * c⁄° 
p_°r
)

455 #i‡(
NRF_LOG_DEFERRED
 == 0)

456 
	`ƒf_log_dúe˘_„ed
(
£vîôy
, 
p_°r
, 
NULL
, 0);

458 
uöt32_t
 
«rgs
 = 0;

459 
uöt32_t
 
mask
 = 
m_log_d©a
.mask;

460 
uöt32_t
 
wr_idx
;

461 i‡(
	`buf_¥óŒoc
(
«rgs
, &
wr_idx
))

464 
	`STD_HEADER_DEF
(
hódî
, 
p_°r
, 
£vîôy
, 
«rgs
);

465 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
hódî
.
øw
;

466 #i‡
NRF_LOG_USES_TIMESTAMP


467 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = m_log_d©a.
	`time°amp_func
();

471 
	}
}

474 
	$ƒf_log_‰⁄ãnd_°d_1
(
uöt8_t
 
£vîôy
,

475 c⁄° * c⁄° 
p_°r
,

476 
uöt32_t
 
vÆ0
)

478 #i‡(
NRF_LOG_DEFERRED
 == 0)

479 
uöt32_t
 
¨gs
[] = {
vÆ0
};

480 
	`ƒf_log_dúe˘_„ed
(
£vîôy
, 
p_°r
, 
¨gs
, 
	`ARRAY_SIZE
(args));

482 
uöt32_t
 
«rgs
 = 1;

483 
uöt32_t
 
mask
 = 
m_log_d©a
.mask;

484 
uöt32_t
 
wr_idx
;

485 i‡(
	`buf_¥óŒoc
(
«rgs
, &
wr_idx
))

488 
	`STD_HEADER_DEF
(
hódî
, 
p_°r
, 
£vîôy
, 
«rgs
);

489 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
hódî
.
øw
;

490 #i‡
NRF_LOG_USES_TIMESTAMP


491 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = m_log_d©a.
	`time°amp_func
();

493 
m_log_d©a
.
buf„r
[
wr_idx
 & 
mask
] = 
vÆ0
;

496 
	}
}

499 
	$ƒf_log_‰⁄ãnd_°d_2
(
uöt8_t
 
£vîôy
,

500 c⁄° * c⁄° 
p_°r
,

501 
uöt32_t
 
vÆ0
,

502 
uöt32_t
 
vÆ1
)

504 #i‡(
NRF_LOG_DEFERRED
 == 0)

505 
uöt32_t
 
¨gs
[] = {
vÆ0
, 
vÆ1
};

506 
	`ƒf_log_dúe˘_„ed
(
£vîôy
, 
p_°r
, 
¨gs
, 
	`ARRAY_SIZE
(args));

508 
uöt32_t
 
«rgs
 = 2;

509 
uöt32_t
 
mask
 = 
m_log_d©a
.mask;

510 
uöt32_t
 
wr_idx
;

511 i‡(
	`buf_¥óŒoc
(
«rgs
, &
wr_idx
))

514 
	`STD_HEADER_DEF
(
hódî
, 
p_°r
, 
£vîôy
, 
«rgs
);

515 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
hódî
.
øw
;

516 #i‡
NRF_LOG_USES_TIMESTAMP


517 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = m_log_d©a.
	`time°amp_func
();

519 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ0
;

520 
m_log_d©a
.
buf„r
[
wr_idx
 & 
mask
] = 
vÆ1
;

523 
	}
}

526 
	$ƒf_log_‰⁄ãnd_°d_3
(
uöt8_t
 
£vîôy
,

527 c⁄° * c⁄° 
p_°r
,

528 
uöt32_t
 
vÆ0
,

529 
uöt32_t
 
vÆ1
,

530 
uöt32_t
 
vÆ2
)

532 #i‡(
NRF_LOG_DEFERRED
 == 0)

533 
uöt32_t
 
¨gs
[] = {
vÆ0
, 
vÆ1
, 
vÆ2
};

534 
	`ƒf_log_dúe˘_„ed
(
£vîôy
, 
p_°r
, 
¨gs
, 
	`ARRAY_SIZE
(args));

536 
uöt32_t
 
«rgs
 = 3;

537 
uöt32_t
 
mask
 = 
m_log_d©a
.mask;

538 
uöt32_t
 
wr_idx
;

539 i‡(
	`buf_¥óŒoc
(
«rgs
, &
wr_idx
))

542 
	`STD_HEADER_DEF
(
hódî
, 
p_°r
, 
£vîôy
, 
«rgs
);

543 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
hódî
.
øw
;

544 #i‡
NRF_LOG_USES_TIMESTAMP


545 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = m_log_d©a.
	`time°amp_func
();

547 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ0
;

548 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ1
;

549 
m_log_d©a
.
buf„r
[
wr_idx
 & 
mask
] = 
vÆ2
;

552 
	}
}

555 
	$ƒf_log_‰⁄ãnd_°d_4
(
uöt8_t
 
£vîôy
,

556 c⁄° * c⁄° 
p_°r
,

557 
uöt32_t
 
vÆ0
,

558 
uöt32_t
 
vÆ1
,

559 
uöt32_t
 
vÆ2
,

560 
uöt32_t
 
vÆ3
)

562 #i‡(
NRF_LOG_DEFERRED
 == 0)

563 
uöt32_t
 
¨gs
[] = {
vÆ0
, 
vÆ1
, 
vÆ2
, 
vÆ3
};

564 
	`ƒf_log_dúe˘_„ed
(
£vîôy
, 
p_°r
, 
¨gs
, 
	`ARRAY_SIZE
(args));

566 
uöt32_t
 
«rgs
 = 4;

567 
uöt32_t
 
mask
 = 
m_log_d©a
.mask;

568 
uöt32_t
 
wr_idx
;

569 i‡(
	`buf_¥óŒoc
(
«rgs
, &
wr_idx
))

572 
	`STD_HEADER_DEF
(
hódî
, 
p_°r
, 
£vîôy
, 
«rgs
);

573 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
hódî
.
øw
;

574 #i‡
NRF_LOG_USES_TIMESTAMP


575 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = m_log_d©a.
	`time°amp_func
();

577 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ0
;

578 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ1
;

579 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ2
;

580 
m_log_d©a
.
buf„r
[
wr_idx
 & 
mask
] = 
vÆ3
;

583 
	}
}

586 
	$ƒf_log_‰⁄ãnd_°d_5
(
uöt8_t
 
£vîôy
,

587 c⁄° * c⁄° 
p_°r
,

588 
uöt32_t
 
vÆ0
,

589 
uöt32_t
 
vÆ1
,

590 
uöt32_t
 
vÆ2
,

591 
uöt32_t
 
vÆ3
,

592 
uöt32_t
 
vÆ4
)

594 #i‡(
NRF_LOG_DEFERRED
 == 0)

595 
uöt32_t
 
¨gs
[] = {
vÆ0
, 
vÆ1
, 
vÆ2
, 
vÆ3
, 
vÆ4
};

596 
	`ƒf_log_dúe˘_„ed
(
£vîôy
, 
p_°r
, 
¨gs
, 
	`ARRAY_SIZE
(args));

598 
uöt32_t
 
«rgs
 = 5;

599 
uöt32_t
 
mask
 = 
m_log_d©a
.mask;

600 
uöt32_t
 
wr_idx
;

601 i‡(
	`buf_¥óŒoc
(
«rgs
, &
wr_idx
))

604 
	`STD_HEADER_DEF
(
hódî
, 
p_°r
, 
£vîôy
, 
«rgs
);

605 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
hódî
.
øw
;

606 #i‡
NRF_LOG_USES_TIMESTAMP


607 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = m_log_d©a.
	`time°amp_func
();

609 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ0
;

610 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ1
;

611 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ2
;

612 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ3
;

613 
m_log_d©a
.
buf„r
[
wr_idx
 & 
mask
] = 
vÆ4
;

616 
	}
}

619 
	$ƒf_log_‰⁄ãnd_°d_6
(
uöt8_t
 
£vîôy
,

620 c⁄° * c⁄° 
p_°r
,

621 
uöt32_t
 
vÆ0
,

622 
uöt32_t
 
vÆ1
,

623 
uöt32_t
 
vÆ2
,

624 
uöt32_t
 
vÆ3
,

625 
uöt32_t
 
vÆ4
,

626 
uöt32_t
 
vÆ5
)

628 #i‡(
NRF_LOG_DEFERRED
 == 0)

629 
uöt32_t
 
¨gs
[] = {
vÆ0
, 
vÆ1
, 
vÆ2
, 
vÆ3
, 
vÆ4
, 
vÆ5
};

630 
	`ƒf_log_dúe˘_„ed
(
£vîôy
, 
p_°r
, 
¨gs
, 
	`ARRAY_SIZE
(args));

632 
uöt32_t
 
«rgs
 = 6;

633 
uöt32_t
 
mask
 = 
m_log_d©a
.mask;

634 
uöt32_t
 
wr_idx
;

635 i‡(
	`buf_¥óŒoc
(
«rgs
, &
wr_idx
))

638 
	`STD_HEADER_DEF
(
hódî
, 
p_°r
, 
£vîôy
, 
«rgs
);

639 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
hódî
.
øw
;

640 #i‡
NRF_LOG_USES_TIMESTAMP


641 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = m_log_d©a.
	`time°amp_func
();

643 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ0
;

644 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ1
;

645 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ2
;

646 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ3
;

647 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ4
;

648 
m_log_d©a
.
buf„r
[
wr_idx
 & 
mask
] = 
vÆ5
;

651 
	}
}

654 
	$ƒf_log_‰⁄ãnd_hexdump
(
uöt8_t
 
£vîôy
,

655 c⁄° * c⁄° 
p_°r
,

656 c⁄° * c⁄° 
p_d©a
,

657 
uöt16_t
 
Àngth
)

659 #i‡(
NRF_LOG_DEFERRED
 == 0)

660 
uöt32_t
 
time°amp
 = 0;

661 #i‡
NRF_LOG_USES_TIMESTAMP


662 
time°amp
 = 
m_log_d©a
.
	`time°amp_func
();

664 (Ë
time°amp
;

667 
uöt32_t
 
cuº_off£t
 = 0;

671 
cuº_off£t
 = 
m_log_d©a
.
	`hexdump_h™dÀr
(
£vîôy
,

672 
NRF_LOG_USES_TIMESTAMP
 ? &
time°amp
 : 
NULL
,

673 
p_°r
,

674 
cuº_off£t
,

675 
p_d©a
,

676 
Àngth
,

677 
NULL
,

680 
cuº_off£t
 < 
Àngth
);

682 
uöt32_t
 
mask
 = 
m_log_d©a
.mask;

684 
uöt32_t
 
wr_idx
;

685 i‡(
	`buf_¥óŒoc
(
	`CEIL_DIV
(
Àngth
, 4Ë+ 1, &
wr_idx
))

687 
	`HEXDUMP_HEADER_DEF
(
hódî
, 
£vîôy
, 
Àngth
);

688 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
hódî
.
øw
;

689 #i‡
NRF_LOG_USES_TIMESTAMP


690 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = m_log_d©a.
	`time°amp_func
();

692 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = (
uöt32_t
)
p_°r
;

693 
uöt32_t
 
•a˚0
 = (uöt32_tË* (
m_log_d©a
.
mask
 + 1 - (
wr_idx
 & mask));

694 i‡(
Àngth
 <
•a˚0
)

696 
	`mem˝y
(&
m_log_d©a
.
buf„r
[
wr_idx
 & 
mask
], 
p_d©a
, 
Àngth
);

700 
	`mem˝y
(&
m_log_d©a
.
buf„r
[
wr_idx
 & 
mask
], 
p_d©a
, 
•a˚0
);

701 
Àngth
 -
•a˚0
;

702 
	`mem˝y
(&
m_log_d©a
.
buf„r
[0], &((
uöt8_t
 *)
p_d©a
)[
•a˚0
], 
Àngth
);

706 
	}
}

709 
boﬁ
 
	$buf„r_is_em±y
()

711  (
m_log_d©a
.
rd_idx
 =m_log_d©a.
wr_idx
);

712 
	}
}

715 
boﬁ
 
	$ƒf_log_‰⁄ãnd_dequeue
()

717 i‡(
	`buf„r_is_em±y
())

719  
Ál£
;

722 
uöt32_t
 
rd_idx
 = 
m_log_d©a
.rd_idx;

723 
uöt32_t
 
mask
 = 
m_log_d©a
.mask;

724 
uöt32_t
 
hódî_rd_idx
 = 
rd_idx
;

726 
ƒf_log_hódî_t
 
hódî
;

727 
hódî
.
øw
 = 
m_log_d©a
.
buf„r
[
rd_idx
++ & 
mask
];

730 
hódî
.
gíîic
.
ty≥
 =
HEADER_TYPE_PUSHED
)

732 
rd_idx
 +(
hódî
.
pushed
.
Àn
 + hódî.pushed.
off£t
);

733 
hódî_rd_idx
 = 
rd_idx
;

734 
hódî
.
øw
 = 
m_log_d©a
.
buf„r
[
rd_idx
++ & 
mask
];

737 
uöt32_t
 * 
p_time°amp
 = 
NRF_LOG_USES_TIMESTAMP
 ?

738 &
m_log_d©a
.
buf„r
[
rd_idx
++ & 
mask
] : 
NULL
;

740 i‡(
hódî
.
gíîic
.
øw
)

742 
p_time°amp
 = 
NULL
;

745 
boﬁ
 
ªt
 = 
Ál£
;

746 i‡(
hódî
.
gíîic
.
ty≥
 =
HEADER_TYPE_HEXDUMP
)

749 * 
p_°r
 = (*)
m_log_d©a
.
buf„r
[
rd_idx
++ & 
mask
];

750 
uöt32_t
 
Àngth
 = 
hódî
.
hexdump
.
Àn
;

751 
uöt32_t
 
off£t
 = 
hódî
.
hexdump
.offset;

752 
uöt32_t
 
•a˚0
 = (uöt32_tË* (
mask
 + 1 - (
rd_idx
 & mask));

753 i‡(
Àngth
 > 
•a˚0
)

755 
uöt8_t
 * 
±r0
 = 
•a˚0
 ?

756 (
uöt8_t
 *)&
m_log_d©a
.
buf„r
[
rd_idx
 & 
mask
] :

757 (
uöt8_t
 *)&
m_log_d©a
.
buf„r
[0];

758 
uöt8_t
 
Àn0
 = 
•a˚0
 ? s∑˚0 : 
Àngth
;

759 
uöt8_t
 * 
±r1
 = 
•a˚0
 ?

760 (
uöt8_t
 *)&
m_log_d©a
.
buf„r
[0] : 
NULL
;

761 
uöt8_t
 
Àn1
 = 
•a˚0
 ? 
Àngth
 - space0 : 0;

763 
off£t
 = 
m_log_d©a
.
	`hexdump_h™dÀr
(
hódî
.
hexdump
.
£vîôy
,

764 
p_time°amp
, 
p_°r
,

765 
off£t
,

766 
±r0
, 
Àn0
,

767 
±r1
, 
Àn1
);

771 
off£t
 = 
m_log_d©a
.
	`hexdump_h™dÀr
(

772 
hódî
.
hexdump
.
£vîôy
,

773 
p_time°amp
,

774 
p_°r
,

775 
off£t
,

776 (
uöt8_t
 *)&
m_log_d©a
.
buf„r
[
rd_idx
 & 
mask
],

777 
Àngth
,

778 
NULL
, 0);

781 i‡(
off£t
 =
Àngth
)

783 
rd_idx
 +
	`CEIL_DIV
(
Àngth
, 4);

784 
ªt
 = 
åue
;

790 
hódî
.
hexdump
.
off£t
 = offset;

791 
m_log_d©a
.
buf„r
[
hódî_rd_idx
 & 
mask
] = 
hódî
.
øw
;

796 
uöt32_t
 
¨gs
[6];

797 
uöt32_t
 * 
p_¨g
 = 
¨gs
;

798 * 
p_°r
 = (*)((
uöt32_t
)
hódî
.
°d
.
addr
);

799 
uöt32_t
 
«rgs
 = 
hódî
.
°d
.nargs;

801 
uöt32_t
 
i
;

803 
i
 = 0; i < 
«rgs
; i++)

805 *
p_¨g
 = 
m_log_d©a
.
buf„r
[
rd_idx
++ & 
mask
];

806 
p_¨g
++;

809 
ªt
 = 
m_log_d©a
.
	`°d_h™dÀr
(
hódî
.
°d
.
£vîôy
,

810 
p_time°amp
,

811 
p_°r
, 
¨gs
, 
«rgs
);

813 i‡(
ªt
)

815 
m_log_d©a
.
rd_idx
 =Ñd_idx;

817  
	`buf„r_is_em±y
(Ë? 
Ál£
 : 
åue
;

819 
	}
}

821 
uöt8_t
 
	$ƒf_log_gëch¨
()

823  
	`ƒf_log_backíd_gëch¨
();

824 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\mem_manager\mem_manager.c

40 
	~"sdk_comm⁄.h
"

41 #i‡
NRF_MODULE_ENABLED
(
MEM_MANAGER
)

42 
	~"mem_m™agî.h
"

43 
	~"ƒf_as£π.h
"

44 
	#NRF_LOG_MODULE_NAME
 "MEM_MNGR"

	)

45 
	~"ƒf_log.h
"

54 
	#MM_MUTEX_LOCK
(Ë
	`SDK_MUTEX_LOCK
(
m_mm_muãx
Ë

	)

55 
	#MM_MUTEX_UNLOCK
(Ë
	`SDK_MUTEX_UNLOCK
(
m_mm_muãx
Ë

	)

58 #unde‡
NULL_PARAM_CHECK


59 #unde‡
NULL_PARAM_CHECK_VOID


60 #unde‡
VERIFY_MODULE_INITIALIZED


61 #unde‡
VERIFY_MODULE_INITIALIZED_VOID


62 #unde‡
VERIFY_REQUESTED_SIZE


63 #unde‡
VERIFY_REQUESTED_SIZE_VOID


65 #i‡(
MEM_MANAGER_DISABLE_API_PARAM_CHECK
 == 0)

75 
	#NULL_PARAM_CHECK
(
PARAM
) \

76 i‡((
PARAM
Ë=
NULL
) \

78  (
NRF_ERROR_NULL
 | 
NRF_ERROR_MEMORY_MANAGER_ERR_BASE
); \

79 }

	)

86 
	#NULL_PARAM_CHECK_VOID
(
PARAM
) \

87 i‡((
PARAM
Ë=
NULL
) \

90 }

	)

99 
	#VERIFY_MODULE_INITIALIZED
() \

102 i‡(!
m_moduÀ_öôülized
) \

104  (
NRF_ERROR_INVALID_STATE
 | 
NRF_ERROR_MEMORY_MANAGER_ERR_BASE
); \

106 } 0)

	)

111 
	#VERIFY_MODULE_INITIALIZED_VOID
() \

114 i‡(!
m_moduÀ_öôülized
) \

118 } 0)

	)

130 
	#VERIFY_REQUESTED_SIZE
(
SIZE
) \

133 i‡(((
SIZE
Ë=0Ë||((SIZEË> 
MAX_MEM_SIZE
)) \

135  (
NRF_ERROR_INVALID_PARAM
 | 
NRF_ERROR_MEMORY_MANAGER_ERR_BASE
); \

137 } 0)

	)

146 
	#VERIFY_REQUESTED_SIZE_VOID
(
SIZE
) \

149 i‡(((
SIZE
Ë=0Ë||((SIZEË> 
MAX_MEM_SIZE
)) \

153 } 0)

	)

159 
	#NULL_PARAM_CHECK
(
PARAM
)

	)

160 
	#VERIFY_MODULE_INITIALIZED
()

	)

161 
	#VERIFY_REQUESTED_SIZE
(
SIZE
)

	)

167 #i‚de‡
MEMORY_MANAGER_XXSMALL_BLOCK_COUNT


168 
	#MEMORY_MANAGER_XXSMALL_BLOCK_COUNT
 0

	)

169 
	#MEMORY_MANAGER_XXSMALL_BLOCK_SIZE
 0

	)

170 
	#XXSMALL_BLOCK_START
 0

	)

171 
	#XXSMALL_BLOCK_END
 0

	)

172 
	#XXSMALL_MEMORY_START
 0

	)

177 #i‚de‡
MEMORY_MANAGER_XSMALL_BLOCK_COUNT


178 
	#MEMORY_MANAGER_XSMALL_BLOCK_COUNT
 0

	)

179 
	#MEMORY_MANAGER_XSMALL_BLOCK_SIZE
 0

	)

180 
	#XSMALL_BLOCK_START
 0

	)

181 
	#XSMALL_BLOCK_END
 0

	)

182 
	#XSMALL_MEMORY_START
 0

	)

187 #i‚de‡
MEMORY_MANAGER_SMALL_BLOCK_COUNT


188 
	#MEMORY_MANAGER_SMALL_BLOCK_COUNT
 0

	)

189 
	#MEMORY_MANAGER_SMALL_BLOCK_SIZE
 0

	)

190 
	#SMALL_BLOCK_START
 0

	)

191 
	#SMALL_BLOCK_END
 0

	)

192 
	#SMALL_MEMORY_START
 0

	)

197 #i‚de‡
MEMORY_MANAGER_MEDIUM_BLOCK_COUNT


198 
	#MEMORY_MANAGER_MEDIUM_BLOCK_COUNT
 0

	)

199 
	#MEMORY_MANAGER_MEDIUM_BLOCK_SIZE
 0

	)

200 
	#MEDIUM_BLOCK_START
 0

	)

201 
	#MEDIUM_BLOCK_END
 0

	)

202 
	#MEDIUM_MEMORY_START
 0

	)

207 #i‚de‡
MEMORY_MANAGER_LARGE_BLOCK_COUNT


208 
	#MEMORY_MANAGER_LARGE_BLOCK_COUNT
 0

	)

209 
	#MEMORY_MANAGER_LARGE_BLOCK_SIZE
 0

	)

210 
	#LARGE_BLOCK_START
 0

	)

211 
	#LARGE_BLOCK_END
 0

	)

212 
	#LARGE_MEMORY_START
 0

	)

217 #i‚de‡
MEMORY_MANAGER_XLARGE_BLOCK_COUNT


218 
	#MEMORY_MANAGER_XLARGE_BLOCK_COUNT
 0

	)

219 
	#MEMORY_MANAGER_XLARGE_BLOCK_SIZE
 0

	)

220 
	#XLARGE_BLOCK_START
 0

	)

221 
	#XLARGE_BLOCK_END
 0

	)

222 
	#XLARGE_MEMORY_START
 0

	)

227 #i‚de‡
MEMORY_MANAGER_XXLARGE_BLOCK_COUNT


228 
	#MEMORY_MANAGER_XXLARGE_BLOCK_COUNT
 0

	)

229 
	#MEMORY_MANAGER_XXLARGE_BLOCK_SIZE
 0

	)

230 
	#XXLARGE_BLOCK_START
 0

	)

231 
	#XXLARGE_BLOCK_END
 0

	)

232 
	#XXLARGE_MEMORY_START
 0

	)

240 #i‡(
MEMORY_MANAGER_XXLARGE_BLOCK_COUNT
 != 0)

241 
	#MAX_MEM_SIZE
 
MEMORY_MANAGER_XXLARGE_BLOCK_SIZE


	)

242 #ñi‡(
MEMORY_MANAGER_XLARGE_BLOCK_COUNT
 != 0)

243 
	#MAX_MEM_SIZE
 
MEMORY_MANAGER_XLARGE_BLOCK_SIZE


	)

244 #ñi‡(
MEMORY_MANAGER_LARGE_BLOCK_COUNT
 != 0)

245 
	#MAX_MEM_SIZE
 
MEMORY_MANAGER_LARGE_BLOCK_SIZE


	)

246 #ñi‡(
MEMORY_MANAGER_MEDIUM_BLOCK_COUNT
 != 0)

247 
	#MAX_MEM_SIZE
 
MEMORY_MANAGER_MEDIUM_BLOCK_SIZE


	)

248 #ñi‡(
MEMORY_MANAGER_SMALL_BLOCK_COUNT
 != 0)

249 
	#MAX_MEM_SIZE
 
MEMORY_MANAGER_SMALL_BLOCK_SIZE


	)

250 #ñi‡(
MEMORY_MANAGER_XSMALL_BLOCK_COUNT
 != 0)

251 
	#MAX_MEM_SIZE
 
MEMORY_MANAGER_XSMALL_BLOCK_SIZE


	)

252 #ñi‡(
MEMORY_MANAGER_XXSMALL_BLOCK_COUNT
 != 0)

253 
	#MAX_MEM_SIZE
 
MEMORY_MANAGER_XXSMALL_BLOCK_SIZE


	)

260 #i‚de‡
XXSMALL_BLOCK_START


261 
	#XXSMALL_BLOCK_START
 0

	)

266 #i‚de‡
XSMALL_BLOCK_START


267 
	#XSMALL_BLOCK_START
 (
XXSMALL_BLOCK_START
 + 
MEMORY_MANAGER_XXSMALL_BLOCK_COUNT
)

	)

272 #i‚de‡
SMALL_BLOCK_START


273 
	#SMALL_BLOCK_START
 (
XSMALL_BLOCK_START
 + 
MEMORY_MANAGER_XSMALL_BLOCK_COUNT
)

	)

278 #i‚de‡
MEDIUM_BLOCK_START


279 
	#MEDIUM_BLOCK_START
 (
SMALL_BLOCK_START
 + 
MEMORY_MANAGER_SMALL_BLOCK_COUNT
)

	)

284 #i‚de‡
LARGE_BLOCK_START


285 
	#LARGE_BLOCK_START
 (
MEDIUM_BLOCK_START
 + 
MEMORY_MANAGER_MEDIUM_BLOCK_COUNT
)

	)

290 #i‚de‡
XLARGE_BLOCK_START


291 
	#XLARGE_BLOCK_START
 (
LARGE_BLOCK_START
 + 
MEMORY_MANAGER_LARGE_BLOCK_COUNT
)

	)

295 #i‚de‡
XXLARGE_BLOCK_START


296 
	#XXLARGE_BLOCK_START
 (
XLARGE_BLOCK_START
 + 
MEMORY_MANAGER_XLARGE_BLOCK_COUNT
)

	)

301 #i‚de‡
XXSMALL_BLOCK_END


302 
	#XXSMALL_BLOCK_END
 (
XXSMALL_BLOCK_START
 + 
MEMORY_MANAGER_XXSMALL_BLOCK_COUNT
)

	)

306 #i‚de‡
XSMALL_BLOCK_END


307 
	#XSMALL_BLOCK_END
 (
XSMALL_BLOCK_START
 + 
MEMORY_MANAGER_XSMALL_BLOCK_COUNT
)

	)

312 #i‚de‡
SMALL_BLOCK_END


313 
	#SMALL_BLOCK_END
 (
SMALL_BLOCK_START
 + 
MEMORY_MANAGER_SMALL_BLOCK_COUNT
)

	)

318 #i‚de‡
MEDIUM_BLOCK_END


319 
	#MEDIUM_BLOCK_END
 (
MEDIUM_BLOCK_START
 + 
MEMORY_MANAGER_MEDIUM_BLOCK_COUNT
)

	)

324 #i‚de‡
LARGE_BLOCK_END


325 
	#LARGE_BLOCK_END
 (
LARGE_BLOCK_START
 + 
MEMORY_MANAGER_LARGE_BLOCK_COUNT
)

	)

330 #i‚de‡
XLARGE_BLOCK_END


331 
	#XLARGE_BLOCK_END
 (
XLARGE_BLOCK_START
 + 
MEMORY_MANAGER_XLARGE_BLOCK_COUNT
)

	)

336 #i‚de‡
XXLARGE_BLOCK_END


337 
	#XXLARGE_BLOCK_END
 (
XXLARGE_BLOCK_START
 + 
MEMORY_MANAGER_XXLARGE_BLOCK_COUNT
)

	)

341 
	#XXSMALL_MEMORY_SIZE
 (
MEMORY_MANAGER_XXSMALL_BLOCK_COUNT
 * 
MEMORY_MANAGER_XXSMALL_BLOCK_SIZE
)

	)

342 
	#XSMALL_MEMORY_SIZE
 (
MEMORY_MANAGER_XSMALL_BLOCK_COUNT
 * 
MEMORY_MANAGER_XSMALL_BLOCK_SIZE
)

	)

343 
	#SMALL_MEMORY_SIZE
 (
MEMORY_MANAGER_SMALL_BLOCK_COUNT
 * 
MEMORY_MANAGER_SMALL_BLOCK_SIZE
)

	)

344 
	#MEDIUM_MEMORY_SIZE
 (
MEMORY_MANAGER_MEDIUM_BLOCK_COUNT
 * 
MEMORY_MANAGER_MEDIUM_BLOCK_SIZE
)

	)

345 
	#LARGE_MEMORY_SIZE
 (
MEMORY_MANAGER_LARGE_BLOCK_COUNT
 * 
MEMORY_MANAGER_LARGE_BLOCK_SIZE
)

	)

346 
	#XLARGE_MEMORY_SIZE
 (
MEMORY_MANAGER_XLARGE_BLOCK_COUNT
 * 
MEMORY_MANAGER_XLARGE_BLOCK_SIZE
)

	)

347 
	#XXLARGE_MEMORY_SIZE
 (
MEMORY_MANAGER_XXLARGE_BLOCK_COUNT
 * 
MEMORY_MANAGER_XXLARGE_BLOCK_SIZE
)

	)

351 #i‚de‡
XXSMALL_MEMORY_START


352 
	#XXSMALL_MEMORY_START
 0

	)

357 #i‚de‡
XSMALL_MEMORY_START


358 
	#XSMALL_MEMORY_START
 (
XXSMALL_MEMORY_START
 + 
XXSMALL_MEMORY_SIZE
)

	)

363 #i‚de‡
SMALL_MEMORY_START


364 
	#SMALL_MEMORY_START
 (
XSMALL_MEMORY_START
 + 
XSMALL_MEMORY_SIZE
)

	)

369 #i‚de‡
MEDIUM_MEMORY_START


370 
	#MEDIUM_MEMORY_START
 (
SMALL_MEMORY_START
 + 
SMALL_MEMORY_SIZE
)

	)

375 #i‚de‡
LARGE_MEMORY_START


376 
	#LARGE_MEMORY_START
 (
MEDIUM_MEMORY_START
 + 
MEDIUM_MEMORY_SIZE
)

	)

381 #i‚de‡
XLARGE_MEMORY_START


382 
	#XLARGE_MEMORY_START
 (
LARGE_MEMORY_START
 + 
LARGE_MEMORY_SIZE
)

	)

387 #i‚de‡
XXLARGE_MEMORY_START


388 
	#XXLARGE_MEMORY_START
 (
XLARGE_MEMORY_START
 + 
XLARGE_MEMORY_SIZE
)

	)

393 
	#TOTAL_BLOCK_COUNT
 (
MEMORY_MANAGER_XXSMALL_BLOCK_COUNT
 + \

394 
MEMORY_MANAGER_XSMALL_BLOCK_COUNT
 + \

395 
MEMORY_MANAGER_SMALL_BLOCK_COUNT
 + \

396 
MEMORY_MANAGER_MEDIUM_BLOCK_COUNT
 + \

397 
MEMORY_MANAGER_LARGE_BLOCK_COUNT
 + \

398 
MEMORY_MANAGER_XLARGE_BLOCK_COUNT
 + \

399 
MEMORY_MANAGER_XLARGE_BLOCK_COUNT
)

	)

403 
	#TOTAL_MEMORY_SIZE
 (
XXSMALL_MEMORY_SIZE
 + \

404 
XSMALL_MEMORY_SIZE
 + \

405 
SMALL_MEMORY_SIZE
 + \

406 
MEDIUM_MEMORY_SIZE
 + \

407 
LARGE_MEMORY_SIZE
 + \

408 
XLARGE_MEMORY_SIZE
 + \

409 
XXLARGE_MEMORY_SIZE
)

	)

412 
	#BLOCK_CAT_COUNT
 7

	)

413 
	#BLOCK_CAT_XXS
 0

	)

414 
	#BLOCK_CAT_XS
 1

	)

415 
	#BLOCK_CAT_SMALL
 2

	)

416 
	#BLOCK_CAT_MEDIUM
 3

	)

417 
	#BLOCK_CAT_LARGE
 4

	)

418 
	#BLOCK_CAT_XL
 5

	)

419 
	#BLOCK_CAT_XXL
 6

	)

421 
	#BITMAP_SIZE
 32

	)

422 
	#BLOCK_BITMAP_ARRAY_SIZE
 
	`CEIL_DIV
(
TOTAL_BLOCK_COUNT
, 
BITMAP_SIZE
Ë

	)

426 c⁄° 
uöt32_t
 
	gm_block_size
[
BLOCK_CAT_COUNT
] =

428 
MEMORY_MANAGER_XXSMALL_BLOCK_SIZE
,

429 
MEMORY_MANAGER_XSMALL_BLOCK_SIZE
,

430 
MEMORY_MANAGER_SMALL_BLOCK_SIZE
,

431 
MEMORY_MANAGER_MEDIUM_BLOCK_SIZE
,

432 
MEMORY_MANAGER_LARGE_BLOCK_SIZE
,

433 
MEMORY_MANAGER_XLARGE_BLOCK_SIZE
,

434 
MEMORY_MANAGER_XXLARGE_BLOCK_SIZE


438 c⁄° 
uöt32_t
 
	gm_block_°¨t
[
BLOCK_CAT_COUNT
] =

440 
XXSMALL_BLOCK_START
,

441 
XSMALL_BLOCK_START
,

442 
SMALL_BLOCK_START
,

443 
MEDIUM_BLOCK_START
,

444 
LARGE_BLOCK_START
,

445 
XLARGE_BLOCK_START
,

446 
XXLARGE_BLOCK_START


450 c⁄° 
uöt32_t
 
	gm_block_íd
[
BLOCK_CAT_COUNT
] =

452 
XXSMALL_BLOCK_END
,

453 
XSMALL_BLOCK_END
,

454 
SMALL_BLOCK_END
,

455 
MEDIUM_BLOCK_END
,

456 
LARGE_BLOCK_END
,

457 
XLARGE_BLOCK_END
,

458 
XXLARGE_BLOCK_END


462 c⁄° 
uöt32_t
 
	gm_block_mem_°¨t
[
BLOCK_CAT_COUNT
] =

464 
XXSMALL_MEMORY_START
,

465 
XSMALL_MEMORY_START
,

466 
SMALL_MEMORY_START
,

467 
MEDIUM_MEMORY_START
,

468 
LARGE_MEMORY_START
,

469 
XLARGE_MEMORY_START
,

470 
XXLARGE_MEMORY_START


473 
uöt8_t
 
	gm_mem‹y
[
TOTAL_MEMORY_SIZE
];

474 
uöt32_t
 
	gm_mem_poﬁ
[
BLOCK_BITMAP_ARRAY_SIZE
];

476 #ifde‡
MEM_MANAGER_ENABLE_DIAGNOSTICS


479 c⁄° * 
	gm_block_desc_°r
[
BLOCK_CAT_COUNT
] =

491 
uöt32_t
 
	gm_mö_size
[
BLOCK_CAT_COUNT
] =

493 
MEMORY_MANAGER_XXSMALL_BLOCK_SIZE
,

494 
MEMORY_MANAGER_XSMALL_BLOCK_SIZE
,

495 
MEMORY_MANAGER_SMALL_BLOCK_SIZE
,

496 
MEMORY_MANAGER_MEDIUM_BLOCK_SIZE
,

497 
MEMORY_MANAGER_LARGE_BLOCK_SIZE
,

498 
MEMORY_MANAGER_XLARGE_BLOCK_SIZE
,

499 
MEMORY_MANAGER_XXLARGE_BLOCK_SIZE


503 
uöt32_t
 
	gm_max_size
[
BLOCK_CAT_COUNT
];

506 
uöt32_t
 * 
	gp_mö_size
;

509 
uöt32_t
 * 
	gp_max_size
;

512 
uöt32_t
 
	gm_block_cou¡
[
BLOCK_CAT_COUNT
] =

514 
MEMORY_MANAGER_XXSMALL_BLOCK_COUNT
,

515 
MEMORY_MANAGER_XSMALL_BLOCK_COUNT
,

516 
MEMORY_MANAGER_SMALL_BLOCK_COUNT
,

517 
MEMORY_MANAGER_MEDIUM_BLOCK_COUNT
,

518 
MEMORY_MANAGER_LARGE_BLOCK_COUNT
,

519 
MEMORY_MANAGER_XLARGE_BLOCK_COUNT
,

520 
MEMORY_MANAGER_XXLARGE_BLOCK_COUNT


525 
	$SDK_MUTEX_DEFINE
(
m_mm_muãx
)

526 #i‡(
MEM_MANAGER_DISABLE_API_PARAM_CHECK
 == 0)

527 
boﬁ
 
m_moduÀ_öôülized
 = 
Ál£
;

540 
__INLINE
 
	$gë_block_co‹dö©es
(
uöt32_t
 
block_ödex
, uöt32_à* 
p_x
, uöt32_à* 
p_y
)

544 c⁄° 
uöt32_t
 
x
 = 
block_ödex
 / 
BITMAP_SIZE
;

545 c⁄° 
uöt32_t
 
y
 = (
block_ödex
 - 
x
 * 
BITMAP_SIZE
);

547 (*
p_x
Ë
x
;

548 (*
p_y
Ë
y
;

549 
	}
}

553 
	$block_öô
 (
uöt32_t
 
block_ödex
)

555 
uöt32_t
 
x
;

556 
uöt32_t
 
y
;

560 
	`gë_block_co‹dö©es
(
block_ödex
, &
x
, &
y
);

563 
	`SET_BIT
(
m_mem_poﬁ
[
x
], 
y
);

564 
	}
}

568 
__INLINE
 
uöt32_t
 
	$gë_block_ˇt
(
uöt32_t
 
size
, uöt32_à
block_ödex
)

570 
uöt32_t
 
block_ˇt
 = 0; block_ˇà< 
BLOCK_CAT_COUNT
; block_cat++)

572 i‡(((
size
 !0Ë&& (sizê<
m_block_size
[
block_ˇt
]) &&

573 (
m_block_íd
[
block_ˇt
] !
m_block_°¨t
[block_cat])) ||

574 (
block_ödex
 < 
m_block_íd
[
block_ˇt
]))

576  
block_ˇt
;

581 
	}
}

585 
__INLINE
 
uöt32_t
 
	$gë_block_size
(
uöt32_t
 
block_ödex
)

587 c⁄° 
uöt32_t
 
block_ˇt
 = 
	`gë_block_ˇt
(0, 
block_ödex
);

589 #ifde‡
MEM_MANAGER_ENABLE_DIAGNOSTICS


590 
p_mö_size
 = &
m_mö_size
[
block_ˇt
];

591 
p_max_size
 = &
m_max_size
[
block_ˇt
];

594  
m_block_size
[
block_ˇt
];

595 
	}
}

599 
boﬁ
 
	$is_block_‰ì
(
uöt32_t
 
block_ödex
)

601 
uöt32_t
 
x
;

602 
uöt32_t
 
y
;

606 
	`gë_block_co‹dö©es
(
block_ödex
, &
x
, &
y
);

608  
	`IS_SET
(
m_mem_poﬁ
[
x
], 
y
);

609 
	}
}

613 
	$block_Æloˇã
(
uöt32_t
 
block_ödex
)

615 
uöt32_t
 
x
;

616 
uöt32_t
 
y
;

620 
	`gë_block_co‹dö©es
(
block_ödex
, &
x
, &
y
);

622 
	`CLR_BIT
(
m_mem_poﬁ
[
x
], 
y
);

623 
	}
}

626 
uöt32_t
 
	$ƒf_mem_öô
()

628 
	`NRF_LOG_DEBUG
("[MM]: >>Çrf_mem_init.\r\n");

630 
	`SDK_MUTEX_INIT
(
m_mm_muãx
);

632 
	`MM_MUTEX_LOCK
();

634 
uöt32_t
 
block_ödex
 = 0;

636 
block_ödex
 = 0; block_ödex < 
TOTAL_BLOCK_COUNT
; block_index++)

638 
	`block_öô
(
block_ödex
);

641 #i‡(
MEM_MANAGER_DISABLE_API_PARAM_CHECK
 == 0)

642 
m_moduÀ_öôülized
 = 
åue
;

645 #ifde‡
MEM_MANAGER_ENABLE_DIAGNOSTICS


646 
	`ƒf_mem_dügno£
();

649 
	`MM_MUTEX_UNLOCK
();

651 
	`NRF_LOG_DEBUG
("[MM]: <<Çrf_mem_init.\r\n");

653  
NRF_SUCCESS
;

654 
	}
}

657 
uöt32_t
 
	$ƒf_mem_ª£rve
(
uöt8_t
 ** 
µ_buf„r
, 
uöt32_t
 * 
p_size
)

659 
	`VERIFY_MODULE_INITIALIZED
();

660 
	`NULL_PARAM_CHECK
(
µ_buf„r
);

661 
	`NULL_PARAM_CHECK
(
p_size
);

663 c⁄° 
uöt32_t
 
ªque°ed_size
 = (*
p_size
);

665 
	`VERIFY_REQUESTED_SIZE
(
ªque°ed_size
);

667 
	`NRF_LOG_DEBUG
("[MM]: >>Çrf_mem_ª£rve, sizê0x%04lX.\r\n", 
ªque°ed_size
);

669 
	`MM_MUTEX_LOCK
();

671 c⁄° 
uöt32_t
 
block_ˇt
 = 
	`gë_block_ˇt
(
ªque°ed_size
, 
TOTAL_BLOCK_COUNT
);

672 
uöt32_t
 
block_ödex
 = 
m_block_°¨t
[
block_ˇt
];

673 
uöt32_t
 
mem‹y_ödex
 = 
m_block_mem_°¨t
[
block_ˇt
];

674 
uöt32_t
 
îr_code
 = (
NRF_ERROR_NO_MEM
 | 
NRF_ERROR_MEMORY_MANAGER_ERR_BASE
);

676 
	`NRF_LOG_DEBUG
("[MM]: Start index forÅheÖool = 0x%08lX,Åotal block count 0x%08X\r\n",

677 
block_ödex
,

678 
TOTAL_BLOCK_COUNT
);

680 ; 
block_ödex
 < 
TOTAL_BLOCK_COUNT
; block_index++)

682 
uöt32_t
 
block_size
 = 
	`gë_block_size
(
block_ödex
);

684 i‡(
	`is_block_‰ì
(
block_ödex
Ë=
åue
)

686 
	`NRF_LOG_DEBUG
("[MM]: Re£rvög block 0x%08lX\r\n", 
block_ödex
);

689 
îr_code
 = 
NRF_SUCCESS
;

692 
	`block_Æloˇã
(
block_ödex
);

694 (*
µ_buf„r
Ë&
m_mem‹y
[
mem‹y_ödex
];

695 (*
p_size
Ë
block_size
;

697 #ifde‡
MEM_MANAGER_ENABLE_DIAGNOSTICS


698 (*
p_mö_size
Ë
	`MIN
((*p_mö_size), 
ªque°ed_size
);

699 (*
p_max_size
Ë
	`MAX
((*p_max_size), 
ªque°ed_size
);

704 
mem‹y_ödex
 +
block_size
;

706 i‡(
îr_code
 !
NRF_SUCCESS
)

708 
	`NRF_LOG_DEBUG
 ("[MM]: MemoryÑeservationÑesult %d, memory %p, size %d!",

709 
îr_code
,

710 (
uöt32_t
)(*
µ_buf„r
),

711 (*
p_size
));

713 #ifde‡
MEM_MANAGER_ENABLE_DIAGNOSTICS


714 
	`ƒf_mem_dügno£
();

718 
	`MM_MUTEX_UNLOCK
();

720 
	`NRF_LOG_DEBUG
("[MM]: <<Çrf_mem_reserve %p,Ñesult 0x%08lX.\r\n",

721 (
uöt32_t
)(*
µ_buf„r
), 
îr_code
);

723  
îr_code
;

724 
	}
}

727 * 
	$ƒf_mÆloc
(
uöt32_t
 
size
)

729 
uöt8_t
 * 
buf„r
 = 
NULL
;

730 
uöt32_t
 
Æloˇãd_size
 = 
size
;

732 
uöt32_t
 
ªtvÆ
 = 
	`ƒf_mem_ª£rve
(&
buf„r
, &
Æloˇãd_size
);

734 i‡(
ªtvÆ
 !
NRF_SUCCESS
)

736 
buf„r
 = 
NULL
;

739  
buf„r
;

740 
	}
}

743 * 
	$ƒf_ˇŒoc
(
uöt32_t
 
cou¡
, uöt32_à
size
)

745 
uöt8_t
 * 
buf„r
 = 
NULL
;

746 
uöt32_t
 
Æloˇãd_size
 = (
size
 * 
cou¡
);

748 
	`NRF_LOG_DEBUG
 ("[ƒf_ˇŒoc]: Reque°ed sizê%d, cou¡ %d\r\n", 
Æloˇãd_size
, 
cou¡
);

750 
uöt32_t
 
ªtvÆ
 = 
	`ƒf_mem_ª£rve
(&
buf„r
,&
Æloˇãd_size
);

751 i‡(
ªtvÆ
 =
NRF_SUCCESS
)

753 
	`NRF_LOG_DEBUG
 ("[ƒf_ˇŒoc]: buf„∏%p,ÅŸÆ sizê%d\r\n", (
uöt32_t
)
buf„r
, 
Æloˇãd_size
);

754 
	`mem£t
(
buf„r
,0, 
Æloˇãd_size
);

758 
	`NRF_LOG_DEBUG
("[ƒf_ˇŒoc]: FaûedÅÿÆloˇã mem‹y %d\r\n", 
Æloˇãd_size
);

759 
buf„r
 = 
NULL
;

762  
buf„r
;

763 
	}
}

766 
	$ƒf_‰ì
(* 
p_mem
)

768 
	`VERIFY_MODULE_INITIALIZED_VOID
();

769 
	`NULL_PARAM_CHECK_VOID
(
p_mem
);

771 
	`NRF_LOG_DEBUG
("[MM]: >>Çrf_‰ì %p.\r\n", (
uöt32_t
)
p_mem
);

773 
	`MM_MUTEX_LOCK
();

775 
uöt32_t
 
ödex
;

776 
uöt32_t
 
mem‹y_ödex
 = 0;

778 
ödex
 = 0; index < 
TOTAL_BLOCK_COUNT
; index++)

780 i‡(&
m_mem‹y
[
mem‹y_ödex
] =
p_mem
)

783 
	`NRF_LOG_DEBUG
("[MM]: << Fªeög block %d.\r\n", 
ödex
);

784 
	`block_öô
(
ödex
);

787 
mem‹y_ödex
 +
	`gë_block_size
(
ödex
);

790 
	`MM_MUTEX_UNLOCK
();

792 
	`NRF_LOG_DEBUG
("[MM]: <<Çrf_free.\r\n");

794 
	}
}

797 * 
	$ƒf_ªÆloc
(* 
p_mem
, 
uöt32_t
 
size
)

799  
p_mem
;

800 
	}
}

803 #ifde‡
MEM_MANAGER_ENABLE_DIAGNOSTICS


814 
	$¥öt_block_öfo
(
uöt32_t
 
block_ˇt
, uöt32_à* 
p_mem_ö_u£
)

816 
	#PRINT_COLUMN_WIDTH
 13

	)

817 
	#PRINT_BUFFER_SIZE
 80

	)

818 
	#ASCII_VALUE_FOR_SPACE
 32

	)

820 
¥öt_buf„r
[
PRINT_BUFFER_SIZE
];

821 c⁄° 
uöt32_t
 
tŸÆ_cou¡
 = (
m_block_°¨t
[
block_ˇt
] + 
m_block_cou¡
[block_cat]);

822 
uöt32_t
 
ö_u£
 = 0;

823 
uöt32_t
 
num_of_blocks
 = 0;

824 
uöt32_t
 
ödex
 = 
m_block_°¨t
[
block_ˇt
];

825 
uöt32_t
 
cﬁumn_numbî
;

828 i‡(
m_block_cou¡
[
block_ˇt
] != 0)

830 
	`mem£t
(
¥öt_buf„r
, 
ASCII_VALUE_FOR_SPACE
, 
PRINT_BUFFER_SIZE
);

832 ; 
ödex
 < 
tŸÆ_cou¡
; index++)

834 i‡(
	`is_block_‰ì
(
ödex
Ë=
Ál£
)

836 
num_of_blocks
++;

837 
ö_u£
 +
m_block_size
[
block_ˇt
];

841 
cﬁumn_numbî
 = 0;

842 
	`¢¥ötf
(&
¥öt_buf„r
[
cﬁumn_numbî
 * 
PRINT_COLUMN_WIDTH
],

843 
PRINT_COLUMN_WIDTH
,

845 
m_block_desc_°r
[
block_ˇt
]);

847 
cﬁumn_numbî
++;

848 
	`¢¥ötf
(&
¥öt_buf„r
[
cﬁumn_numbî
 * 
PRINT_COLUMN_WIDTH
],

849 
PRINT_COLUMN_WIDTH
,

851 
m_block_size
[
block_ˇt
]);

853 
cﬁumn_numbî
++;

854 
	`¢¥ötf
(&
¥öt_buf„r
[
cﬁumn_numbî
 * 
PRINT_COLUMN_WIDTH
],

855 
PRINT_COLUMN_WIDTH
,

857 
m_block_cou¡
[
block_ˇt
]);

859 
cﬁumn_numbî
++;

860 
	`¢¥ötf
(&
¥öt_buf„r
[
cﬁumn_numbî
 * 
PRINT_COLUMN_WIDTH
],

861 
PRINT_COLUMN_WIDTH
,

863 
num_of_blocks
);

865 
cﬁumn_numbî
++;

866 
	`¢¥ötf
(&
¥öt_buf„r
[
cﬁumn_numbî
 * 
PRINT_COLUMN_WIDTH
],

867 
PRINT_COLUMN_WIDTH
,

869 
m_mö_size
[
block_ˇt
]);

871 
cﬁumn_numbî
++;

872 
	`¢¥ötf
(&
¥öt_buf„r
[
cﬁumn_numbî
 * 
PRINT_COLUMN_WIDTH
],

873 
PRINT_COLUMN_WIDTH
,

875 
m_max_size
[
block_ˇt
]);

877 
cﬁumn_numbî
++;

878 c⁄° 
uöt32_t
 
cﬁumn_íd
 = (
cﬁumn_numbî
 * 
PRINT_COLUMN_WIDTH
);

880 
j
 = 0; j < 
cﬁumn_íd
; j ++)

882 i‡(
¥öt_buf„r
[
j
] == 0)

884 
¥öt_buf„r
[
j
] = 0x20;

887 
	`¢¥ötf
(&
¥öt_buf„r
[
cﬁumn_íd
], 2, "|");

889 
	`NRF_LOG_BYTES_DEBUG
(
¥öt_buf„r
, 
	`°æí
(print_buffer));

891 (*
p_mem_ö_u£
Ë+
ö_u£
;

893 
	}
}

896 
	$ƒf_mem_dügno£
()

898 
uöt32_t
 
ö_u£
 = 0;

900 
	`NRF_LOG_DEBUG
 ("\r\n");

901 
	`NRF_LOG_DEBUG
 ("+------------+------------+------------+------------+------------+------------+\r\n");

902 
	`NRF_LOG_DEBUG
 ("| Block | Size | Total | In Use | Min Alloc | Max Alloc |\r\n");

903 
	`NRF_LOG_DEBUG
 ("+------------+------------+------------+------------+------------+------------+\r\n");

905 
	`¥öt_block_öfo
(
BLOCK_CAT_XXS
, &
ö_u£
);

906 
	`¥öt_block_öfo
(
BLOCK_CAT_XS
, &
ö_u£
);

907 
	`¥öt_block_öfo
(
BLOCK_CAT_SMALL
, &
ö_u£
);

908 
	`¥öt_block_öfo
(
BLOCK_CAT_MEDIUM
, &
ö_u£
);

909 
	`¥öt_block_öfo
(
BLOCK_CAT_LARGE
, &
ö_u£
);

910 
	`¥öt_block_öfo
(
BLOCK_CAT_XL
, &
ö_u£
);

911 
	`¥öt_block_öfo
(
BLOCK_CAT_XXL
, &
ö_u£
);

913 
	`NRF_LOG_DEBUG
 ("+------------+------------+------------+------------+------------+------------+\r\n");

914 
	`NRF_LOG_DEBUG
 ("| Total | %d | %d | %d\r\n",

915 
TOTAL_MEMORY_SIZE
, 
TOTAL_BLOCK_COUNT
,
ö_u£
);

916 
	`NRF_LOG_DEBUG
 ("+------------+------------+------------+------------+------------+------------+\r\n");

917 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\timer\app_timer.c

40 
	~"sdk_comm⁄.h
"

41 #i‡
NRF_MODULE_ENABLED
(
APP_TIMER
)

42 
	~"≠p_timî.h
"

43 
	~<°dlib.h
>

44 
	~"ƒf.h
"

45 
	~"ƒf_soc.h
"

46 
	~"≠p_îr‹.h
"

47 
	~"ƒf_dñay.h
"

48 
	~"≠p_utû_∂©f‹m.h
"

50 
	#RTC1_IRQ_PRI
 
APP_IRQ_PRIORITY_LOWEST


	)

51 
	#SWI_IRQ_PRI
 
APP_IRQ_PRIORITY_LOWEST


	)

56 
STATIC_ASSERT
(
RTC1_IRQ_PRI
 =
SWI_IRQ_PRI
);

58 
	#MAX_RTC_COUNTER_VAL
 0x00FFFFFF

	)

60 
	#RTC_COMPARE_OFFSET_MIN
 3

	)

62 
	#MAX_RTC_TASKS_DELAY
 47

	)

64 
	#SWI_IRQn
 
SWI0_IRQn


	)

65 
	#SWI_IRQH™dÀr
 
SWI0_IRQH™dÀr


	)

67 
	#MODULE_INITIALIZED
 (
m_›_queue
.
p_u£r_›_queue
 !
NULL
Ë

	)

72 
uöt32_t
 
	mticks_to_expúe
;

73 
uöt32_t
 
	mticks_©_°¨t
;

74 
uöt32_t
 
	mticks_fú°_öãrvÆ
;

75 
uöt32_t
 
	mticks_≥riodic_öãrvÆ
;

76 
boﬁ
 
	mis_ru¬ög
;

77 
≠p_timî_mode_t
 
	mmode
;

78 
≠p_timî_timeout_h™dÀr_t
 
	mp_timeout_h™dÀr
;

79 * 
	mp_c⁄ãxt
;

80 * 
	m√xt
;

81 } 
	ttimî_node_t
;

83 
STATIC_ASSERT
((
timî_node_t
Ë=
APP_TIMER_NODE_SIZE
);

88 
	mTIMER_USER_OP_TYPE_NONE
,

89 
	mTIMER_USER_OP_TYPE_START
,

90 
	mTIMER_USER_OP_TYPE_STOP
,

91 
	mTIMER_USER_OP_TYPE_STOP_ALL


92 } 
	ttimî_u£r_›_ty≥_t
;

97 
uöt32_t
 
	mticks_©_°¨t
;

98 
uöt32_t
 
	mticks_fú°_öãrvÆ
;

99 
uöt32_t
 
	mticks_≥riodic_öãrvÆ
;

100 * 
	mp_c⁄ãxt
;

101 } 
	ttimî_u£r_›_°¨t_t
;

106 
timî_u£r_›_ty≥_t
 
	m›_ty≥
;

107 
timî_node_t
 * 
	mp_node
;

110 
timî_u£r_›_°¨t_t
 
	m°¨t
;

111 } 
	m∑øms
;

112 } 
	ttimî_u£r_›_t
;

114 
STATIC_ASSERT
((
timî_u£r_›_t
Ë<
APP_TIMER_USER_OP_SIZE
);

115 
STATIC_ASSERT
((
timî_u£r_›_t
) % 4 == 0);

124 
uöt8_t
 
	mfú°
;

125 
uöt8_t
 
	mœ°
;

126 
uöt8_t
 
	msize
;

127 
timî_u£r_›_t
 * 
	mp_u£r_›_queue
;

128 } 
	ttimî_›_queue_t
;

130 
STATIC_ASSERT
((
timî_›_queue_t
) % 4 == 0);

132 
	#CONTEXT_QUEUE_SIZE_MAX
 (2)

	)

134 
timî_›_queue_t
 
	gm_›_queue
;

135 
timî_node_t
 * 
	gmp_timî_id_hód
;

136 
uöt32_t
 
	gm_ticks_œã°
;

137 
uöt32_t
 
	gm_ticks_ñ≠£d
[
CONTEXT_QUEUE_SIZE_MAX
];

138 
uöt8_t
 
	gm_ticks_ñ≠£d_q_ªad_öd
;

139 
uöt8_t
 
	gm_ticks_ñ≠£d_q_wrôe_öd
;

140 
≠p_timî_evt_scheduÀ_func_t
 
	gm_evt_scheduÀ_func
;

141 
boﬁ
 
	gm_πc1_ru¬ög
;

142 
boﬁ
 
	gm_πc1_ª£t
;

144 #i‡
APP_TIMER_WITH_PROFILER


145 
uöt8_t
 
	gm_max_u£r_›_queue_utûiz©i⁄
;

152 
	$πc1_öô
(
uöt32_t
 
¥esˇÀr
)

154 
NRF_RTC1
->
PRESCALER
 = 
¥esˇÀr
;

155 
	`NVIC_SëPri‹ôy
(
RTC1_IRQn
, 
RTC1_IRQ_PRI
);

156 
	}
}

161 
	$πc1_°¨t
()

163 
NRF_RTC1
->
EVTENSET
 = 
RTC_EVTEN_COMPARE0_Msk
;

164 
NRF_RTC1
->
INTENSET
 = 
RTC_INTENSET_COMPARE0_Msk
;

166 
	`NVIC_CÀ¨PídögIRQ
(
RTC1_IRQn
);

167 
	`NVIC_E«bÀIRQ
(
RTC1_IRQn
);

169 
NRF_RTC1
->
TASKS_START
 = 1;

170 
	`ƒf_dñay_us
(
MAX_RTC_TASKS_DELAY
);

172 
m_πc1_ru¬ög
 = 
åue
;

173 
	}
}

178 
	$πc1_°›
()

180 
	`NVIC_DißbÀIRQ
(
RTC1_IRQn
);

182 
NRF_RTC1
->
EVTENCLR
 = 
RTC_EVTEN_COMPARE0_Msk
;

183 
NRF_RTC1
->
INTENCLR
 = 
RTC_INTENSET_COMPARE0_Msk
;

185 
NRF_RTC1
->
TASKS_STOP
 = 1;

186 
	`ƒf_dñay_us
(
MAX_RTC_TASKS_DELAY
);

188 
NRF_RTC1
->
TASKS_CLEAR
 = 1;

189 
m_ticks_œã°
 = 0;

190 
	`ƒf_dñay_us
(
MAX_RTC_TASKS_DELAY
);

192 
m_πc1_ru¬ög
 = 
Ál£
;

193 
	}
}

200 
__INLINE
 
uöt32_t
 
	$πc1_cou¡î_gë
()

202  
NRF_RTC1
->
COUNTER
;

203 
	}
}

210 
__INLINE
 
uöt32_t
 
	$ticks_diff_gë
(
uöt32_t
 
ticks_now
, uöt32_à
ticks_ﬁd
)

212  ((
ticks_now
 - 
ticks_ﬁd
Ë& 
MAX_RTC_COUNTER_VAL
);

213 
	}
}

221 
__INLINE
 
	$πc1_com∑ª0_£t
(
uöt32_t
 
vÆue
)

223 
NRF_RTC1
->
CC
[0] = 
vÆue
;

224 
	}
}

231 
	$timî_li°_ö£π
(
timî_node_t
 * 
p_timî
)

233 i‡(
mp_timî_id_hód
 =
NULL
)

235 
mp_timî_id_hód
 = 
p_timî
;

239 i‡(
p_timî
->
ticks_to_expúe
 <
mp_timî_id_hód
->ticks_to_expire)

241 
mp_timî_id_hód
->
ticks_to_expúe
 -
p_timî
->ticks_to_expire;

243 
p_timî
->
√xt
 = 
mp_timî_id_hód
;

244 
mp_timî_id_hód
 = 
p_timî
;

248 
timî_node_t
 * 
p_¥evious
;

249 
timî_node_t
 * 
p_cuºít
;

250 
uöt32_t
 
ticks_to_expúe
;

252 
ticks_to_expúe
 = 
p_timî
->ticks_to_expire;

253 
p_¥evious
 = 
mp_timî_id_hód
;

254 
p_cuºít
 = 
mp_timî_id_hód
;

256 (
p_cuºít
 !
NULL
Ë&& (
ticks_to_expúe
 >Ö_current->ticks_to_expire))

258 
ticks_to_expúe
 -
p_cuºít
->ticks_to_expire;

259 
p_¥evious
 = 
p_cuºít
;

260 
p_cuºít
 =Ö_cuºít->
√xt
;

263 i‡(
p_cuºít
 !
NULL
)

265 
p_cuºít
->
ticks_to_expúe
 -=Åicks_to_expire;

268 
p_timî
->
ticks_to_expúe
 =Åicks_to_expire;

269 
p_timî
->
√xt
 = 
p_cuºít
;

270 
p_¥evious
->
√xt
 = 
p_timî
;

273 
	}
}

280 
	$timî_li°_ªmove
(
timî_node_t
 * 
p_timî
)

282 
timî_node_t
 * 
p_¥evious
;

283 
timî_node_t
 * 
p_cuºít
;

284 
uöt32_t
 
timeout
;

287 
p_¥evious
 = 
mp_timî_id_hód
;

288 
p_cuºít
 = 
p_¥evious
;

290 
p_cuºít
 !
NULL
)

292 i‡(
p_cuºít
 =
p_timî
)

296 
p_¥evious
 = 
p_cuºít
;

297 
p_cuºít
 =Ö_cuºít->
√xt
;

301 i‡(
p_cuºít
 =
NULL
)

307 i‡(
p_¥evious
 =
p_cuºít
)

309 
mp_timî_id_hód
 = mp_timî_id_hód->
√xt
;

312 i‡(
mp_timî_id_hód
 =
NULL
)

314 
NRF_RTC1
->
TASKS_CLEAR
 = 1;

315 
m_ticks_œã°
 = 0;

316 
m_πc1_ª£t
 = 
åue
;

321 
timeout
 = 
p_cuºít
->
ticks_to_expúe
;

324 
p_¥evious
->
√xt
 = 
p_cuºít
->next;

327 
p_cuºít
 = 
p_¥evious
->
√xt
;

328 i‡(
p_cuºít
 !
NULL
)

330 
p_cuºít
->
ticks_to_expúe
 +
timeout
;

332 
	}
}

337 
	$timî_timeouts_check_sched
()

339 
	`NVIC_SëPídögIRQ
(
RTC1_IRQn
);

340 
	}
}

345 
	$timî_li°_h™dÀr_sched
()

347 
	`NVIC_SëPídögIRQ
(
SWI_IRQn
);

348 
	}
}

356 
	$timeout_h™dÀr_exec
(
timî_node_t
 * 
p_timî
)

358 i‡(
m_evt_scheduÀ_func
 !
NULL
)

360 
uöt32_t
 
îr_code
 = 
	`m_evt_scheduÀ_func
(
p_timî
->
p_timeout_h™dÀr
,Ö_timî->
p_c⁄ãxt
);

361 
	`APP_ERROR_CHECK
(
îr_code
);

365 
p_timî
->
	`p_timeout_h™dÀr
’_timî->
p_c⁄ãxt
);

367 
	}
}

372 
	$timî_timeouts_check
()

375 i‡(
mp_timî_id_hód
 !
NULL
)

377 
timî_node_t
 * 
p_timî
;

378 
timî_node_t
 * 
p_¥evious_timî
;

379 
uöt32_t
 
ticks_ñ≠£d
;

380 
uöt32_t
 
ticks_expúed
;

383 
ticks_expúed
 = 0;

386 
ticks_ñ≠£d
 = 
	`ticks_diff_gë
(
	`πc1_cou¡î_gë
(), 
m_ticks_œã°
);

389 
p_timî
 = 
mp_timî_id_hód
;

392 
p_timî
 !
NULL
)

395 i‡(
ticks_ñ≠£d
 < 
p_timî
->
ticks_to_expúe
)

401 
ticks_ñ≠£d
 -
p_timî
->
ticks_to_expúe
;

402 
ticks_expúed
 +
p_timî
->
ticks_to_expúe
;

405 
p_¥evious_timî
 = 
p_timî
;

406 
p_timî
 =Ö_timî->
√xt
;

409 i‡(
p_¥evious_timî
->
is_ru¬ög
)

411 
p_¥evious_timî
->
is_ru¬ög
 = 
Ál£
;

412 
	`timeout_h™dÀr_exec
(
p_¥evious_timî
);

417 i‡(
m_ticks_ñ≠£d_q_ªad_öd
 =
m_ticks_ñ≠£d_q_wrôe_öd
)

424 i‡(++
m_ticks_ñ≠£d_q_wrôe_öd
 =
CONTEXT_QUEUE_SIZE_MAX
)

428 
m_ticks_ñ≠£d_q_wrôe_öd
 = 0;

433 
m_ticks_ñ≠£d
[
m_ticks_ñ≠£d_q_wrôe_öd
] = 
ticks_expúed
;

435 
	`timî_li°_h™dÀr_sched
();

437 
	}
}

446 
boﬁ
 
	$ñ≠£d_ticks_acquúe
(
uöt32_t
 * 
p_ticks_ñ≠£d
)

449 i‡(
m_ticks_ñ≠£d_q_ªad_öd
 !
m_ticks_ñ≠£d_q_wrôe_öd
)

452 
m_ticks_ñ≠£d_q_ªad_öd
++;

453 i‡(
m_ticks_ñ≠£d_q_ªad_öd
 =
CONTEXT_QUEUE_SIZE_MAX
)

455 
m_ticks_ñ≠£d_q_ªad_öd
 = 0;

458 *
p_ticks_ñ≠£d
 = 
m_ticks_ñ≠£d
[
m_ticks_ñ≠£d_q_ªad_öd
];

460 
m_ticks_œã°
 +*
p_ticks_ñ≠£d
;

461 
m_ticks_œã°
 &
MAX_RTC_COUNTER_VAL
;

463  
åue
;

468 *
p_ticks_ñ≠£d
 = 0;

469  
Ál£
;

471 
	}
}

478 
boﬁ
 
	$li°_dñëi⁄s_h™dÀr
()

480 
timî_node_t
 * 
p_timî_ﬁd_hód
;

481 
uöt8_t
 
u£r_›s_fú°
 = 
m_›_queue
.
fú°
;

484 
p_timî_ﬁd_hód
 = 
mp_timî_id_hód
;

486 
u£r_›s_fú°
 !
m_›_queue
.
œ°
)

488 
timî_u£r_›_t
 * 
p_u£r_›
 = &
m_›_queue
.
p_u£r_›_queue
[
u£r_›s_fú°
];

491 
u£r_›s_fú°
++;

492 i‡(
u£r_›s_fú°
 =
m_›_queue
.
size
)

494 
u£r_›s_fú°
 = 0;

497 
p_u£r_›
->
›_ty≥
)

499 
TIMER_USER_OP_TYPE_STOP
:

501 
	`timî_li°_ªmove
(
p_u£r_›
->
p_node
);

504 
TIMER_USER_OP_TYPE_STOP_ALL
:

506 
mp_timî_id_hód
 !
NULL
)

508 
timî_node_t
 * 
p_hód
 = 
mp_timî_id_hód
;

510 
p_hód
->
is_ru¬ög
 = 
Ál£
;

511 
mp_timî_id_hód
 = 
p_hód
->
√xt
;

522  (
mp_timî_id_hód
 !
p_timî_ﬁd_hód
);

523 
	}
}

532 
	$expúed_timîs_h™dÀr
(
uöt32_t
 
ticks_ñ≠£d
,

533 
uöt32_t
 
ticks_¥evious
,

534 
timî_node_t
 ** 
p_ª°¨t_li°_hód
)

536 
uöt32_t
 
ticks_expúed
 = 0;

538 
mp_timî_id_hód
 !
NULL
)

540 
timî_node_t
 * 
p_timî
;

541 
timî_node_t
 * 
p_timî_expúed
;

544 
p_timî
 = 
mp_timî_id_hód
;

547 i‡(
ticks_ñ≠£d
 < 
p_timî
->
ticks_to_expúe
)

549 
p_timî
->
ticks_to_expúe
 -
ticks_ñ≠£d
;

554 
ticks_ñ≠£d
 -
p_timî
->
ticks_to_expúe
;

555 
ticks_expúed
 +
p_timî
->
ticks_to_expúe
;

558 
p_timî
->
ticks_to_expúe
 = 0;

561 
p_timî_expúed
 = 
mp_timî_id_hód
;

562 
mp_timî_id_hód
 = 
p_timî
->
√xt
;

565 i‡(
p_timî
->
ticks_≥riodic_öãrvÆ
 != 0)

567 
p_timî
->
ticks_©_°¨t
 = (
ticks_¥evious
 + 
ticks_expúed
Ë& 
MAX_RTC_COUNTER_VAL
;

568 
p_timî
->
ticks_fú°_öãrvÆ
 =Ö_timî->
ticks_≥riodic_öãrvÆ
;

569 
p_timî
->
√xt
 = *
p_ª°¨t_li°_hód
;

570 *
p_ª°¨t_li°_hód
 = 
p_timî_expúed
;

573 
	}
}

582 
boﬁ
 
	$li°_ö£πi⁄s_h™dÀr
(
timî_node_t
 * 
p_ª°¨t_li°_hód
)

584 
timî_node_t
 * 
p_timî_id_ﬁd_hód
;

587 
p_timî_id_ﬁd_hód
 = 
mp_timî_id_hód
;

590 (
p_ª°¨t_li°_hód
 !
NULL
Ë|| (
m_›_queue
.
fú°
 !m_›_queue.
œ°
))

592 
timî_node_t
 * 
p_timî
;

594 i‡(
p_ª°¨t_li°_hód
 !
NULL
)

596 
p_timî
 = 
p_ª°¨t_li°_hód
;

597 
p_ª°¨t_li°_hód
 = 
p_timî
->
√xt
;

601 
timî_u£r_›_t
 * 
p_u£r_›
 = &
m_›_queue
.
p_u£r_›_queue
[m_›_queue.
fú°
];

603 
m_›_queue
.
fú°
++;

604 i‡(
m_›_queue
.
fú°
 =m_›_queue.
size
)

606 
m_›_queue
.
fú°
 = 0;

609 
p_timî
 = 
p_u£r_›
->
p_node
;

611 i‡((
p_u£r_›
->
›_ty≥
 !
TIMER_USER_OP_TYPE_START
Ë|| 
p_timî
->
is_ru¬ög
)

616 
p_timî
->
ticks_©_°¨t
 = 
p_u£r_›
->
∑øms
.
°¨t
.ticks_at_start;

617 
p_timî
->
ticks_fú°_öãrvÆ
 = 
p_u£r_›
->
∑øms
.
°¨t
.ticks_first_interval;

618 
p_timî
->
ticks_≥riodic_öãrvÆ
 = 
p_u£r_›
->
∑øms
.
°¨t
.ticks_periodic_interval;

619 
p_timî
->
p_c⁄ãxt
 = 
p_u£r_›
->
∑øms
.
°¨t
.p_context;

621 i‡(
m_πc1_ª£t
)

623 
p_timî
->
ticks_©_°¨t
 = 0;

629 ((
p_timî
->
ticks_©_°¨t
 - 
m_ticks_œã°
Ë& 
MAX_RTC_COUNTER_VAL
)

631 (
MAX_RTC_COUNTER_VAL
 / 2)

634 
p_timî
->
ticks_to_expúe
 = 
	`ticks_diff_gë
’_timî->
ticks_©_°¨t
, 
m_ticks_œã°
) +

635 
p_timî
->
ticks_fú°_öãrvÆ
;

639 
uöt32_t
 
dñè_cuºít_°¨t
;

641 
dñè_cuºít_°¨t
 = 
	`ticks_diff_gë
(
m_ticks_œã°
, 
p_timî
->
ticks_©_°¨t
);

642 i‡(
p_timî
->
ticks_fú°_öãrvÆ
 > 
dñè_cuºít_°¨t
)

644 
p_timî
->
ticks_to_expúe
 =Ö_timî->
ticks_fú°_öãrvÆ
 - 
dñè_cuºít_°¨t
;

648 
p_timî
->
ticks_to_expúe
 = 0;

652 
p_timî
->
ticks_©_°¨t
 = 0;

653 
p_timî
->
ticks_fú°_öãrvÆ
 = 0;

654 
p_timî
->
is_ru¬ög
 = 
åue
;

655 
p_timî
->
√xt
 = 
NULL
;

658 
	`timî_li°_ö£π
(
p_timî
);

661  (
mp_timî_id_hód
 !
p_timî_id_ﬁd_hód
);

662 
	}
}

667 
	$com∑ª_ªg_upd©e
(
timî_node_t
 * 
p_timî_id_hód_ﬁd
)

670 i‡(
mp_timî_id_hód
 !
NULL
)

672 
uöt32_t
 
ticks_to_expúe
 = 
mp_timî_id_hód
->ticks_to_expire;

673 
uöt32_t
 
¥e_cou¡î_vÆ
 = 
	`πc1_cou¡î_gë
();

674 
uöt32_t
 
cc
 = 
m_ticks_œã°
;

675 
uöt32_t
 
ticks_ñ≠£d
 = 
	`ticks_diff_gë
(
¥e_cou¡î_vÆ
, 
cc
Ë+ 
RTC_COMPARE_OFFSET_MIN
;

677 i‡(!
m_πc1_ru¬ög
)

680 
	`πc1_°¨t
();

683 
cc
 +(
ticks_ñ≠£d
 < 
ticks_to_expúe
) ?Åicks_to_expire :Åicks_elapsed;

684 
cc
 &
MAX_RTC_COUNTER_VAL
;

686 
	`πc1_com∑ª0_£t
(
cc
);

688 
uöt32_t
 
po°_cou¡î_vÆ
 = 
	`πc1_cou¡î_gë
();

691 (
	`ticks_diff_gë
(
po°_cou¡î_vÆ
, 
¥e_cou¡î_vÆ
Ë+ 
RTC_COMPARE_OFFSET_MIN
)

693 
	`ticks_diff_gë
(
cc
, 
¥e_cou¡î_vÆ
)

701 
	`πc1_com∑ª0_£t
(
	`πc1_cou¡î_gë
());

702 
	`ƒf_dñay_us
(
MAX_RTC_TASKS_DELAY
);

703 
	`timî_timeouts_check_sched
();

708 #i‡(
APP_TIMER_KEEPS_RTC_ACTIVE
 == 0)

710 
	`πc1_°›
();

713 
	}
}

718 
	$timî_li°_h™dÀr
()

720 
timî_node_t
 * 
p_ª°¨t_li°_hód
 = 
NULL
;

722 
uöt32_t
 
ticks_ñ≠£d
;

723 
uöt32_t
 
ticks_¥evious
;

724 
boﬁ
 
ticks_have_ñ≠£d
;

725 
boﬁ
 
com∑ª_upd©e
;

726 
timî_node_t
 * 
p_timî_id_hód_ﬁd
;

728 #i‡
APP_TIMER_WITH_PROFILER


730 
uöt8_t
 
size
 = 
m_›_queue
.size;

731 
uöt8_t
 
fú°
 = 
m_›_queue
.first;

732 
uöt8_t
 
œ°
 = 
m_›_queue
.last;

733 
uöt8_t
 
utûiz©i⁄
 = (
fú°
 <
œ°
Ë? (œ° - fú°Ë: (
size
 + 1 - first +Üast);

735 i‡(
utûiz©i⁄
 > 
m_max_u£r_›_queue_utûiz©i⁄
)

737 
m_max_u£r_›_queue_utûiz©i⁄
 = 
utûiz©i⁄
;

743 
ticks_¥evious
 = 
m_ticks_œã°
;

744 
p_timî_id_hód_ﬁd
 = 
mp_timî_id_hód
;

747 
ticks_have_ñ≠£d
 = 
	`ñ≠£d_ticks_acquúe
(&
ticks_ñ≠£d
);

750 
com∑ª_upd©e
 = 
	`li°_dñëi⁄s_h™dÀr
();

753 i‡(
ticks_have_ñ≠£d
)

755 
	`expúed_timîs_h™dÀr
(
ticks_ñ≠£d
, 
ticks_¥evious
, &
p_ª°¨t_li°_hód
);

756 
com∑ª_upd©e
 = 
åue
;

760 i‡(
	`li°_ö£πi⁄s_h™dÀr
(
p_ª°¨t_li°_hód
))

762 
com∑ª_upd©e
 = 
åue
;

766 i‡(
com∑ª_upd©e
)

768 
	`com∑ª_ªg_upd©e
(
p_timî_id_hód_ﬁd
);

770 
m_πc1_ª£t
 = 
Ál£
;

771 
	}
}

778 
	$u£r_›_íque
(
uöt8_t
 
œ°_ödex
)

780 
m_›_queue
.
œ°
 = 
œ°_ödex
;

781 
	}
}

790 
timî_u£r_›_t
 * 
	$u£r_›_Æloc
–
uöt8_t
 * 
p_œ°_ödex
)

792 
uöt8_t
 
œ°
;

793 
timî_u£r_›_t
 * 
p_u£r_›
;

795 
œ°
 = 
m_›_queue
.last + 1;

796 i‡(
œ°
 =
m_›_queue
.
size
)

799 
œ°
 = 0;

801 i‡(
œ°
 =
m_›_queue
.
fú°
)

804  
NULL
;

807 *
p_œ°_ödex
 = 
œ°
;

808 
p_u£r_›
 = &
m_›_queue
.
p_u£r_›_queue
[m_›_queue.
œ°
];

810  
p_u£r_›
;

811 
	}
}

824 
uöt32_t
 
	$timî_°¨t_›_scheduÀ
(
timî_node_t
 * 
p_node
,

825 
uöt32_t
 
timeout_öôül
,

826 
uöt32_t
 
timeout_≥riodic
,

827 * 
p_c⁄ãxt
)

829 
uöt8_t
 
œ°_ödex
;

830 
uöt32_t
 
îr_code
 = 
NRF_SUCCESS
;

832 
	`CRITICAL_REGION_ENTER
();

833 
timî_u£r_›_t
 * 
p_u£r_›
 = 
	`u£r_›_Æloc
(&
œ°_ödex
);

834 i‡(
p_u£r_›
 =
NULL
)

836 
îr_code
 = 
NRF_ERROR_NO_MEM
;

841 
p_u£r_›
->
›_ty≥
 = 
TIMER_USER_OP_TYPE_START
;

842 
p_u£r_›
->
p_node
 =Ö_node;

843 
p_u£r_›
->
∑øms
.
°¨t
.
ticks_©_°¨t
 = 
	`πc1_cou¡î_gë
();

844 
p_u£r_›
->
∑øms
.
°¨t
.
ticks_fú°_öãrvÆ
 = 
timeout_öôül
;

845 
p_u£r_›
->
∑øms
.
°¨t
.
ticks_≥riodic_öãrvÆ
 = 
timeout_≥riodic
;

846 
p_u£r_›
->
∑øms
.
°¨t
.
p_c⁄ãxt
 =Ö_context;

848 
	`u£r_›_íque
(
œ°_ödex
);

850 
	`CRITICAL_REGION_EXIT
();

852 i‡(
îr_code
 =
NRF_SUCCESS
)

854 
	`timî_li°_h™dÀr_sched
();

857  
îr_code
;

858 
	}
}

869 
uöt32_t
 
	$timî_°›_›_scheduÀ
(
timî_node_t
 * 
p_node
,

870 
timî_u£r_›_ty≥_t
 
›_ty≥
)

872 
uöt8_t
 
œ°_ödex
;

873 
uöt32_t
 
îr_code
 = 
NRF_SUCCESS
;

875 
	`CRITICAL_REGION_ENTER
();

876 
timî_u£r_›_t
 * 
p_u£r_›
 = 
	`u£r_›_Æloc
(&
œ°_ödex
);

877 i‡(
p_u£r_›
 =
NULL
)

879 
îr_code
 = 
NRF_ERROR_NO_MEM
;

883 
p_u£r_›
->
›_ty≥
 = op_type;

884 
p_u£r_›
->
p_node
 =Ö_node;

886 
	`u£r_›_íque
(
œ°_ödex
);

888 
	`CRITICAL_REGION_EXIT
();

890 i‡(
îr_code
 =
NRF_SUCCESS
)

892 
	`timî_li°_h™dÀr_sched
();

895  
îr_code
;

896 
	}
}

902 
	$RTC1_IRQH™dÀr
()

905 
NRF_RTC1
->
EVENTS_COMPARE
[0] = 0;

906 
NRF_RTC1
->
EVENTS_COMPARE
[1] = 0;

907 
NRF_RTC1
->
EVENTS_COMPARE
[2] = 0;

908 
NRF_RTC1
->
EVENTS_COMPARE
[3] = 0;

909 
NRF_RTC1
->
EVENTS_TICK
 = 0;

910 
NRF_RTC1
->
EVENTS_OVRFLW
 = 0;

913 
	`timî_timeouts_check
();

914 
	}
}

921 
	$SWI_IRQH™dÀr
()

923 
	`timî_li°_h™dÀr
();

924 
	}
}

927 
uöt32_t
 
	$≠p_timî_öô
(
uöt32_t
 
¥esˇÀr
,

928 
uöt8_t
 
›_queue_size
,

929 * 
p_buf„r
,

930 
≠p_timî_evt_scheduÀ_func_t
 
evt_scheduÀ_func
)

933 i‡(!
	`is_w‹d_Æig√d
(
p_buf„r
))

935  
NRF_ERROR_INVALID_PARAM
;

938 i‡(
p_buf„r
 =
NULL
)

940  
NRF_ERROR_INVALID_PARAM
;

944 
	`πc1_°›
();

946 
m_evt_scheduÀ_func
 = 
evt_scheduÀ_func
;

949 
m_›_queue
.
fú°
 = 0;

950 
m_›_queue
.
œ°
 = 0;

951 
m_›_queue
.
size
 = 
›_queue_size
;

952 
m_›_queue
.
p_u£r_›_queue
 = 
p_buf„r
;

954 
mp_timî_id_hód
 = 
NULL
;

955 
m_ticks_ñ≠£d_q_ªad_öd
 = 0;

956 
m_ticks_ñ≠£d_q_wrôe_öd
 = 0;

958 #i‡
APP_TIMER_WITH_PROFILER


959 
m_max_u£r_›_queue_utûiz©i⁄
 = 0;

962 
	`NVIC_CÀ¨PídögIRQ
(
SWI_IRQn
);

963 
	`NVIC_SëPri‹ôy
(
SWI_IRQn
, 
SWI_IRQ_PRI
);

964 
	`NVIC_E«bÀIRQ
(
SWI_IRQn
);

966 
	`πc1_öô
(
¥esˇÀr
);

968 
m_ticks_œã°
 = 
	`πc1_cou¡î_gë
();

970  
NRF_SUCCESS
;

971 
	}
}

974 
uöt32_t
 
	$≠p_timî_¸óã
(
≠p_timî_id_t
 c⁄° * 
p_timî_id
,

975 
≠p_timî_mode_t
 
mode
,

976 
≠p_timî_timeout_h™dÀr_t
 
timeout_h™dÀr
)

979 
	`VERIFY_MODULE_INITIALIZED
();

981 i‡(
timeout_h™dÀr
 =
NULL
)

983  
NRF_ERROR_INVALID_PARAM
;

985 i‡(
p_timî_id
 =
NULL
)

987  
NRF_ERROR_INVALID_PARAM
;

989 i‡(((
timî_node_t
*)*
p_timî_id
)->
is_ru¬ög
)

991  
NRF_ERROR_INVALID_STATE
;

994 
timî_node_t
 * 
p_node
 = (timî_node_à*)*
p_timî_id
;

995 
p_node
->
is_ru¬ög
 = 
Ál£
;

996 
p_node
->
mode
 = mode;

997 
p_node
->
p_timeout_h™dÀr
 = 
timeout_h™dÀr
;

998  
NRF_SUCCESS
;

999 
	}
}

1001 
uöt32_t
 
	$≠p_timî_°¨t
(
≠p_timî_id_t
 
timî_id
, 
uöt32_t
 
timeout_ticks
, * 
p_c⁄ãxt
)

1003 
uöt32_t
 
timeout_≥riodic
;

1004 
timî_node_t
 * 
p_node
 = (timî_node_t*)
timî_id
;

1007 
	`VERIFY_MODULE_INITIALIZED
();

1009 i‡(
timî_id
 == 0)

1011  
NRF_ERROR_INVALID_STATE
;

1013 i‡(
timeout_ticks
 < 
APP_TIMER_MIN_TIMEOUT_TICKS
)

1015  
NRF_ERROR_INVALID_PARAM
;

1017 i‡(
p_node
->
p_timeout_h™dÀr
 =
NULL
)

1019  
NRF_ERROR_INVALID_STATE
;

1023 
timeout_≥riodic
 = (
p_node
->
mode
 =
APP_TIMER_MODE_REPEATED
Ë? 
timeout_ticks
 : 0;

1025  
	`timî_°¨t_›_scheduÀ
(
p_node
,

1026 
timeout_ticks
,

1027 
timeout_≥riodic
,

1028 
p_c⁄ãxt
);

1029 
	}
}

1032 
uöt32_t
 
	$≠p_timî_°›
(
≠p_timî_id_t
 
timî_id
)

1034 
timî_node_t
 * 
p_node
 = (timî_node_t*)
timî_id
;

1036 
	`VERIFY_MODULE_INITIALIZED
();

1038 i‡((
timî_id
 =
NULL
Ë|| (
p_node
->
p_timeout_h™dÀr
 == NULL))

1040  
NRF_ERROR_INVALID_STATE
;

1043 
p_node
->
is_ru¬ög
 = 
Ál£
;

1045  
	`timî_°›_›_scheduÀ
(
p_node
, 
TIMER_USER_OP_TYPE_STOP
);

1046 
	}
}

1049 
uöt32_t
 
	$≠p_timî_°›_Æl
()

1052 
	`VERIFY_MODULE_INITIALIZED
();

1054  
	`timî_°›_›_scheduÀ
(
NULL
, 
TIMER_USER_OP_TYPE_STOP_ALL
);

1055 
	}
}

1058 
uöt32_t
 
	$≠p_timî_˙t_gë
()

1060  
	`πc1_cou¡î_gë
();

1061 
	}
}

1064 
uöt32_t
 
	$≠p_timî_˙t_diff_compuã
(
uöt32_t
 
ticks_to
,

1065 
uöt32_t
 
ticks_‰om
,

1066 
uöt32_t
 * 
p_ticks_diff
)

1068 *
p_ticks_diff
 = 
	`ticks_diff_gë
(
ticks_to
, 
ticks_‰om
);

1069  
NRF_SUCCESS
;

1070 
	}
}

1072 #i‡
APP_TIMER_WITH_PROFILER


1073 
uöt8_t
 
	$≠p_timî_›_queue_utûiz©i⁄_gë
()

1075  
m_max_u£r_›_queue_utûiz©i⁄
;

1076 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\uart\app_uart.c

40 
	~"sdk_comm⁄.h
"

41 #i‡
NRF_MODULE_ENABLED
(
APP_UART
)

42 
	~"≠p_u¨t.h
"

43 
	~"ƒf_drv_u¨t.h
"

44 
	~"ƒf_as£π.h
"

46 
uöt8_t
 
	gtx_buf„r
[1];

47 
uöt8_t
 
	grx_buf„r
[1];

48 vﬁ©ûê
boﬁ
 
	grx_d⁄e
;

49 
≠p_u¨t_evít_h™dÀr_t
 
	gm_evít_h™dÀr
;

50 
ƒf_drv_u¨t_t
 
	g≠p_u¨t_ö°
 = 
NRF_DRV_UART_INSTANCE
(
APP_UART_DRIVER_INSTANCE
);

52 
	$u¨t_evít_h™dÀr
(
ƒf_drv_u¨t_evít_t
 * 
p_evít
, * 
p_c⁄ãxt
)

54 i‡(
p_evít
->
ty≥
 =
NRF_DRV_UART_EVT_RX_DONE
)

56 
≠p_u¨t_evt_t
 
≠p_u¨t_evít
;

57 
≠p_u¨t_evít
.
evt_ty≥
 = 
APP_UART_DATA
;

58 
≠p_u¨t_evít
.
d©a
.
vÆue
 = 
p_evít
->d©a.
rxtx
.
p_d©a
[0];

59 ()
	`ƒf_drv_u¨t_rx
(&
≠p_u¨t_ö°
, 
rx_buf„r
, 1);

60 
rx_d⁄e
 = 
åue
;

61 
	`m_evít_h™dÀr
(&
≠p_u¨t_evít
);

63 i‡(
p_evít
->
ty≥
 =
NRF_DRV_UART_EVT_ERROR
)

65 
≠p_u¨t_evt_t
 
≠p_u¨t_evít
;

66 
≠p_u¨t_evít
.
evt_ty≥
 = 
APP_UART_COMMUNICATION_ERROR
;

67 
≠p_u¨t_evít
.
d©a
.
îr‹_communiˇti⁄
 = 
p_evít
->d©a.
îr‹
.
îr‹_mask
;

68 ()
	`ƒf_drv_u¨t_rx
(&
≠p_u¨t_ö°
, 
rx_buf„r
, 1);

69 
	`m_evít_h™dÀr
(&
≠p_u¨t_evít
);

71 i‡(
p_evít
->
ty≥
 =
NRF_DRV_UART_EVT_TX_DONE
)

75 
≠p_u¨t_evt_t
 
≠p_u¨t_evít
;

76 
≠p_u¨t_evít
.
evt_ty≥
 = 
APP_UART_TX_EMPTY
;

77 
	`m_evít_h™dÀr
(&
≠p_u¨t_evít
);

79 
	}
}

81 
uöt32_t
 
	$≠p_u¨t_öô
(c⁄° 
≠p_u¨t_comm_∑øms_t
 * 
p_comm_∑øms
,

82 
≠p_u¨t_buf„rs_t
 * 
p_buf„rs
,

83 
≠p_u¨t_evít_h™dÀr_t
 
evít_h™dÀr
,

84 
≠p_úq_¥i‹ôy_t
 
úq_¥i‹ôy
)

86 
ƒf_drv_u¨t_c⁄fig_t
 
c⁄fig
 = 
NRF_DRV_UART_DEFAULT_CONFIG
;

87 
c⁄fig
.
baudøã
 = (
ƒf_u¨t_baudøã_t
)
p_comm_∑øms
->
baud_øã
;

88 
c⁄fig
.
hwfc
 = (
p_comm_∑øms
->
Êow_c⁄åﬁ
 =
APP_UART_FLOW_CONTROL_DISABLED
) ?

89 
NRF_UART_HWFC_DISABLED
 : 
NRF_UART_HWFC_ENABLED
;

90 
c⁄fig
.
öãºu±_¥i‹ôy
 = 
úq_¥i‹ôy
;

91 
c⁄fig
.
∑rôy
 = 
p_comm_∑øms
->
u£_∑rôy
 ? 
NRF_UART_PARITY_INCLUDED
 : 
NRF_UART_PARITY_EXCLUDED
;

92 
c⁄fig
.
p£l˘s
 = 
p_comm_∑øms
->
˘s_pö_no
;

93 
c⁄fig
.
p£Ãts
 = 
p_comm_∑øms
->
πs_pö_no
;

94 
c⁄fig
.
p£Ãxd
 = 
p_comm_∑øms
->
rx_pö_no
;

95 
c⁄fig
.
p£…xd
 = 
p_comm_∑øms
->
tx_pö_no
;

97 
m_evít_h™dÀr
 = 
evít_h™dÀr
;

99 
rx_d⁄e
 = 
Ál£
;

101 
uöt32_t
 
îr_code
 = 
	`ƒf_drv_u¨t_öô
(&
≠p_u¨t_ö°
, &
c⁄fig
, 
u¨t_evít_h™dÀr
);

102 
	`VERIFY_SUCCESS
(
îr_code
);

105 i‡(
p_comm_∑øms
->
rx_pö_no
 !
UART_PIN_DISCONNECTED
)

107 #ifde‡
UARTE_PRESENT


108 i‡(!
c⁄fig
.
u£_ósy_dma
)

111 
	`ƒf_drv_u¨t_rx_íabÀ
(&
≠p_u¨t_ö°
);

114  
	`ƒf_drv_u¨t_rx
(&
≠p_u¨t_ö°
, 
rx_buf„r
,1);

118  
NRF_SUCCESS
;

120 
	}
}

123 
uöt32_t
 
	$≠p_u¨t_gë
(
uöt8_t
 * 
p_byã
)

125 
	`ASSERT
(
p_byã
);

126 
uöt32_t
 
îr_code
 = 
NRF_SUCCESS
;

127 i‡(
rx_d⁄e
)

129 *
p_byã
 = 
rx_buf„r
[0];

130 
rx_d⁄e
 = 
Ál£
;

134 
îr_code
 = 
NRF_ERROR_NOT_FOUND
;

136  
îr_code
;

137 
	}
}

139 
uöt32_t
 
	$≠p_u¨t_put
(
uöt8_t
 
byã
)

141 
tx_buf„r
[0] = 
byã
;

142 
ªt_code_t
 
ªt
 = 
	`ƒf_drv_u¨t_tx
(&
≠p_u¨t_ö°
, 
tx_buf„r
, 1);

143 i‡(
NRF_ERROR_BUSY
 =
ªt
)

145  
NRF_ERROR_NO_MEM
;

147 i‡(
ªt
 !
NRF_SUCCESS
)

149  
NRF_ERROR_INTERNAL
;

153  
NRF_SUCCESS
;

155 
	}
}

157 
uöt32_t
 
	$≠p_u¨t_Êush
()

159  
NRF_SUCCESS
;

160 
	}
}

162 
uöt32_t
 
	$≠p_u¨t_˛o£
()

164 
	`ƒf_drv_u¨t_unöô
(&
≠p_u¨t_ö°
);

165  
NRF_SUCCESS
;

166 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\uart\app_uart.h

50 #i‚de‡
APP_UART_H__


51 
	#APP_UART_H__


	)

53 
	~<°döt.h
>

54 
	~<°dboﬁ.h
>

55 
	~"≠p_utû_∂©f‹m.h
"

57 #ifde‡
__˝lu•lus


61 
	#UART_PIN_DISCONNECTED
 0xFFFFFFFF

	)

69 
APP_UART_FLOW_CONTROL_DISABLED
,

70 
APP_UART_FLOW_CONTROL_ENABLED
,

71 } 
	t≠p_u¨t_Êow_c⁄åﬁ_t
;

77 
uöt32_t
 
rx_pö_no
;

78 
uöt32_t
 
tx_pö_no
;

79 
uöt32_t
 
πs_pö_no
;

80 
uöt32_t
 
˘s_pö_no
;

81 
≠p_u¨t_Êow_c⁄åﬁ_t
 
Êow_c⁄åﬁ
;

82 
boﬁ
 
u£_∑rôy
;

83 
uöt32_t
 
baud_øã
;

84 } 
	t≠p_u¨t_comm_∑øms_t
;

90 
uöt8_t
 * 
rx_buf
;

91 
uöt32_t
 
rx_buf_size
;

92 
uöt8_t
 * 
tx_buf
;

93 
uöt32_t
 
tx_buf_size
;

94 } 
	t≠p_u¨t_buf„rs_t
;

103 
APP_UART_DATA_READY
,

104 
APP_UART_FIFO_ERROR
,

105 
APP_UART_COMMUNICATION_ERROR
,

106 
APP_UART_TX_EMPTY
,

107 
APP_UART_DATA
,

108 } 
	t≠p_u¨t_evt_ty≥_t
;

117 
≠p_u¨t_evt_ty≥_t
 
evt_ty≥
;

120 
uöt32_t
 
îr‹_communiˇti⁄
;

121 
uöt32_t
 
îr‹_code
;

122 
uöt8_t
 
vÆue
;

123 } 
d©a
;

124 } 
	t≠p_u¨t_evt_t
;

133 (* 
≠p_u¨t_evít_h™dÀr_t
Ë(
	t≠p_u¨t_evt_t
 * 
	tp_≠p_u¨t_evít
);

150 
	#APP_UART_FIFO_INIT
(
P_COMM_PARAMS
, 
RX_BUF_SIZE
, 
TX_BUF_SIZE
, 
EVT_HANDLER
, 
IRQ_PRIO
, 
ERR_CODE
) \

153 
≠p_u¨t_buf„rs_t
 
buf„rs
; \

154 
uöt8_t
 
rx_buf
[
RX_BUF_SIZE
]; \

155 
uöt8_t
 
tx_buf
[
TX_BUF_SIZE
]; \

157 
buf„rs
.
rx_buf
 =Ñx_buf; \

158 
buf„rs
.
rx_buf_size
 =  (
rx_buf
); \

159 
buf„rs
.
tx_buf
 =Åx_buf; \

160 
buf„rs
.
tx_buf_size
 =  (
tx_buf
); \

161 
ERR_CODE
 = 
	`≠p_u¨t_öô
(
P_COMM_PARAMS
, &
buf„rs
, 
EVT_HANDLER
, 
IRQ_PRIO
); \

162 } 0)

	)

176 
	#APP_UART_INIT
(
P_COMM_PARAMS
, 
EVT_HANDLER
, 
IRQ_PRIO
, 
ERR_CODE
) \

179 
ERR_CODE
 = 
	`≠p_u¨t_öô
(
P_COMM_PARAMS
, 
NULL
, 
EVT_HANDLER
, 
IRQ_PRIO
); \

180 } 0)

	)

210 
uöt32_t
 
≠p_u¨t_öô
(c⁄° 
≠p_u¨t_comm_∑øms_t
 * 
p_comm_∑øms
,

211 
≠p_u¨t_buf„rs_t
 * 
p_buf„rs
,

212 
≠p_u¨t_evít_h™dÀr_t
 
îr‹_h™dÀr
,

213 
≠p_úq_¥i‹ôy_t
 
úq_¥i‹ôy
);

226 
uöt32_t
 
≠p_u¨t_gë
(
uöt8_t
 * 
p_byã
);

240 
uöt32_t
 
≠p_u¨t_put
(
uöt8_t
 
byã
);

247 
uöt32_t
 
≠p_u¨t_Êush
();

255 
uöt32_t
 
≠p_u¨t_˛o£
();

259 #ifde‡
__˝lu•lus


	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\app_error.c

50 
	~"ƒf.h
"

51 
	~<°dio.h
>

52 
	~"≠p_îr‹.h
"

53 
	~"n‹dic_comm⁄.h
"

54 
	~"sdk_îr‹s.h
"

55 
	~"ƒf_log.h
"

56 
	~"ƒf_log_˘æ.h
"

68 
	$≠p_îr‹_h™dÀr
(
ªt_code_t
 
îr‹_code
, 
uöt32_t
 
löe_num
, c⁄° 
uöt8_t
 * 
p_fûe_«me
)

70 
îr‹_öfo_t
 
îr‹_öfo
 =

72 .
löe_num
 =Üine_num,

73 .
p_fûe_«me
 =Ö_file_name,

74 .
îr_code
 = 
îr‹_code
,

76 
	`≠p_îr‹_Áu…_h™dÀr
(
NRF_FAULT_ID_SDK_ERROR
, 0, (
uöt32_t
)(&
îr‹_öfo
));

78 
	`UNUSED_VARIABLE
(
îr‹_öfo
);

79 
	}
}

82 
	$≠p_îr‹_h™dÀr_b¨e
(
ªt_code_t
 
îr‹_code
)

84 
îr‹_öfo_t
 
îr‹_öfo
 =

86 .
löe_num
 = 0,

87 .
p_fûe_«me
 = 
NULL
,

88 .
îr_code
 = 
îr‹_code
,

91 
	`≠p_îr‹_Áu…_h™dÀr
(
NRF_FAULT_ID_SDK_ERROR
, 0, (
uöt32_t
)(&
îr‹_öfo
));

93 
	`UNUSED_VARIABLE
(
îr‹_öfo
);

94 
	}
}

97 
	$≠p_îr‹_ßve_™d_°›
(
uöt32_t
 
id
, uöt32_à
pc
, uöt32_à
öfo
)

102 
uöt32_t
 
Áu…_id
;

103 
uöt32_t
 
pc
;

104 
uöt32_t
 
îr‹_öfo
;

105 
as£π_öfo_t
 * 
p_as£π_öfo
;

106 
îr‹_öfo_t
 * 
p_îr‹_öfo
;

107 
ªt_code_t
 
îr_code
;

108 
uöt32_t
 
löe_num
;

109 c⁄° 
uöt8_t
 * 
p_fûe_«me
;

110 } 
m_îr‹_d©a
 = {0};

114 vﬁ©ûê
boﬁ
 
lo›
 = 
åue
;

115 
	`UNUSED_VARIABLE
(
lo›
);

117 
m_îr‹_d©a
.
Áu…_id
 = 
id
;

118 
m_îr‹_d©a
.
pc
 =Öc;

119 
m_îr‹_d©a
.
îr‹_öfo
 = 
öfo
;

121 
id
)

123 
NRF_FAULT_ID_SDK_ASSERT
:

124 
m_îr‹_d©a
.
p_as£π_öfo
 = (
as£π_öfo_t
 *)
öfo
;

125 
m_îr‹_d©a
.
löe_num
 = m_îr‹_d©a.
p_as£π_öfo
->line_num;

126 
m_îr‹_d©a
.
p_fûe_«me
 = m_îr‹_d©a.
p_as£π_öfo
->p_file_name;

129 
NRF_FAULT_ID_SDK_ERROR
:

130 
m_îr‹_d©a
.
p_îr‹_öfo
 = (
îr‹_öfo_t
 *)
öfo
;

131 
m_îr‹_d©a
.
îr_code
 = m_îr‹_d©a.
p_îr‹_öfo
->err_code;

132 
m_îr‹_d©a
.
löe_num
 = m_îr‹_d©a.
p_îr‹_öfo
->line_num;

133 
m_îr‹_d©a
.
p_fûe_«me
 = m_îr‹_d©a.
p_îr‹_öfo
->p_file_name;

137 
	`UNUSED_VARIABLE
(
m_îr‹_d©a
);

140 
	`__dißbÀ_úq
();

141 
lo›
);

143 
	`__íabÀ_úq
();

144 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\app_error_weak.c

41 
	~"≠p_îr‹.h
"

43 
	#NRF_LOG_MODULE_NAME
 "APP_ERROR"

	)

44 
	~"ƒf_log.h
"

45 
	~"ƒf_log_˘æ.h
"

52 
__WEAK
 
	$≠p_îr‹_Áu…_h™dÀr
(
uöt32_t
 
id
, uöt32_à
pc
, uöt32_à
öfo
)

54 
	`NRF_LOG_ERROR
("Fatal\r\n");

55 
	`NRF_LOG_FINAL_FLUSH
();

57 #i‚de‡
DEBUG


58 
	`NVIC_Sy°emRe£t
();

60 
	`≠p_îr‹_ßve_™d_°›
(
id
, 
pc
, 
öfo
);

62 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\app_util_platform.c

41 
	~"≠p_utû_∂©f‹m.h
"

43 #ifde‡
SOFTDEVICE_PRESENT


45 
ƒf_nvic_°©e_t
 
	gƒf_nvic_°©e
;

48 
uöt32_t
 
	gm_ö_¸ôiˇl_ªgi⁄
 = 0;

50 
	$≠p_utû_dißbÀ_úq
()

52 
	`__dißbÀ_úq
();

53 
m_ö_¸ôiˇl_ªgi⁄
++;

54 
	}
}

56 
	$≠p_utû_íabÀ_úq
()

58 
m_ö_¸ôiˇl_ªgi⁄
--;

59 i‡(
m_ö_¸ôiˇl_ªgi⁄
 == 0)

61 
	`__íabÀ_úq
();

63 
	}
}

65 
	$≠p_utû_¸ôiˇl_ªgi⁄_íãr
(
uöt8_t
 *
p_√°ed
)

67 #i‡
__CORTEX_M
 == (0x04U)

68 
	`ASSERT
(
APP_LEVEL_PRIVILEGED
 =
	`¥ivûege_Àvñ_gë
())

71 #i‡
	`deföed
(
SOFTDEVICE_PRESENT
)

73 (Ë
	`sd_nvic_¸ôiˇl_ªgi⁄_íãr
(
p_√°ed
);

75 
	`≠p_utû_dißbÀ_úq
();

77 
	}
}

79 
	$≠p_utû_¸ôiˇl_ªgi⁄_exô
(
uöt8_t
 
√°ed
)

81 #i‡
__CORTEX_M
 == (0x04U)

82 
	`ASSERT
(
APP_LEVEL_PRIVILEGED
 =
	`¥ivûege_Àvñ_gë
())

85 #i‡
	`deföed
(
SOFTDEVICE_PRESENT
)

87 (Ë
	`sd_nvic_¸ôiˇl_ªgi⁄_exô
(
√°ed
);

89 
	`≠p_utû_íabÀ_úq
();

91 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\nrf_assert.c

40 
	~"ƒf_as£π.h
"

41 
	~"≠p_îr‹.h
"

42 
	~"n‹dic_comm⁄.h
"

44 
__WEAK
 
	$as£π_ƒf_ˇŒback
(
uöt16_t
 
löe_num
, c⁄° 
uöt8_t
 * 
fûe_«me
)

46 
as£π_öfo_t
 
as£π_öfo
 =

48 .
löe_num
 =Üine_num,

49 .
p_fûe_«me
 = 
fûe_«me
,

51 
	`≠p_îr‹_Áu…_h™dÀr
(
NRF_FAULT_ID_SDK_ASSERT
, 0, (
uöt32_t
)(&
as£π_öfo
));

53 
	`UNUSED_VARIABLE
(
as£π_öfo
);

54 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\sdk_errors.c

41 
	~"sdk_îr‹s.h
"

42 
	~"n‹dic_comm⁄.h
"

44 #i‡
deföed
(
NRF_LOG_ENABLED
) && NRF_LOG_ENABLED

49 c⁄° * 
	gm_sdk_îr‹s_«me
[
ERR_NAMES_SIZE
] =

71 c⁄° * 
	gm_sdk_îr‹s_«me_comm⁄
[
ERR_NAMES_COMMON_SIZE
] =

84 c⁄° * 
	gm_sdk_îr‹s_«me_twi
[
ERR_NAMES_TWI_SIZE
] =

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\softdevice\common\softdevice_handler\softdevice_handler.c

40 
	~"so·devi˚_h™dÀr.h
"

41 
	~<°dlib.h
>

42 
	~<°döt.h
>

43 
	~<°dio.h
>

44 
	~<°rög.h
>

45 
	~"ƒf.h
"

46 
	~"ƒf_as£π.h
"

47 
	~"ƒf_soc.h
"

48 
	~"ƒf_nvic.h
"

49 
	~"sdk_comm⁄.h
"

51 #i‡
NRF_MODULE_ENABLED
(
CLOCK
)

52 
	~"ƒf_drv_˛ock.h
"

54 
	~"≠p_îr‹.h
"

56 #i‡
NRF_MODULE_ENABLED
(
RNG
)

57 
	~"ƒf_drv_∫g.h
"

60 
	#NRF_LOG_MODULE_NAME
 "SDH"

	)

61 
	~"ƒf_log.h
"

62 #i‡
deföed
(
ANT_STACK_SUPPORT_REQD
Ë&& deföed(
BLE_STACK_SUPPORT_REQD
)

63 
	~"™t_öãrÁ˚.h
"

64 #ñi‡
deföed
(
ANT_STACK_SUPPORT_REQD
)

65 
	~"™t_öãrÁ˚.h
"

66 #ñi‡
deföed
(
BLE_STACK_SUPPORT_REQD
)

67 
	~"bÀ.h
"

70 
	#RAM_START_ADDRESS
 0x20000000

	)

71 
	#SOFTDEVICE_EVT_IRQ
 
SD_EVT_IRQn


	)

72 
	#SOFTDEVICE_EVT_IRQH™dÀr
 
SD_EVT_IRQH™dÀr


	)

73 
	#RAM_TOTAL_SIZE
 ((
NRF_FICR
->
INFO
.
RAM
Ë* 1024)

	)

74 
	#RAM_END_ADDRESS
 (
RAM_START_ADDRESS
 + 
RAM_TOTAL_SIZE
)

	)

77 
	#SOFTDEVICE_VS_UUID_COUNT
 0

	)

78 
	#SOFTDEVICE_GATTS_ATTR_TAB_SIZE
 
BLE_GATTS_ATTR_TAB_SIZE_DEFAULT


	)

79 
	#SOFTDEVICE_GATTS_SRV_CHANGED
 0

	)

80 
	#SOFTDEVICE_PERIPH_CONN_COUNT
 1

	)

81 
	#SOFTDEVICE_CENTRAL_CONN_COUNT
 4

	)

82 
	#SOFTDEVICE_CENTRAL_SEC_COUNT
 1

	)

84 
so·devi˚_evt_scheduÀ_func_t
 
	gm_evt_scheduÀ_func
;

86 vﬁ©ûê
boﬁ
 
	gm_so·devi˚_íabÀd
 = 
Ál£
;

87 vﬁ©ûê
boﬁ
 
	gm_su•íded
;

88 #ifde‡
BLE_STACK_SUPPORT_REQD


90 
uöt8_t
 * 
	gmp_bÀ_evt_buf„r
;

91 
uöt16_t
 
	gm_bÀ_evt_buf„r_size
;

92 
bÀ_evt_h™dÀr_t
 
	gm_bÀ_evt_h™dÀr
;

95 #ifde‡
ANT_STACK_SUPPORT_REQD


97 
™t_evt_t
 
	gm_™t_evt_buf„r
;

98 
™t_evt_h™dÀr_t
 
	gm_™t_evt_h™dÀr
;

101 
sys_evt_h™dÀr_t
 
	gm_sys_evt_h™dÀr
;

116 
	$so·devi˚_Áu…_h™dÀr
(
uöt32_t
 
id
, uöt32_à
pc
, uöt32_à
öfo
)

118 
	`≠p_îr‹_Áu…_h™dÀr
(
id
, 
pc
, 
öfo
);

119 
	}
}

121 
	$öã∫_so·devi˚_evíts_execuã
()

123 i‡(!
m_so·devi˚_íabÀd
)

130 #i‡
	`NRF_MODULE_ENABLED
(
CLOCK
)

131 
boﬁ
 
no_m‹e_soc_evts
 = 
Ál£
;

133 
boﬁ
 
no_m‹e_soc_evts
 = (
m_sys_evt_h™dÀr
 =
NULL
);

135 #ifde‡
BLE_STACK_SUPPORT_REQD


136 
boﬁ
 
no_m‹e_bÀ_evts
 = (
m_bÀ_evt_h™dÀr
 =
NULL
);

138 #ifde‡
ANT_STACK_SUPPORT_REQD


139 
boﬁ
 
no_m‹e_™t_evts
 = (
m_™t_evt_h™dÀr
 =
NULL
);

144 
uöt32_t
 
îr_code
;

146 i‡(!
no_m‹e_soc_evts
)

148 i‡(
m_su•íded
)

154 
uöt32_t
 
evt_id
;

157 
îr_code
 = 
	`sd_evt_gë
(&
evt_id
);

159 i‡(
îr_code
 =
NRF_ERROR_NOT_FOUND
)

161 
no_m‹e_soc_evts
 = 
åue
;

163 i‡(
îr_code
 !
NRF_SUCCESS
)

165 
	`APP_ERROR_HANDLER
(
îr_code
);

170 #i‡(
	`NRF_MODULE_ENABLED
(
CLOCK
Ë&& 
	`deföed
(
SOFTDEVICE_PRESENT
))

171 
	`ƒf_drv_˛ock_⁄_soc_evít
(
evt_id
);

172 i‡(
m_sys_evt_h™dÀr
)

174 
	`m_sys_evt_h™dÀr
(
evt_id
);

177 
	`m_sys_evt_h™dÀr
(
evt_id
);

182 #ifde‡
BLE_STACK_SUPPORT_REQD


184 i‡(!
no_m‹e_bÀ_evts
)

186 i‡(
m_su•íded
)

193 
uöt16_t
 
evt_Àn
 = 
m_bÀ_evt_buf„r_size
;

195 
îr_code
 = 
	`sd_bÀ_evt_gë
(
mp_bÀ_evt_buf„r
, &
evt_Àn
);

196 i‡(
îr_code
 =
NRF_ERROR_NOT_FOUND
)

198 
no_m‹e_bÀ_evts
 = 
åue
;

200 i‡(
îr_code
 !
NRF_SUCCESS
)

202 
	`APP_ERROR_HANDLER
(
îr_code
);

207 
	`m_bÀ_evt_h™dÀr
((
bÀ_evt_t
 *)
mp_bÀ_evt_buf„r
);

212 #ifde‡
ANT_STACK_SUPPORT_REQD


214 i‡(!
no_m‹e_™t_evts
)

216 i‡(
m_su•íded
)

223 
îr_code
 = 
	`sd_™t_evít_gë
(&
m_™t_evt_buf„r
.
ch™√l
,

224 &
m_™t_evt_buf„r
.
evít
,

225 
m_™t_evt_buf„r
.
msg
.
evt_buf„r
);

226 i‡(
îr_code
 =
NRF_ERROR_NOT_FOUND
)

228 
no_m‹e_™t_evts
 = 
åue
;

230 i‡(
îr_code
 !
NRF_SUCCESS
)

232 
	`APP_ERROR_HANDLER
(
îr_code
);

237 
	`m_™t_evt_h™dÀr
(&
m_™t_evt_buf„r
);

242 i‡(
no_m‹e_soc_evts
)

245 #i‡
	`deföed
(
ANT_STACK_SUPPORT_REQD
Ë&& deföed(
BLE_STACK_SUPPORT_REQD
)

247 i‡(
no_m‹e_bÀ_evts
 && 
no_m‹e_™t_evts
)

251 #ñi‡
	`deföed
(
BLE_STACK_SUPPORT_REQD
)

253 i‡(
no_m‹e_bÀ_evts
)

257 #ñi‡
	`deföed
(
ANT_STACK_SUPPORT_REQD
)

259 i‡(
no_m‹e_™t_evts
)

270 
	}
}

272 
boﬁ
 
	$so·devi˚_h™dÀr_is_íabÀd
()

274  
m_so·devi˚_íabÀd
;

275 
	}
}

277 
uöt32_t
 
	$so·devi˚_h™dÀr_öô
(
ƒf_˛ock_lf_cfg_t
 * 
p_˛ock_lf_cfg
,

278 * 
p_bÀ_evt_buf„r
,

279 
uöt16_t
 
bÀ_evt_buf„r_size
,

280 
so·devi˚_evt_scheduÀ_func_t
 
evt_scheduÀ_func
)

282 
uöt32_t
 
îr_code
;

285 #i‡
	`deföed
 (
BLE_STACK_SUPPORT_REQD
)

287 i‡(
p_bÀ_evt_buf„r
 =
NULL
)

289  
NRF_ERROR_INVALID_PARAM
;

293 i‡(!
	`is_w‹d_Æig√d
(
p_bÀ_evt_buf„r
))

295  
NRF_ERROR_INVALID_PARAM
;

298 
mp_bÀ_evt_buf„r
 = (
uöt8_t
 *)
p_bÀ_evt_buf„r
;

299 
m_bÀ_evt_buf„r_size
 = 
bÀ_evt_buf„r_size
;

303 
	`UNUSED_PARAMETER
(
p_bÀ_evt_buf„r
);

304 
	`UNUSED_PARAMETER
(
bÀ_evt_buf„r_size
);

307 
m_evt_scheduÀ_func
 = 
evt_scheduÀ_func
;

310 #i‡(
	`NRF_MODULE_ENABLED
(
CLOCK
Ë&& 
	`deföed
(
SOFTDEVICE_PRESENT
))

311 
boﬁ
 
powî_˛ock_i§_íabÀd
 = 
	`ƒf_drv_comm⁄_úq_íabÀ_check
(
POWER_CLOCK_IRQn
);

312 i‡(
powî_˛ock_i§_íabÀd
)

314 
	`NVIC_DißbÀIRQ
(
POWER_CLOCK_IRQn
);

318 #i‡(
	`NRF_MODULE_ENABLED
(
RNG
Ë&& 
	`deföed
(
SOFTDEVICE_PRESENT
))

319 
boﬁ
 
∫g_i§_íabÀd
 = 
	`ƒf_drv_comm⁄_úq_íabÀ_check
(
RNG_IRQn
);

320 i‡(
∫g_i§_íabÀd
)

322 
	`NVIC_DißbÀIRQ
(
RNG_IRQn
);

325 #i‡
	`deföed
(
S212
Ë|| deföed(
S332
)

326 
îr_code
 = 
	`sd_so·devi˚_íabÀ
(
p_˛ock_lf_cfg
, 
so·devi˚_Áu…_h™dÀr
, 
ANT_LICENSE_KEY
);

328 
îr_code
 = 
	`sd_so·devi˚_íabÀ
(
p_˛ock_lf_cfg
, 
so·devi˚_Áu…_h™dÀr
);

331 i‡(
îr_code
 !
NRF_SUCCESS
)

334 #i‡(
	`NRF_MODULE_ENABLED
(
RNG
Ë&& 
	`deföed
(
SOFTDEVICE_PRESENT
))

335 i‡(
∫g_i§_íabÀd
)

337 
	`NVIC_E«bÀIRQ
(
RNG_IRQn
);

340 #i‡(
	`NRF_MODULE_ENABLED
(
CLOCK
Ë&& 
	`deföed
(
SOFTDEVICE_PRESENT
))

341 i‡(
powî_˛ock_i§_íabÀd
)

343 
	`NVIC_E«bÀIRQ
(
POWER_CLOCK_IRQn
);

346  
îr_code
;

349 
m_so·devi˚_íabÀd
 = 
åue
;

350 #i‡(
	`NRF_MODULE_ENABLED
(
CLOCK
Ë&& 
	`deföed
(
SOFTDEVICE_PRESENT
))

351 
	`ƒf_drv_˛ock_⁄_sd_íabÀ
();

355 #ifde‡
SOFTDEVICE_PRESENT


356  
	`sd_nvic_E«bÀIRQ
((
IRQn_Ty≥
)
SOFTDEVICE_EVT_IRQ
);

359 
	`NVIC_E«bÀIRQ
(
SOFTDEVICE_EVT_IRQ
);

360  
NRF_SUCCESS
;

362 
	}
}

365 
uöt32_t
 
	$so·devi˚_h™dÀr_sd_dißbÀ
()

367 
uöt32_t
 
îr_code
 = 
	`sd_so·devi˚_dißbÀ
();

368 i‡(
îr_code
 =
NRF_SUCCESS
)

370 
m_so·devi˚_íabÀd
 = 
Ál£
;

372 #i‡(
	`NRF_MODULE_ENABLED
(
CLOCK
Ë&& 
	`deföed
(
SOFTDEVICE_PRESENT
))

373 
	`ƒf_drv_˛ock_⁄_sd_dißbÀ
();

376 #i‡(
	`NRF_MODULE_ENABLED
(
RNG
Ë&& 
	`deföed
(
SOFTDEVICE_PRESENT
))

377 
	`ƒf_drv_∫g_⁄_sd_dißbÀ
();

381  
îr_code
;

382 
	}
}

384 #ifde‡
BLE_STACK_SUPPORT_REQD


385 
uöt32_t
 
	$so·devi˚_bÀ_evt_h™dÀr_£t
(
bÀ_evt_h™dÀr_t
 
bÀ_evt_h™dÀr
)

387 
	`VERIFY_PARAM_NOT_NULL
(
bÀ_evt_h™dÀr
);

389 
m_bÀ_evt_h™dÀr
 = 
bÀ_evt_h™dÀr
;

391  
NRF_SUCCESS
;

392 
	}
}

396 #ifde‡
ANT_STACK_SUPPORT_REQD


397 
uöt32_t
 
	$so·devi˚_™t_evt_h™dÀr_£t
(
™t_evt_h™dÀr_t
 
™t_evt_h™dÀr
)

399 
	`VERIFY_PARAM_NOT_NULL
(
™t_evt_h™dÀr
);

401 
m_™t_evt_h™dÀr
 = 
™t_evt_h™dÀr
;

403  
NRF_SUCCESS
;

404 
	}
}

408 
uöt32_t
 
	$so·devi˚_sys_evt_h™dÀr_£t
(
sys_evt_h™dÀr_t
 
sys_evt_h™dÀr
)

410 
	`VERIFY_PARAM_NOT_NULL
(
sys_evt_h™dÀr
);

412 
m_sys_evt_h™dÀr
 = 
sys_evt_h™dÀr
;

414  
NRF_SUCCESS
;

415 
	}
}

422 
	$SOFTDEVICE_EVT_IRQH™dÀr
()

424 i‡(
m_evt_scheduÀ_func
 !
NULL
)

426 
uöt32_t
 
îr_code
 = 
	`m_evt_scheduÀ_func
();

427 
	`APP_ERROR_CHECK
(
îr_code
);

431 
	`öã∫_so·devi˚_evíts_execuã
();

433 
	}
}

435 
	$so·devi˚_h™dÀr_su•íd
()

437 #ifde‡
SOFTDEVICE_PRESENT


438 
ªt_code_t
 
îr_code
 = 
	`sd_nvic_DißbÀIRQ
((
IRQn_Ty≥
)
SOFTDEVICE_EVT_IRQ
);

439 
	`APP_ERROR_CHECK
(
îr_code
);

441 
	`NVIC_DißbÀIRQ
(
SOFTDEVICE_EVT_IRQ
);

443 
m_su•íded
 = 
åue
;

445 
	}
}

447 
	$so·devi˚_h™dÀr_ªsume
()

449 i‡(!
m_su•íded
) ;

450 
m_su•íded
 = 
Ál£
;

452 #ifde‡
SOFTDEVICE_PRESENT


453 
ªt_code_t
 
îr_code
;

457 
îr_code
 = 
	`sd_nvic_SëPídögIRQ
((
IRQn_Ty≥
)
SOFTDEVICE_EVT_IRQ
);

458 
	`APP_ERROR_CHECK
(
îr_code
);

459 
îr_code
 = 
	`sd_nvic_E«bÀIRQ
((
IRQn_Ty≥
)
SOFTDEVICE_EVT_IRQ
);

460 
	`APP_ERROR_CHECK
(
îr_code
);

462 
	`NVIC_SëPídögIRQ
((
IRQn_Ty≥
)
SOFTDEVICE_EVT_IRQ
);

463 
	`NVIC_E«bÀIRQ
(
SOFTDEVICE_EVT_IRQ
);

467 
	}
}

469 
boﬁ
 
	$so·devi˚_h™dÀr_is_su•íded
()

471  
m_su•íded
;

472 
	}
}

474 #i‡
deföed
(
BLE_STACK_SUPPORT_REQD
)

475 
uöt32_t
 
	$so·devi˚_íabÀ_gë_deÁu…_c⁄fig
(
uöt8_t
 
˚¡øl_löks_cou¡
,

476 
uöt8_t
 
≥rùh_löks_cou¡
,

477 
bÀ_íabÀ_∑øms_t
 * 
p_bÀ_íabÀ_∑øms
)

479 
	`mem£t
(
p_bÀ_íabÀ_∑øms
, 0, (
bÀ_íabÀ_∑øms_t
));

480 
p_bÀ_íabÀ_∑øms
->
comm⁄_íabÀ_∑øms
.
vs_uuid_cou¡
 = 1;

481 
p_bÀ_íabÀ_∑øms
->
g©ts_íabÀ_∑øms
.
©å_èb_size
 = 
SOFTDEVICE_GATTS_ATTR_TAB_SIZE
;

482 
p_bÀ_íabÀ_∑øms
->
g©ts_íabÀ_∑øms
.
£rvi˚_ch™ged
 = 
SOFTDEVICE_GATTS_SRV_CHANGED
;

483 
p_bÀ_íabÀ_∑øms
->
g≠_íabÀ_∑øms
.
≥rùh_c⁄n_cou¡
 = 
≥rùh_löks_cou¡
;

484 
p_bÀ_íabÀ_∑øms
->
g≠_íabÀ_∑øms
.
˚¡øl_c⁄n_cou¡
 = 
˚¡øl_löks_cou¡
;

485 i‡(
p_bÀ_íabÀ_∑øms
->
g≠_íabÀ_∑øms
.
˚¡øl_c⁄n_cou¡
 != 0)

487 
p_bÀ_íabÀ_∑øms
->
g≠_íabÀ_∑øms
.
˚¡øl_£c_cou¡
 = 
SOFTDEVICE_CENTRAL_SEC_COUNT
;

490  
NRF_SUCCESS
;

491 
	}
}

494 
ölöe
 
uöt32_t
 
	$øm_tŸÆ_size_gë
()

496 #ifde‡
NRF51


497 
uöt32_t
 
size_øm_blocks
 = (uöt32_t)
NRF_FICR
->
SIZERAMBLOCKS
;

498 
uöt32_t
 
tŸÆ_øm_size
 = 
size_øm_blocks
;

499 
tŸÆ_øm_size
 =ÅŸÆ_øm_sizê* (
NRF_FICR
->
NUMRAMBLOCK
);

500  
tŸÆ_øm_size
;

501 #ñi‡(
	`deföed
 (
NRF52
Ë|| deföed(
NRF52840_XXAA
))

502  
RAM_TOTAL_SIZE
;

504 
	}
}

511 
ölöe
 
uöt32_t
 
	$øm_íd_addªss_gë
()

513 
uöt32_t
 
øm_íd_addªss
 = (uöt32_t)
RAM_START_ADDRESS
;

514 
øm_íd_addªss
+
	`øm_tŸÆ_size_gë
();

515  
øm_íd_addªss
;

516 
	}
}

520 
uöt32_t
 
	$sd_check_øm_°¨t
(
uöt32_t
 
sd_ªq_øm_°¨t
)

522 #i‡(
	`deföed
(
S130
Ë|| deföed(
S132
Ë|| deföed(
S332
))

523 #i‡
	`deföed
 ( 
__CC_ARM
 )

524 
uöt32_t
 
Image$$RW_IRAM1$$Ba£
;

525 c⁄° vﬁ©ûê
uöt32_t
 
øm_°¨t
 = (uöt32_tË&
Image$$RW_IRAM1$$Ba£
;

526 #ñi‡
	`deföed
 ( 
__ICCARM__
 )

527 
uöt32_t
 
__ICFEDIT_ªgi⁄_RAM_°¨t__
;

528 vﬁ©ûê
uöt32_t
 
øm_°¨t
 = (uöt32_tË&
__ICFEDIT_ªgi⁄_RAM_°¨t__
;

529 #ñi‡
	`deföed
 ( 
__GNUC__
 )

530 
uöt32_t
 
__d©a_°¨t__
;

531 vﬁ©ûê
uöt32_t
 
øm_°¨t
 = (uöt32_tË&
__d©a_°¨t__
;

533 i‡(
øm_°¨t
 !
sd_ªq_øm_°¨t
)

535 
	`NRF_LOG_WARNING
("RAM START ADDR 0x%x should beádjustedÅo 0x%x\r\n",

536 
øm_°¨t
,

537 
sd_ªq_øm_°¨t
);

538 
	`NRF_LOG_WARNING
("RAM SIZE should beádjustedÅo 0x%x \r\n",

539 
	`øm_íd_addªss_gë
(Ë- 
sd_ªq_øm_°¨t
);

540  
NRF_SUCCESS
;

543  
NRF_SUCCESS
;

544 
	}
}

546 
uöt32_t
 
	$so·devi˚_íabÀ
(
bÀ_íabÀ_∑øms_t
 * 
p_bÀ_íabÀ_∑øms
)

548 #i‡(
	`deföed
(
S130
Ë|| deföed(
S132
Ë|| deföed(
S332
))

549 
uöt32_t
 
îr_code
;

550 
uöt32_t
 
≠p_øm_ba£
;

552 #i‡
	`deföed
 ( 
__CC_ARM
 )

553 
uöt32_t
 
Image$$RW_IRAM1$$Ba£
;

554 c⁄° vﬁ©ûê
uöt32_t
 
øm_°¨t
 = (uöt32_tË&
Image$$RW_IRAM1$$Ba£
;

555 #ñi‡
	`deföed
 ( 
__ICCARM__
 )

556 
uöt32_t
 
__ICFEDIT_ªgi⁄_RAM_°¨t__
;

557 vﬁ©ûê
uöt32_t
 
øm_°¨t
 = (uöt32_tË&
__ICFEDIT_ªgi⁄_RAM_°¨t__
;

558 #ñi‡
	`deföed
 ( 
__GNUC__
 )

559 
uöt32_t
 
__d©a_°¨t__
;

560 vﬁ©ûê
uöt32_t
 
øm_°¨t
 = (uöt32_tË&
__d©a_°¨t__
;

563 
≠p_øm_ba£
 = 
øm_°¨t
;

564 
	`NRF_LOG_DEBUG
("sd_ble_enable: RAM startát 0x%x\r\n",

565 
≠p_øm_ba£
);

566 
îr_code
 = 
	`sd_bÀ_íabÀ
(
p_bÀ_íabÀ_∑øms
, &
≠p_øm_ba£
);

568 i‡(
≠p_øm_ba£
 !
øm_°¨t
)

570 
	`NRF_LOG_WARNING
("sd_ble_enable: RAM start should beádjustedÅo 0x%x\r\n",

571 
≠p_øm_ba£
);

572 
	`NRF_LOG_WARNING
("RAM size should beádjustedÅo 0x%x \r\n",

573 
	`øm_íd_addªss_gë
(Ë- 
≠p_øm_ba£
);

575 i‡(
îr_code
 !
NRF_SUCCESS
)

577 
	`NRF_LOG_ERROR
("sd_bÀ_íabÀ:Éº‹ 0x%x\r\n", 
îr_code
);

579  
îr_code
;

581  
NRF_SUCCESS
;

584 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\toolchain\system_nrf52.c

31 
	~<°döt.h
>

32 
	~<°dboﬁ.h
>

33 
	~"ƒf.h
"

34 
	~"sy°em_ƒf52.h
"

38 
	#__SYSTEM_CLOCK_64M
 (64000000UL)

	)

40 
boﬁ
 
îøè_16
();

41 
boﬁ
 
îøè_31
();

42 
boﬁ
 
îøè_32
();

43 
boﬁ
 
îøè_36
();

44 
boﬁ
 
îøè_37
();

45 
boﬁ
 
îøè_57
();

46 
boﬁ
 
îøè_66
();

47 
boﬁ
 
îøè_108
();

50 #i‡
deföed
 ( 
__CC_ARM
 )

51 
uöt32_t
 
Sy°emC‹eClock
 
__©åibuã__
((
u£d
)Ë
__SYSTEM_CLOCK_64M
;

52 #ñi‡
deföed
 ( 
__ICCARM__
 )

53 
__roŸ
 
uöt32_t
 
	gSy°emC‹eClock
 = 
__SYSTEM_CLOCK_64M
;

54 #ñi‡
deföed
 ( 
__GNUC__
 )

55 
uöt32_t
 
Sy°emC‹eClock
 
__©åibuã__
((
u£d
)Ë
__SYSTEM_CLOCK_64M
;

58 
	$Sy°emC‹eClockUpd©e
()

60 
Sy°emC‹eClock
 = 
__SYSTEM_CLOCK_64M
;

61 
	}
}

63 
	$Sy°emInô
()

67 i‡(
	`îøè_16
()){

68 *(vﬁ©ûê
uöt32_t
 *)0x4007C074 = 3131961357ul;

73 i‡(
	`îøè_31
()){

74 *(vﬁ©ûê
uöt32_t
 *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;

79 i‡(
	`îøè_32
()){

80 
C‹eDebug
->
DEMCR
 &~
C‹eDebug_DEMCR_TRCENA_Msk
;

85 i‡(
	`îøè_36
()){

86 
NRF_CLOCK
->
EVENTS_DONE
 = 0;

87 
NRF_CLOCK
->
EVENTS_CTTO
 = 0;

88 
NRF_CLOCK
->
CTIV
 = 0;

93 i‡(
	`îøè_37
()){

94 *(vﬁ©ûê
uöt32_t
 *)0x400005A0 = 0x3;

99 i‡(
	`îøè_57
()){

100 *(vﬁ©ûê
uöt32_t
 *)0x40005610 = 0x00000005;

101 *(vﬁ©ûê
uöt32_t
 *)0x40005688 = 0x00000001;

102 *(vﬁ©ûê
uöt32_t
 *)0x40005618 = 0x00000000;

103 *(vﬁ©ûê
uöt32_t
 *)0x40005614 = 0x0000003F;

108 i‡(
	`îøè_66
()){

109 
NRF_TEMP
->
A0
 = 
NRF_FICR
->
TEMP
.A0;

110 
NRF_TEMP
->
A1
 = 
NRF_FICR
->
TEMP
.A1;

111 
NRF_TEMP
->
A2
 = 
NRF_FICR
->
TEMP
.A2;

112 
NRF_TEMP
->
A3
 = 
NRF_FICR
->
TEMP
.A3;

113 
NRF_TEMP
->
A4
 = 
NRF_FICR
->
TEMP
.A4;

114 
NRF_TEMP
->
A5
 = 
NRF_FICR
->
TEMP
.A5;

115 
NRF_TEMP
->
B0
 = 
NRF_FICR
->
TEMP
.B0;

116 
NRF_TEMP
->
B1
 = 
NRF_FICR
->
TEMP
.B1;

117 
NRF_TEMP
->
B2
 = 
NRF_FICR
->
TEMP
.B2;

118 
NRF_TEMP
->
B3
 = 
NRF_FICR
->
TEMP
.B3;

119 
NRF_TEMP
->
B4
 = 
NRF_FICR
->
TEMP
.B4;

120 
NRF_TEMP
->
B5
 = 
NRF_FICR
->
TEMP
.B5;

121 
NRF_TEMP
->
T0
 = 
NRF_FICR
->
TEMP
.T0;

122 
NRF_TEMP
->
T1
 = 
NRF_FICR
->
TEMP
.T1;

123 
NRF_TEMP
->
T2
 = 
NRF_FICR
->
TEMP
.T2;

124 
NRF_TEMP
->
T3
 = 
NRF_FICR
->
TEMP
.T3;

125 
NRF_TEMP
->
T4
 = 
NRF_FICR
->
TEMP
.T4;

130 i‡(
	`îøè_108
()){

131 *(vﬁ©ûê
uöt32_t
 *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;

137 #i‡(
__FPU_USED
 == 1)

138 
SCB
->
CPACR
 |= (3UL << 20) | (3UL << 22);

139 
	`__DSB
();

140 
	`__ISB
();

146 #i‡
	`deföed
 (
CONFIG_NFCT_PINS_AS_GPIOS
)

147 i‡((
NRF_UICR
->
NFCPINS
 & 
UICR_NFCPINS_PROTECT_Msk
Ë=(
UICR_NFCPINS_PROTECT_NFC
 << 
UICR_NFCPINS_PROTECT_Pos
)){

148 
NRF_NVMC
->
CONFIG
 = 
NVMC_CONFIG_WEN_Wí
 << 
NVMC_CONFIG_WEN_Pos
;

149 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
){}

150 
NRF_UICR
->
NFCPINS
 &~
UICR_NFCPINS_PROTECT_Msk
;

151 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
){}

152 
NRF_NVMC
->
CONFIG
 = 
NVMC_CONFIG_WEN_Rí
 << 
NVMC_CONFIG_WEN_Pos
;

153 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
){}

154 
	`NVIC_Sy°emRe£t
();

161 #i‡
	`deföed
 (
CONFIG_GPIO_AS_PINRESET
)

162 i‡(((
NRF_UICR
->
PSELRESET
[0] & 
UICR_PSELRESET_CONNECT_Msk
Ë!(
UICR_PSELRESET_CONNECT_C⁄√˘ed
 << 
UICR_PSELRESET_CONNECT_Pos
)) ||

163 ((
NRF_UICR
->
PSELRESET
[1] & 
UICR_PSELRESET_CONNECT_Msk
Ë!(
UICR_PSELRESET_CONNECT_C⁄√˘ed
 << 
UICR_PSELRESET_CONNECT_Pos
))){

164 
NRF_NVMC
->
CONFIG
 = 
NVMC_CONFIG_WEN_Wí
 << 
NVMC_CONFIG_WEN_Pos
;

165 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
){}

166 
NRF_UICR
->
PSELRESET
[0] = 21;

167 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
){}

168 
NRF_UICR
->
PSELRESET
[1] = 21;

169 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
){}

170 
NRF_NVMC
->
CONFIG
 = 
NVMC_CONFIG_WEN_Rí
 << 
NVMC_CONFIG_WEN_Pos
;

171 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
){}

172 
	`NVIC_Sy°emRe£t
();

178 #i‡
	`deföed
 (
ENABLE_SWO
)

179 
C‹eDebug
->
DEMCR
 |
C‹eDebug_DEMCR_TRCENA_Msk
;

180 
NRF_CLOCK
->
TRACECONFIG
 |
CLOCK_TRACECONFIG_TRACEMUX_Sîül
 << 
CLOCK_TRACECONFIG_TRACEMUX_Pos
;

181 
NRF_P0
->
PIN_CNF
[18] = (
GPIO_PIN_CNF_DRIVE_H0H1
 << 
GPIO_PIN_CNF_DRIVE_Pos
Ë| (
GPIO_PIN_CNF_INPUT_C⁄√˘
 << 
GPIO_PIN_CNF_INPUT_Pos
Ë| (
GPIO_PIN_CNF_DIR_Ouçut
 << 
GPIO_PIN_CNF_DIR_Pos
);

186 #i‡
	`deföed
 (
ENABLE_TRACE
)

187 
C‹eDebug
->
DEMCR
 |
C‹eDebug_DEMCR_TRCENA_Msk
;

188 
NRF_CLOCK
->
TRACECONFIG
 |
CLOCK_TRACECONFIG_TRACEMUX_P¨ÆÀl
 << 
CLOCK_TRACECONFIG_TRACEMUX_Pos
;

189 
NRF_P0
->
PIN_CNF
[14] = (
GPIO_PIN_CNF_DRIVE_H0H1
 << 
GPIO_PIN_CNF_DRIVE_Pos
Ë| (
GPIO_PIN_CNF_INPUT_C⁄√˘
 << 
GPIO_PIN_CNF_INPUT_Pos
Ë| (
GPIO_PIN_CNF_DIR_Ouçut
 << 
GPIO_PIN_CNF_DIR_Pos
);

190 
NRF_P0
->
PIN_CNF
[15] = (
GPIO_PIN_CNF_DRIVE_H0H1
 << 
GPIO_PIN_CNF_DRIVE_Pos
Ë| (
GPIO_PIN_CNF_INPUT_C⁄√˘
 << 
GPIO_PIN_CNF_INPUT_Pos
Ë| (
GPIO_PIN_CNF_DIR_Ouçut
 << 
GPIO_PIN_CNF_DIR_Pos
);

191 
NRF_P0
->
PIN_CNF
[16] = (
GPIO_PIN_CNF_DRIVE_H0H1
 << 
GPIO_PIN_CNF_DRIVE_Pos
Ë| (
GPIO_PIN_CNF_INPUT_C⁄√˘
 << 
GPIO_PIN_CNF_INPUT_Pos
Ë| (
GPIO_PIN_CNF_DIR_Ouçut
 << 
GPIO_PIN_CNF_DIR_Pos
);

192 
NRF_P0
->
PIN_CNF
[18] = (
GPIO_PIN_CNF_DRIVE_H0H1
 << 
GPIO_PIN_CNF_DRIVE_Pos
Ë| (
GPIO_PIN_CNF_INPUT_C⁄√˘
 << 
GPIO_PIN_CNF_INPUT_Pos
Ë| (
GPIO_PIN_CNF_DIR_Ouçut
 << 
GPIO_PIN_CNF_DIR_Pos
);

193 
NRF_P0
->
PIN_CNF
[20] = (
GPIO_PIN_CNF_DRIVE_H0H1
 << 
GPIO_PIN_CNF_DRIVE_Pos
Ë| (
GPIO_PIN_CNF_INPUT_C⁄√˘
 << 
GPIO_PIN_CNF_INPUT_Pos
Ë| (
GPIO_PIN_CNF_DIR_Ouçut
 << 
GPIO_PIN_CNF_DIR_Pos
);

196 
	`Sy°emC‹eClockUpd©e
();

197 
	}
}

200 
boﬁ
 
	$îøè_16
()

202 i‡((((*(
uöt32_t
 *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){

203 i‡(((*(
uöt32_t
 *)0xF0000FE8) & 0x000000F0) == 0x30){

204  
åue
;

208  
Ál£
;

209 
	}
}

211 
boﬁ
 
	$îøè_31
()

213 i‡((((*(
uöt32_t
 *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){

214 i‡(((*(
uöt32_t
 *)0xF0000FE8) & 0x000000F0) == 0x30){

215  
åue
;

217 i‡(((*(
uöt32_t
 *)0xF0000FE8) & 0x000000F0) == 0x40){

218  
åue
;

220 i‡(((*(
uöt32_t
 *)0xF0000FE8) & 0x000000F0) == 0x50){

221  
åue
;

225  
Ál£
;

226 
	}
}

228 
boﬁ
 
	$îøè_32
()

230 i‡((((*(
uöt32_t
 *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){

231 i‡(((*(
uöt32_t
 *)0xF0000FE8) & 0x000000F0) == 0x30){

232  
åue
;

236  
Ál£
;

237 
	}
}

239 
boﬁ
 
	$îøè_36
()

241 i‡((((*(
uöt32_t
 *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){

242 i‡(((*(
uöt32_t
 *)0xF0000FE8) & 0x000000F0) == 0x30){

243  
åue
;

245 i‡(((*(
uöt32_t
 *)0xF0000FE8) & 0x000000F0) == 0x40){

246  
åue
;

248 i‡(((*(
uöt32_t
 *)0xF0000FE8) & 0x000000F0) == 0x50){

249  
åue
;

253  
Ál£
;

254 
	}
}

256 
boﬁ
 
	$îøè_37
()

258 i‡((((*(
uöt32_t
 *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){

259 i‡(((*(
uöt32_t
 *)0xF0000FE8) & 0x000000F0) == 0x30){

260  
åue
;

264  
Ál£
;

265 
	}
}

267 
boﬁ
 
	$îøè_57
()

269 i‡((((*(
uöt32_t
 *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){

270 i‡(((*(
uöt32_t
 *)0xF0000FE8) & 0x000000F0) == 0x30){

271  
åue
;

275  
Ál£
;

276 
	}
}

278 
boﬁ
 
	$îøè_66
()

280 i‡((((*(
uöt32_t
 *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){

281 i‡(((*(
uöt32_t
 *)0xF0000FE8) & 0x000000F0) == 0x50){

282  
åue
;

286  
Ál£
;

287 
	}
}

290 
boﬁ
 
	$îøè_108
()

292 i‡((((*(
uöt32_t
 *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){

293 i‡(((*(
uöt32_t
 *)0xF0000FE8) & 0x000000F0) == 0x30){

294  
åue
;

296 i‡(((*(
uöt32_t
 *)0xF0000FE8) & 0x000000F0) == 0x40){

297  
åue
;

299 i‡(((*(
uöt32_t
 *)0xF0000FE8) & 0x000000F0) == 0x50){

300  
åue
;

304  
Ál£
;

305 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\external\segger_rtt\RTT_Syscalls_GCC.c

47 #i‡
deföed
(
NRF_LOG_USES_RTT
) && NRF_LOG_USES_RTT == 1

48 
	~<°dlib.h
>

49 
	~"SEGGER_RTT.h
"

57 
_wrôe
(
fûe
, *
±r
, 
Àn
);

58 
_wrôe_r
(
_ªít
 *
r
, 
fûe
, *
±r
, 
Àn
);

77 
	$_wrôe
(
fûe
, *
±r
, 
Àn
) {

78 (Ë
fûe
;

79 
	`SEGGER_RTT_Wrôe
(0, 
±r
, 
Àn
);

80  
Àn
;

81 
	}
}

93 
	$_wrôe_r
(
_ªít
 *
r
, 
fûe
, *
±r
, 
Àn
) {

94 (Ë
fûe
;

95 (Ë
r
;

96 
	`SEGGER_RTT_Wrôe
(0, 
±r
, 
Àn
);

97  
Àn
;

98 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\external\segger_rtt\SEGGER_RTT.c

56 
	~"SEGGER_RTT.h
"

58 
	~<°rög.h
>

67 #i‚de‡ 
BUFFER_SIZE_UP


68 
	#BUFFER_SIZE_UP
 1024

70 

	)

71 #i‚de‡ 
BUFFER_SIZE_DOWN


72 
	#BUFFER_SIZE_DOWN
 16

74 

	)

75 #i‚de‡ 
SEGGER_RTT_MAX_NUM_UP_BUFFERS


76 
	#SEGGER_RTT_MAX_NUM_UP_BUFFERS
 2

78 

	)

79 #i‚de‡ 
SEGGER_RTT_MAX_NUM_DOWN_BUFFERS


80 
	#SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
 2

82 

	)

83 #i‚de‡ 
SEGGER_RTT_MODE_DEFAULT


84 
	#SEGGER_RTT_MODE_DEFAULT
 
SEGGER_RTT_MODE_NO_BLOCK_SKIP


	)

87 #i‚de‡ 
SEGGER_RTT_LOCK


88 
	#SEGGER_RTT_LOCK
(
SavedSèã
)

	)

91 #i‚de‡ 
SEGGER_RTT_UNLOCK


92 
	#SEGGER_RTT_UNLOCK
(
SavedSèã
)

	)

95 #i‚de‡ 
STRLEN


96 
	#STRLEN
(
a
Ë
	`°æí
(◊))

	)

99 #i‚de‡ 
MEMCPY


100 
	#MEMCPY
(
pDe°
, 
pSrc
, 
NumByãs
Ë
	`mem˝y
(’De°), (pSrc), (NumByãs))

	)

103 #i‚de‡ 
MIN


104 
	#MIN
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

107 #i‚de‡ 
MAX


108 
	#MAX
(
a
, 
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

113 #i‚de‡
NULL


114 
	#NULL
 0

	)

124 
	g_aTîmöÆId
[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };

135 
	g_acUpBuf„r
 [
BUFFER_SIZE_UP
];

136 
	g_acDownBuf„r
[
BUFFER_SIZE_DOWN
];

140 
SEGGER_RTT_CB
 
	g_SEGGER_RTT
;

142 
	g_A˘iveTîmöÆ
;

160 
	#INIT
() do { \

161 i‡(
_SEGGER_RTT
.
acID
[0] ='\0'Ë{ 
	`_DoInô
(); } \

162 } 0)

	)

163 
	$_DoInô
() {

164 
SEGGER_RTT_CB
* 
p
;

168 
p
 = &
_SEGGER_RTT
;

169 
p
->
MaxNumUpBuf„rs
 = 
SEGGER_RTT_MAX_NUM_UP_BUFFERS
;

170 
p
->
MaxNumDownBuf„rs
 = 
SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
;

174 
p
->
aUp
[0].
sName
 = "Terminal";

175 
p
->
aUp
[0].
pBuf„r
 = 
_acUpBuf„r
;

176 
p
->
aUp
[0].
SizeOfBuf„r
 = (
_acUpBuf„r
);

177 
p
->
aUp
[0].
RdOff
 = 0u;

178 
p
->
aUp
[0].
WrOff
 = 0u;

179 
p
->
aUp
[0].
Fœgs
 = 
SEGGER_RTT_MODE_DEFAULT
;

183 
p
->
aDown
[0].
sName
 = "Terminal";

184 
p
->
aDown
[0].
pBuf„r
 = 
_acDownBuf„r
;

185 
p
->
aDown
[0].
SizeOfBuf„r
 = (
_acDownBuf„r
);

186 
p
->
aDown
[0].
RdOff
 = 0u;

187 
p
->
aDown
[0].
WrOff
 = 0u;

188 
p
->
aDown
[0].
Fœgs
 = 
SEGGER_RTT_MODE_DEFAULT
;

194 
	`°r˝y
(&
p
->
acID
[7], "RTT");

195 
	`°r˝y
(&
p
->
acID
[0], "SEGGER");

196 
p
->
acID
[6] = ' ';

197 
	}
}

218 
	$_WrôeBlockög
(
SEGGER_RTT_RING_BUFFER
 *
pRög
, c⁄° * 
pBuf„r
, 
NumByãs
) {

219 
NumByãsToWrôe
;

220 
NumByãsWrôãn
;

221 
RdOff
;

222 
WrOff
;

226 
NumByãsWrôãn
 = 0u;

227 
WrOff
 = 
pRög
->WrOff;

229 
RdOff
 = 
pRög
->RdOff;

230 i‡(
RdOff
 > 
WrOff
) {

231 
NumByãsToWrôe
 = 
RdOff
 - 
WrOff
 - 1u;

233 
NumByãsToWrôe
 = 
pRög
->
SizeOfBuf„r
 - (
WrOff
 - 
RdOff
 + 1u);

235 
NumByãsToWrôe
 = 
	`MIN
(NumByãsToWrôe, (
pRög
->
SizeOfBuf„r
 - 
WrOff
));

236 
NumByãsToWrôe
 = 
	`MIN
(NumByãsToWrôe, 
NumByãs
);

237 
	`mem˝y
(
pRög
->
pBuf„r
 + 
WrOff
,ÖBuf„r, 
NumByãsToWrôe
);

238 
NumByãsWrôãn
 +
NumByãsToWrôe
;

239 
pBuf„r
 +
NumByãsToWrôe
;

240 
NumByãs
 -
NumByãsToWrôe
;

241 
WrOff
 +
NumByãsToWrôe
;

242 i‡(
WrOff
 =
pRög
->
SizeOfBuf„r
) {

243 
WrOff
 = 0u;

245 
pRög
->
WrOff
 = WrOff;

246 } 
NumByãs
);

248  
NumByãsWrôãn
;

249 
	}
}

269 
	$_WrôeNoCheck
(
SEGGER_RTT_RING_BUFFER
 *
pRög
, c⁄° * 
pD©a
, 
NumByãs
) {

270 
NumByãsAtOn˚
;

271 
WrOff
;

272 
Rem
;

274 
WrOff
 = 
pRög
->WrOff;

275 
Rem
 = 
pRög
->
SizeOfBuf„r
 - 
WrOff
;

276 i‡(
Rem
 > 
NumByãs
) {

280 
	`mem˝y
(
pRög
->
pBuf„r
 + 
WrOff
, 
pD©a
, 
NumByãs
);

281 
pRög
->
WrOff
 = WrOf‡+ 
NumByãs
;

286 
NumByãsAtOn˚
 = 
Rem
;

287 
	`mem˝y
(
pRög
->
pBuf„r
 + 
WrOff
, 
pD©a
, 
NumByãsAtOn˚
);

288 
NumByãsAtOn˚
 = 
NumByãs
 - 
Rem
;

289 
	`mem˝y
(
pRög
->
pBuf„r
, 
pD©a
 + 
Rem
, 
NumByãsAtOn˚
);

290 
pRög
->
WrOff
 = 
NumByãsAtOn˚
;

292 
	}
}

307 
	$_Po°TîmöÆSwôch
(
SEGGER_RTT_RING_BUFFER
 *
pRög
, 
TîmöÆId
) {

308 
ac
[2];

310 
ac
[0] = 0xFFu;

311 
ac
[1] = 
_aTîmöÆId
[()
TîmöÆId
];

312 
	`_WrôeBlockög
(
pRög
, 
ac
, 2u);

313 
	}
}

329 
	$_GëAvaûWrôeS∑˚
(
SEGGER_RTT_RING_BUFFER
 *
pRög
) {

330 
RdOff
;

331 
WrOff
;

332 
r
;

337 
RdOff
 = 
pRög
->RdOff;

338 
WrOff
 = 
pRög
->WrOff;

339 i‡(
RdOff
 <
WrOff
) {

340 
r
 = 
pRög
->
SizeOfBuf„r
 - 1u - 
WrOff
 + 
RdOff
;

342 
r
 = 
RdOff
 - 
WrOff
 - 1u;

344  
r
;

345 
	}
}

370 
	$SEGGER_RTT_RódNoLock
(
Buf„rIndex
, * 
pD©a
, 
Buf„rSize
) {

371 
NumByãsRem
;

372 
NumByãsRód
;

373 
RdOff
;

374 
WrOff
;

375 * 
pBuf„r
;

376 
SEGGER_RTT_RING_BUFFER
* 
pRög
;

378 
	`INIT
();

379 
pRög
 = &
_SEGGER_RTT
.
aDown
[
Buf„rIndex
];

380 
pBuf„r
 = (*)
pD©a
;

381 
RdOff
 = 
pRög
->RdOff;

382 
WrOff
 = 
pRög
->WrOff;

383 
NumByãsRód
 = 0u;

387 i‡(
RdOff
 > 
WrOff
) {

388 
NumByãsRem
 = 
pRög
->
SizeOfBuf„r
 - 
RdOff
;

389 
NumByãsRem
 = 
	`MIN
(NumByãsRem, 
Buf„rSize
);

390 
	`mem˝y
(
pBuf„r
, 
pRög
->pBuf„∏+ 
RdOff
, 
NumByãsRem
);

391 
NumByãsRód
 +
NumByãsRem
;

392 
pBuf„r
 +
NumByãsRem
;

393 
Buf„rSize
 -
NumByãsRem
;

394 
RdOff
 +
NumByãsRem
;

398 i‡(
RdOff
 =
pRög
->
SizeOfBuf„r
) {

399 
RdOff
 = 0u;

405 
NumByãsRem
 = 
WrOff
 - 
RdOff
;

406 
NumByãsRem
 = 
	`MIN
(NumByãsRem, 
Buf„rSize
);

407 i‡(
NumByãsRem
 > 0u) {

408 
	`mem˝y
(
pBuf„r
, 
pRög
->pBuf„∏+ 
RdOff
, 
NumByãsRem
);

409 
NumByãsRód
 +
NumByãsRem
;

410 
pBuf„r
 +
NumByãsRem
;

411 
Buf„rSize
 -
NumByãsRem
;

412 
RdOff
 +
NumByãsRem
;

414 i‡(
NumByãsRód
) {

415 
pRög
->
RdOff
 = RdOff;

418  
NumByãsRód
;

419 
	}
}

437 
	$SEGGER_RTT_Ród
(
Buf„rIndex
, * 
pBuf„r
, 
Buf„rSize
) {

438 
NumByãsRód
;

439 vﬁ©ûê
SavedSèã
;

441 
	`SEGGER_RTT_LOCK
(
SavedSèã
);

445 
NumByãsRód
 = 
	`SEGGER_RTT_RódNoLock
(
Buf„rIndex
, 
pBuf„r
, 
Buf„rSize
);

449 
	`SEGGER_RTT_UNLOCK
(
SavedSèã
);

451  
NumByãsRód
;

452 
	}
}

478 
	$SEGGER_RTT_WrôeSkùNoLock
(
Buf„rIndex
, c⁄° * 
pBuf„r
, 
NumByãs
) {

479 c⁄° * 
pD©a
;

480 
SEGGER_RTT_RING_BUFFER
* 
pRög
;

481 
Avaû
;

482 
RdOff
;

483 
WrOff
;

484 
Rem
;

486 
pD©a
 = (c⁄° *)
pBuf„r
;

490 
pRög
 = &
_SEGGER_RTT
.
aUp
[
Buf„rIndex
];

491 
RdOff
 = 
pRög
->RdOff;

492 
WrOff
 = 
pRög
->WrOff;

506 i‡(
RdOff
 <
WrOff
) {

510 
Avaû
 = 
pRög
->
SizeOfBuf„r
 - 1u - 
WrOff
 ;

511 i‡(
Avaû
 >
NumByãs
) {

512 
	`mem˝y
(
pRög
->
pBuf„r
 + 
WrOff
, 
pD©a
, 
NumByãs
);

513 
pRög
->
WrOff
 = WrOf‡+ 
NumByãs
;

519 
Avaû
 +
RdOff
;

523 i‡(
Avaû
 >
NumByãs
) {

527 
Rem
 = 
pRög
->
SizeOfBuf„r
 - 
WrOff
;

528 i‡(
Rem
 > 
NumByãs
) {

529 
	`mem˝y
(
pRög
->
pBuf„r
 + 
WrOff
, 
pD©a
, 
NumByãs
);

530 
pRög
->
WrOff
 = WrOf‡+ 
NumByãs
;

535 
	`mem˝y
(
pRög
->
pBuf„r
 + 
WrOff
, 
pD©a
, 
Rem
);

536 
	`mem˝y
(
pRög
->
pBuf„r
, 
pD©a
 + 
Rem
, 
NumByãs
 - Rem);

537 
pRög
->
WrOff
 = 
NumByãs
 - 
Rem
;

542 
Avaû
 = 
RdOff
 - 
WrOff
 - 1u;

543 i‡(
Avaû
 >
NumByãs
) {

544 
	`mem˝y
(
pRög
->
pBuf„r
 + 
WrOff
, 
pD©a
, 
NumByãs
);

545 
pRög
->
WrOff
 = WrOf‡+ 
NumByãs
;

553 
	}
}

578 
	$SEGGER_RTT_WrôeNoLock
(
Buf„rIndex
, c⁄° * 
pBuf„r
, 
NumByãs
) {

579 
Sètus
;

580 
Avaû
;

581 c⁄° * 
pD©a
;

582 
SEGGER_RTT_RING_BUFFER
 *
pRög
;

584 
pD©a
 = (c⁄° *)
pBuf„r
;

588 
pRög
 = &
_SEGGER_RTT
.
aUp
[
Buf„rIndex
];

592 
pRög
->
Fœgs
) {

593 
SEGGER_RTT_MODE_NO_BLOCK_SKIP
:

598 
Avaû
 = 
	`_GëAvaûWrôeS∑˚
(
pRög
);

599 i‡(
Avaû
 < 
NumByãs
) {

600 
Sètus
 = 0u;

602 
Sètus
 = 
NumByãs
;

603 
	`_WrôeNoCheck
(
pRög
, 
pD©a
, 
NumByãs
);

606 
SEGGER_RTT_MODE_NO_BLOCK_TRIM
:

610 
Avaû
 = 
	`_GëAvaûWrôeS∑˚
(
pRög
);

611 
Sètus
 = 
Avaû
 < 
NumByãs
 ? Avail : NumBytes;

612 
	`_WrôeNoCheck
(
pRög
, 
pD©a
, 
Sètus
);

614 
SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL
:

618 
Sètus
 = 
	`_WrôeBlockög
(
pRög
, 
pD©a
, 
NumByãs
);

621 
Sètus
 = 0u;

627  
Sètus
;

628 
	}
}

649 
	$SEGGER_RTT_Wrôe
(
Buf„rIndex
, c⁄° * 
pBuf„r
, 
NumByãs
) {

650 
Sètus
;

651 vﬁ©ûê
SavedSèã
;

653 
	`INIT
();

654 
	`SEGGER_RTT_LOCK
(
SavedSèã
);

658 
Sètus
 = 
	`SEGGER_RTT_WrôeNoLock
(
Buf„rIndex
, 
pBuf„r
, 
NumByãs
);

662 
	`SEGGER_RTT_UNLOCK
(
SavedSèã
);

664  
Sètus
;

665 
	}
}

688 
	$SEGGER_RTT_WrôeSåög
(
Buf„rIndex
, c⁄° * 
s
) {

689 
Lí
;

691 
Lí
 = 
	`STRLEN
(
s
);

692  
	`SEGGER_RTT_Wrôe
(
Buf„rIndex
, 
s
, 
Lí
);

693 
	}
}

710 
	$SEGGER_RTT_GëKey
() {

711 
c
;

712 
r
;

714 
r
 = ()
	`SEGGER_RTT_Ród
(0u, &
c
, 1u);

715 i‡(
r
 == 1) {

716 
r
 = ()()
c
;

718 
r
 = -1;

720  
r
;

721 
	}
}

738 
	$SEGGER_RTT_WaôKey
() {

739 
r
;

742 
r
 = 
	`SEGGER_RTT_GëKey
();

743 } 
r
 < 0);

744  
r
;

745 
	}
}

761 
	$SEGGER_RTT_HasKey
() {

762 
RdOff
;

763 
r
;

765 
	`INIT
();

766 
RdOff
 = 
_SEGGER_RTT
.
aDown
[0].RdOff;

767 i‡(
RdOff
 !
_SEGGER_RTT
.
aDown
[0].
WrOff
) {

768 
r
 = 1;

770 
r
 = 0;

772  
r
;

773 
	}
}

787 
	$SEGGER_RTT_HasD©a
(
Buf„rIndex
) {

788 
SEGGER_RTT_RING_BUFFER
 *
pRög
;

789 
v
;

791 
pRög
 = &
_SEGGER_RTT
.
aDown
[
Buf„rIndex
];

792 
v
 = 
pRög
->
WrOff
;

793  
v
 - 
pRög
->
RdOff
;

794 
	}
}

817 
	$SEGGER_RTT_C⁄figUpBuf„r
(
Buf„rIndex
, c⁄° * 
sName
, * 
pBuf„r
, 
Buf„rSize
, 
Fœgs
) {

818 
r
;

819 vﬁ©ûê
SavedSèã
;

821 
	`INIT
();

822 i‡(
Buf„rIndex
 < ()
_SEGGER_RTT
.
MaxNumUpBuf„rs
) {

823 
	`SEGGER_RTT_LOCK
(
SavedSèã
);

824 i‡(
Buf„rIndex
 > 0u) {

825 
_SEGGER_RTT
.
aUp
[
Buf„rIndex
].
sName
 = sName;

826 
_SEGGER_RTT
.
aUp
[
Buf„rIndex
].
pBuf„r
 =ÖBuffer;

827 
_SEGGER_RTT
.
aUp
[
Buf„rIndex
].
SizeOfBuf„r
 = 
Buf„rSize
;

828 
_SEGGER_RTT
.
aUp
[
Buf„rIndex
].
RdOff
 = 0u;

829 
_SEGGER_RTT
.
aUp
[
Buf„rIndex
].
WrOff
 = 0u;

831 
_SEGGER_RTT
.
aUp
[
Buf„rIndex
].
Fœgs
 = Flags;

832 
	`SEGGER_RTT_UNLOCK
(
SavedSèã
);

833 
r
 = 0;

835 
r
 = -1;

837  
r
;

838 
	}
}

860 
	$SEGGER_RTT_C⁄figDownBuf„r
(
Buf„rIndex
, c⁄° * 
sName
, * 
pBuf„r
, 
Buf„rSize
, 
Fœgs
) {

861 
r
;

862 vﬁ©ûê
SavedSèã
;

864 
	`INIT
();

865 i‡(
Buf„rIndex
 < ()
_SEGGER_RTT
.
MaxNumDownBuf„rs
) {

866 
	`SEGGER_RTT_LOCK
(
SavedSèã
);

867 i‡(
Buf„rIndex
 > 0u) {

868 
_SEGGER_RTT
.
aDown
[
Buf„rIndex
].
sName
 = sName;

869 
_SEGGER_RTT
.
aDown
[
Buf„rIndex
].
pBuf„r
 =ÖBuffer;

870 
_SEGGER_RTT
.
aDown
[
Buf„rIndex
].
SizeOfBuf„r
 = 
Buf„rSize
;

871 
_SEGGER_RTT
.
aDown
[
Buf„rIndex
].
RdOff
 = 0u;

872 
_SEGGER_RTT
.
aDown
[
Buf„rIndex
].
WrOff
 = 0u;

874 
_SEGGER_RTT
.
aDown
[
Buf„rIndex
].
Fœgs
 = Flags;

875 
	`SEGGER_RTT_UNLOCK
(
SavedSèã
);

876 
r
 = 0;

878 
r
 = -1;

880  
r
;

881 
	}
}

899 
	$SEGGER_RTT_SëNameUpBuf„r
(
Buf„rIndex
, c⁄° * 
sName
) {

900 
r
;

901 vﬁ©ûê
SavedSèã
;

903 
	`INIT
();

904 i‡(
Buf„rIndex
 < ()
_SEGGER_RTT
.
MaxNumUpBuf„rs
) {

905 
	`SEGGER_RTT_LOCK
(
SavedSèã
);

906 
_SEGGER_RTT
.
aUp
[
Buf„rIndex
].
sName
 = sName;

907 
	`SEGGER_RTT_UNLOCK
(
SavedSèã
);

908 
r
 = 0;

910 
r
 = -1;

912  
r
;

913 
	}
}

931 
	$SEGGER_RTT_SëNameDownBuf„r
(
Buf„rIndex
, c⁄° * 
sName
) {

932 
r
;

933 vﬁ©ûê
SavedSèã
;

935 
	`INIT
();

936 i‡(
Buf„rIndex
 < ()
_SEGGER_RTT
.
MaxNumDownBuf„rs
) {

937 
	`SEGGER_RTT_LOCK
(
SavedSèã
);

938 
_SEGGER_RTT
.
aDown
[
Buf„rIndex
].
sName
 = sName;

939 
	`SEGGER_RTT_UNLOCK
(
SavedSèã
);

940 
r
 = 0;

942 
r
 = -1;

944  
r
;

945 
	}
}

956 
	$SEGGER_RTT_Inô
 () {

957 
	`INIT
();

958 
	}
}

974 
	$SEGGER_RTT_SëTîmöÆ
 (
TîmöÆId
) {

975 
ac
[2];

976 
SEGGER_RTT_RING_BUFFER
 *
pRög
;

977 vﬁ©ûê
SavedSèã
;

978 
Avaû
;

979 
r
;

981 
	`INIT
();

983 
r
 = 0;

984 
ac
[0] = 0xFFU;

985 i‡(
TîmöÆId
 < ()(
_aTîmöÆId
)) {

986 
ac
[1] = 
_aTîmöÆId
[()
TîmöÆId
];

987 
pRög
 = &
_SEGGER_RTT
.
aUp
[0];

988 
	`SEGGER_RTT_LOCK
(
SavedSèã
);

989 i‡((
pRög
->
Fœgs
 & 
SEGGER_RTT_MODE_MASK
Ë=
SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL
) {

990 
_A˘iveTîmöÆ
 = 
TîmöÆId
;

991 
	`_WrôeBlockög
(
pRög
, 
ac
, 2u);

993 
Avaû
 = 
	`_GëAvaûWrôeS∑˚
(
pRög
);

994 i‡(
Avaû
 >= 2) {

995 
_A˘iveTîmöÆ
 = 
TîmöÆId
;

996 
	`_WrôeNoCheck
(
pRög
, 
ac
, 2u);

998 
r
 = -1;

1001 
	`SEGGER_RTT_UNLOCK
(
SavedSèã
);

1003 
r
 = -1;

1005  
r
;

1006 
	}
}

1025 
	$SEGGER_RTT_TîmöÆOut
 (
TîmöÆId
, c⁄° * 
s
) {

1026 
Sètus
;

1027 
FøgLí
;

1028 
Avaû
;

1029 
SEGGER_RTT_RING_BUFFER
 *
pRög
;

1030 vﬁ©ûê
SavedSèã
;

1032 
	`INIT
();

1036 i‡(
TîmöÆId
 < ()(
_aTîmöÆId
)) {

1040 
pRög
 = &
_SEGGER_RTT
.
aUp
[0];

1045 
FøgLí
 = 
	`°æí
(
s
);

1049 
	`SEGGER_RTT_LOCK
(
SavedSèã
);

1050 
Avaû
 = 
	`_GëAvaûWrôeS∑˚
(
pRög
);

1051 
pRög
->
Fœgs
 & 
SEGGER_RTT_MODE_MASK
) {

1052 
SEGGER_RTT_MODE_NO_BLOCK_SKIP
:

1057 i‡(
Avaû
 < (
FøgLí
 + 4u)) {

1058 
Sètus
 = 0;

1060 
	`_Po°TîmöÆSwôch
(
pRög
, 
TîmöÆId
);

1061 
Sètus
 = ()
	`_WrôeBlockög
(
pRög
, 
s
, 
FøgLí
);

1062 
	`_Po°TîmöÆSwôch
(
pRög
, 
_A˘iveTîmöÆ
);

1065 
SEGGER_RTT_MODE_NO_BLOCK_TRIM
:

1071 i‡(
Avaû
 < 4u) {

1072 
Sètus
 = -1;

1074 
	`_Po°TîmöÆSwôch
(
pRög
, 
TîmöÆId
);

1075 
Sètus
 = ()
	`_WrôeBlockög
(
pRög
, 
s
, (
FøgLí
 < (
Avaû
 - 4u)) ? FragLen : (Avail - 4u));

1076 
	`_Po°TîmöÆSwôch
(
pRög
, 
_A˘iveTîmöÆ
);

1079 
SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL
:

1083 
	`_Po°TîmöÆSwôch
(
pRög
, 
TîmöÆId
);

1084 
Sètus
 = ()
	`_WrôeBlockög
(
pRög
, 
s
, 
FøgLí
);

1085 
	`_Po°TîmöÆSwôch
(
pRög
, 
_A˘iveTîmöÆ
);

1088 
Sètus
 = -1;

1094 
	`SEGGER_RTT_UNLOCK
(
SavedSèã
);

1096 
Sètus
 = -1;

1098  
Sètus
;

1099 
	}
}

	@C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\external\segger_rtt\SEGGER_RTT_printf.c

45 #i‡
deföed
(
NRF_LOG_USES_RTT
) && NRF_LOG_USES_RTT == 1

47 
	~"SEGGER_RTT.h
"

48 
	~"SEGGER_RTT_C⁄f.h
"

57 #i‚de‡
SEGGER_RTT_PRINTF_BUFFER_SIZE


58 
	#SEGGER_RTT_PRINTF_BUFFER_SIZE
 (64)

	)

61 
	~<°dlib.h
>

62 
	~<°d¨g.h
>

65 
	#FORMAT_FLAG_LEFT_JUSTIFY
 (1u << 0)

	)

66 
	#FORMAT_FLAG_PAD_ZERO
 (1u << 1)

	)

67 
	#FORMAT_FLAG_PRINT_SIGN
 (1u << 2)

	)

68 
	#FORMAT_FLAG_ALTERNATE
 (1u << 3)

	)

78 * 
	mpBuf„r
;

79 
	mBuf„rSize
;

80 
	mC¡
;

82 
	mRëu∫VÆue
;

84 
	mRTTBuf„rIndex
;

85 } 
	tSEGGER_RTT_PRINTF_DESC
;

93 
SEGGER_RTT_v¥ötf
(
Buf„rIndex
, c⁄° * 
sF‹m©
, 
va_li°
 * 
pP¨amLi°
);

105 
	$_St‹eCh¨
(
SEGGER_RTT_PRINTF_DESC
 * 
p
, 
c
) {

106 
C¡
;

108 
C¡
 = 
p
->Cnt;

109 i‡((
C¡
 + 1uË<
p
->
Buf„rSize
) {

110 *(
p
->
pBuf„r
 + 
C¡
Ë
c
;

111 
p
->
C¡
 = Cnt + 1u;

112 
p
->
Rëu∫VÆue
++;

117 i‡(
p
->
C¡
 =p->
Buf„rSize
) {

118 i‡(
	`SEGGER_RTT_Wrôe
(
p
->
RTTBuf„rIndex
,Ö->
pBuf„r
,Ö->
C¡
) !=Ö->Cnt) {

119 
p
->
Rëu∫VÆue
 = -1;

121 
p
->
C¡
 = 0u;

124 
	}
}

130 
	$_PrötUnsig√d
(
SEGGER_RTT_PRINTF_DESC
 * 
pBuf„rDesc
, 
v
, 
Ba£
, 
NumDigôs
, 
FõldWidth
, 
F‹m©Fœgs
) {

131 c⁄° 
_aV2C
[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };

132 
Div
;

133 
Digô
;

134 
Numbî
;

135 
Width
;

136 
c
;

138 
Numbî
 = 
v
;

139 
Digô
 = 1u;

143 
Width
 = 1u;

144 
Numbî
 >
Ba£
) {

145 
Numbî
 = (Numbî / 
Ba£
);

146 
Width
++;

148 i‡(
NumDigôs
 > 
Width
) {

149 
Width
 = 
NumDigôs
;

154 i‡((
F‹m©Fœgs
 & 
FORMAT_FLAG_LEFT_JUSTIFY
) == 0u) {

155 i‡(
FõldWidth
 != 0u) {

156 i‡(((
F‹m©Fœgs
 & 
FORMAT_FLAG_PAD_ZERO
Ë=FORMAT_FLAG_PAD_ZEROË&& (
NumDigôs
 == 0u)) {

157 
c
 = '0';

159 
c
 = ' ';

161 (
FõldWidth
 !0uË&& (
Width
 < FieldWidth)) {

162 
FõldWidth
--;

163 
	`_St‹eCh¨
(
pBuf„rDesc
, 
c
);

164 i‡(
pBuf„rDesc
->
Rëu∫VÆue
 < 0) {

170 i‡(
pBuf„rDesc
->
Rëu∫VÆue
 >= 0) {

177 i‡(
NumDigôs
 > 1u) {

178 
NumDigôs
--;

180 
Div
 = 
v
 / 
Digô
;

181 i‡(
Div
 < 
Ba£
) {

185 
Digô
 *
Ba£
;

191 
Div
 = 
v
 / 
Digô
;

192 
v
 -
Div
 * 
Digô
;

193 
	`_St‹eCh¨
(
pBuf„rDesc
, 
_aV2C
[
Div
]);

194 i‡(
pBuf„rDesc
->
Rëu∫VÆue
 < 0) {

197 
Digô
 /
Ba£
;

198 } 
Digô
);

202 i‡((
F‹m©Fœgs
 & 
FORMAT_FLAG_LEFT_JUSTIFY
) == FORMAT_FLAG_LEFT_JUSTIFY) {

203 i‡(
FõldWidth
 != 0u) {

204 (
FõldWidth
 !0uË&& (
Width
 < FieldWidth)) {

205 
FõldWidth
--;

206 
	`_St‹eCh¨
(
pBuf„rDesc
, ' ');

207 i‡(
pBuf„rDesc
->
Rëu∫VÆue
 < 0) {

214 
	}
}

220 
	$_PrötI¡
(
SEGGER_RTT_PRINTF_DESC
 * 
pBuf„rDesc
, 
v
, 
Ba£
, 
NumDigôs
, 
FõldWidth
, 
F‹m©Fœgs
) {

221 
Width
;

222 
Numbî
;

224 
Numbî
 = (
v
 < 0) ? -v : v;

229 
Width
 = 1u;

230 
Numbî
 >()
Ba£
) {

231 
Numbî
 = (Numbî / ()
Ba£
);

232 
Width
++;

234 i‡(
NumDigôs
 > 
Width
) {

235 
Width
 = 
NumDigôs
;

237 i‡((
FõldWidth
 > 0uË&& ((
v
 < 0Ë|| ((
F‹m©Fœgs
 & 
FORMAT_FLAG_PRINT_SIGN
) == FORMAT_FLAG_PRINT_SIGN))) {

238 
FõldWidth
--;

244 i‡((((
F‹m©Fœgs
 & 
FORMAT_FLAG_PAD_ZERO
Ë=0uË|| (
NumDigôs
 !0u)Ë&& ((F‹m©Fœg†& 
FORMAT_FLAG_LEFT_JUSTIFY
) == 0u)) {

245 i‡(
FõldWidth
 != 0u) {

246 (
FõldWidth
 !0uË&& (
Width
 < FieldWidth)) {

247 
FõldWidth
--;

248 
	`_St‹eCh¨
(
pBuf„rDesc
, ' ');

249 i‡(
pBuf„rDesc
->
Rëu∫VÆue
 < 0) {

258 i‡(
pBuf„rDesc
->
Rëu∫VÆue
 >= 0) {

259 i‡(
v
 < 0) {

260 
v
 = -v;

261 
	`_St‹eCh¨
(
pBuf„rDesc
, '-');

262 } i‡((
F‹m©Fœgs
 & 
FORMAT_FLAG_PRINT_SIGN
) == FORMAT_FLAG_PRINT_SIGN) {

263 
	`_St‹eCh¨
(
pBuf„rDesc
, '+');

267 i‡(
pBuf„rDesc
->
Rëu∫VÆue
 >= 0) {

271 i‡(((
F‹m©Fœgs
 & 
FORMAT_FLAG_PAD_ZERO
Ë=FORMAT_FLAG_PAD_ZEROË&& ((F‹m©Fœg†& 
FORMAT_FLAG_LEFT_JUSTIFY
Ë=0uË&& (
NumDigôs
 == 0u)) {

272 i‡(
FõldWidth
 != 0u) {

273 (
FõldWidth
 !0uË&& (
Width
 < FieldWidth)) {

274 
FõldWidth
--;

275 
	`_St‹eCh¨
(
pBuf„rDesc
, '0');

276 i‡(
pBuf„rDesc
->
Rëu∫VÆue
 < 0) {

282 i‡(
pBuf„rDesc
->
Rëu∫VÆue
 >= 0) {

286 
	`_PrötUnsig√d
(
pBuf„rDesc
, ()
v
, 
Ba£
, 
NumDigôs
, 
FõldWidth
, 
F‹m©Fœgs
);

290 
	}
}

315 
	$SEGGER_RTT_v¥ötf
(
Buf„rIndex
, c⁄° * 
sF‹m©
, 
va_li°
 * 
pP¨amLi°
) {

316 
c
;

317 
SEGGER_RTT_PRINTF_DESC
 
Buf„rDesc
;

318 
v
;

319 
NumDigôs
;

320 
F‹m©Fœgs
;

321 
FõldWidth
;

322 
acBuf„r
[
SEGGER_RTT_PRINTF_BUFFER_SIZE
];

324 
Buf„rDesc
.
pBuf„r
 = 
acBuf„r
;

325 
Buf„rDesc
.
Buf„rSize
 = 
SEGGER_RTT_PRINTF_BUFFER_SIZE
;

326 
Buf„rDesc
.
C¡
 = 0u;

327 
Buf„rDesc
.
RTTBuf„rIndex
 = 
Buf„rIndex
;

328 
Buf„rDesc
.
Rëu∫VÆue
 = 0;

331 
c
 = *
sF‹m©
;

332 
sF‹m©
++;

333 i‡(
c
 == 0u) {

336 i‡(
c
 == '%') {

340 
F‹m©Fœgs
 = 0u;

341 
v
 = 1;

343 
c
 = *
sF‹m©
;

344 
c
) {

345 '-': 
F‹m©Fœgs
 |
FORMAT_FLAG_LEFT_JUSTIFY
; 
sF‹m©
++; ;

346 '0': 
F‹m©Fœgs
 |
FORMAT_FLAG_PAD_ZERO
; 
sF‹m©
++; ;

347 '+': 
F‹m©Fœgs
 |
FORMAT_FLAG_PRINT_SIGN
; 
sF‹m©
++; ;

348 '#': 
F‹m©Fœgs
 |
FORMAT_FLAG_ALTERNATE
; 
sF‹m©
++; ;

349 : 
v
 = 0; ;

351 } 
v
);

355 
FõldWidth
 = 0u;

357 
c
 = *
sF‹m©
;

358 i‡((
c
 < '0') || (c > '9')) {

361 
sF‹m©
++;

362 
FõldWidth
 = (FõldWidth * 10uË+ (()
c
 - '0');

368 
NumDigôs
 = 0u;

369 
c
 = *
sF‹m©
;

370 i‡(
c
 == '.') {

371 
sF‹m©
++;

373 
c
 = *
sF‹m©
;

374 i‡((
c
 < '0') || (c > '9')) {

377 
sF‹m©
++;

378 
NumDigôs
 = NumDigô†* 10u + (()
c
 - '0');

384 
c
 = *
sF‹m©
;

386 i‡((
c
 == 'l') || (c == 'h')) {

387 
c
 = *
sF‹m©
;

388 
sF‹m©
++;

396 
c
) {

398 
c0
;

399 
v
 = 
	`va_¨g
(*
pP¨amLi°
, );

400 
c0
 = ()
v
;

401 
	`_St‹eCh¨
(&
Buf„rDesc
, 
c0
);

405 
v
 = 
	`va_¨g
(*
pP¨amLi°
, );

406 
	`_PrötI¡
(&
Buf„rDesc
, 
v
, 10u, 
NumDigôs
, 
FõldWidth
, 
F‹m©Fœgs
);

409 
v
 = 
	`va_¨g
(*
pP¨amLi°
, );

410 
	`_PrötUnsig√d
(&
Buf„rDesc
, ()
v
, 10u, 
NumDigôs
, 
FõldWidth
, 
F‹m©Fœgs
);

414 
v
 = 
	`va_¨g
(*
pP¨amLi°
, );

415 
	`_PrötUnsig√d
(&
Buf„rDesc
, ()
v
, 16u, 
NumDigôs
, 
FõldWidth
, 
F‹m©Fœgs
);

419 c⁄° * 
s
 = 
	`va_¨g
(*
pP¨amLi°
, const *);

421 
c
 = *
s
;

422 
s
++;

423 i‡(
c
 == '\0') {

426 
	`_St‹eCh¨
(&
Buf„rDesc
, 
c
);

427 } 
Buf„rDesc
.
Rëu∫VÆue
 >= 0);

431 
v
 = 
	`va_¨g
(*
pP¨amLi°
, );

432 
	`_PrötUnsig√d
(&
Buf„rDesc
, ()
v
, 16u, 8u, 8u, 0u);

435 
	`_St‹eCh¨
(&
Buf„rDesc
, '%');

440 
sF‹m©
++;

442 
	`_St‹eCh¨
(&
Buf„rDesc
, 
c
);

444 } 
Buf„rDesc
.
Rëu∫VÆue
 >= 0);

446 i‡(
Buf„rDesc
.
Rëu∫VÆue
 > 0) {

450 i‡(
Buf„rDesc
.
C¡
 != 0u) {

451 
	`SEGGER_RTT_Wrôe
(
Buf„rIndex
, 
acBuf„r
, 
Buf„rDesc
.
C¡
);

453 
Buf„rDesc
.
Rëu∫VÆue
 +()Buf„rDesc.
C¡
;

455  
Buf„rDesc
.
Rëu∫VÆue
;

456 
	}
}

489 
	$SEGGER_RTT_¥ötf
(
Buf„rIndex
, c⁄° * 
sF‹m©
, ...) {

490 
va_li°
 
P¨amLi°
;

492 
	`va_°¨t
(
P¨amLi°
, 
sF‹m©
);

493  
	`SEGGER_RTT_v¥ötf
(
Buf„rIndex
, 
sF‹m©
, &
P¨amLi°
);

494 
	}
}

	@main.h

3 
	#LORA_START
 '<'

	)

4 
	#LORA_END
 '>'

	)

5 
	#LORA_WAKEUP
 26

	)

7 
	#ACC_Bound¨y
 25

8 
	#LORA_WAKEUP_PERIOD
 10

9 
	#ACC_WAKEUP_PERIOD
 120

	)

10 
	#NRF_WAKEUP_PERIOD
 900

	)

11 
	#BATTERY_CHECK_PERIOD
 10

12 
	#LED_TOGGLE_PERIOD
 10

	)

14 
	#BLOCK0
 0x00000000

	)

15 
	#BLOCKEND
 0x0007F000

	)

17 
	#USER_PB_1s
 (1000UL)

	)

18 
	#USER_PB_2s
 (
USER_PB_1s
 * 2UL)

	)

19 
	#USER_PB_3s
 (
USER_PB_2s
 * 2UL)

	)

20 
	#USER_PB_1s_waô
 (
USER_PB_1s
 * 32768)/1000

	)

21 
	#USER_PB_2s_waô
 (
USER_PB_2s
 * 32768)/1000

	)

22 
	#USER_PB_3s_waô
 (
USER_PB_3s
 * 32768)/1000

	)

24 
	#AT_SEND_CMD_LENGTH
 16

	)

25 
	#RX_COMMAND_CODE
 9

	)

26 
	#CUTOFF_VOLTAGE
 190

	)

27 
	#CUTOFF_VOLTAGE_1
 190

	)

28 
	#CUTOFF_VOLTAGE_2
 175

	)

30 
	#PERIOD_4HZ
 0

	)

31 
	#PERIOD_2HZ
 1

	)

32 
	#PERIOD_1HZ
 2

	)

33 
	#PERIOD_05HZ
 3

	)

34 
	#PERIOD_025HZ
 4

	)

38 
uöt8_t
 
	gFLAG_AT_LORA_SEND
;

39 
uöt8_t
 
	gAT_LORA_FLAG_OK
;

40 
uöt8_t
 
	g©_£nd_l‹a_°©e
;

41 
uöt8_t
 
	g©_ª˚ive_l‹a_°©e
;

42 
uöt8_t
 
	gU¨t_RXD
;

44 
uöt8_t
 
	gãmp_buf
[256] ;

45 
uöt8_t
 
	gU¨t_RXD_Buf
[256];

46 
uöt8_t
 
	gLoRa_RXD_Buf
[1024] ;

47 
uöt8_t
 
	gÊash_rd_Buf
[256] ;

48 
uöt32_t
 
	gãmp_size
,
	gLoRa_rx_˙t
 ;

49 
uöt8_t
 
	gèg_id_4digô
[4] ;

50 
uöt8_t
 
	gb©ãry_amou¡
[3] ;

52 
uöt8_t
 
	gb©ãry
;

53 
uöt32_t
 
	g∑ge_˙t
 ;

54 
uöt32_t
 
	gﬁd_∑ge_˙t
 ;

55 
uöt32_t
 
	gcy˛e_l‹a
 ;

57 
uöt32_t
 
	gcou¡î_l‹a
 ;

58 
uöt32_t
 
	göãrvÆ
;

59 
uöt32_t
 
	gcou¡î_acc
 ;

60 
uöt32_t
 
	gcou¡î_b©
 ;

61 
uöt32_t
 
	gcou¡î_Àd
 ;

62 
uöt32_t
 
	gcou¡î_l‹a_íabÀ
 ;

63 
uöt32_t
 
	gcou¡î_l‹a_rx_ok
 ;

65 
uöt64_t
 
	gUWB_MACaddªss
 ;

66 
uöt64_t
 
	gRxUWB_MACaddªss
 ;

67 
uöt8_t
 
	gUWB_MACid
[12] ;

69 
uöt32_t
 
	gtime°amp
 ;

70 
uöt32_t
 
	gtime°amp_öô
 ;

71 
uöt32_t
 
	gtime°amp2
 ;

72 
uöt32_t
 
	gtime°amp_öô2
 ;

74 vﬁ©ûê
boﬁ
 
	gö√r_lo›
;

75 vﬁ©ûê
boﬁ
 
	gouãr_lo›
;

76 vﬁ©ûê
boﬁ
 
	gÊag_b©ãry_check
 ;

77 vﬁ©ûê
boﬁ
 
	gÊag_ªd_Àd_⁄
 ;

78 vﬁ©ûê
boﬁ
 
	gÊag_l‹a_a˘ive
 ;

79 vﬁ©ûê
boﬁ
 
	gÊag_l‹a_íabÀ
 ;

80 vﬁ©ûê
boﬁ
 
	gÊag_Àd_toggÀ
 ;

81 vﬁ©ûê
boﬁ
 
	gÀd_toggÀ_⁄
 ;

82 vﬁ©ûê
boﬁ
 
	gÊag_u¨t_rx_d©a
 ;

84 vﬁ©ûê
boﬁ
 
	gÊag_©_l‹a_£nd
 ;

85 vﬁ©ûê
boﬁ
 
	gÊag_l‹a_rx_ok
 ;

86 vﬁ©ûê
boﬁ
 
	gÊag_toggÀ_l‹a_wakeup
 ;

87 vﬁ©ûê
boﬁ
 
	gÊag_¶ìp_íabÀ
 ;

88 vﬁ©ûê
boﬁ
 
	gÊag_l‹a_ª˚ive_íabÀ
;

89 vﬁ©ûê
boﬁ
 
	gÊag_uwb_dìp_¶ìp
;

90 vﬁ©ûê
boﬁ
 
	gÊag_l‹a_wakeup_°©us
 ;

92 
öt32_t
 
	gacc_x
 , 
	gacc_y
 , 
	gacc_z
 ;

93 
öt32_t
 
	gacc_ﬁd_x
 , 
	gacc_ﬁd_y
 , 
	gacc_ﬁd_z
 ;

94 
öt32_t
 
	gacc_√w_x
 , 
	gacc_√w_y
 , 
	gacc_√w_z
 ;

95 
	gcou¡î_acc_mŸi⁄
 ;

	@platform/setting.h

1 #i‚de‡
SETTING_H_INCLUDED


2 
	#SETTING_H_INCLUDED


	)

4 
	#TAG_LIION
 (0)

	)

5 
	#TAG_PICO
 (1)

	)

6 
	#TAG_2_IMU
 (2)

	)

7 
	#TAG_2_LITE
 (3)

	)

14 
	#SW_VER
 (3)

15 
	#SW_SUBVER
 (124)

16 
	#SW_REV
 (6)

17 

	)

18 
	#HW_VERSION
 (1)

19 
	#HW_REVISION
 (3)

20 
	#HW_VER
 
HW_VERSION


	)

21 
	#HW_REV
 
HW_REVISION


	)

27 #i‡
PLATFORM
 =
TAG_2_LITE


29 
	#WAIT_FOR_CONF_RX_ON_TIME
 (100)

30 
	#WAIT_FOR_CONF_RX_SLEEP_TIME
 (200)

31 
	#WAIT_FOR_CONF_RX_COUNT
 (3)

	)

32 
	#WAIT_TIME_TO_RX_AFTER_ON
 (2000)

33 
	#ENABLE_WIRELESS_CONFIG_RX
 (1)

	)

34 
	#ACCELEROMETER_IN_USE


	)

36 
	#ACCELEROMETER_IN_USE


	)

37 
	#BAROMETER_IN_USE


	)

44 #ñi‡
PLATFORM
 =
TAG_2_IMU


46 
	#WAIT_FOR_CONFIG_TIMEOUT
 (1000)

	)

48 
	#ACCELEROMETER_IN_USE


	)

49 
	#BAROMETER_IN_USE


	)

50 
	#GYROSCOPE_IN_USE


	)

51 
	#MAGNETOMETER_IN_USE


	)

60 
	#DEVELOP
 (0)

	)

61 
	#RELEASE
 (1)

	)

63 
	#PRINT_ROLE
 
DEVELOP


	)

65 #i‚de‡
NULL


66 
	#NULL
 0

	)

69 
	#WDOG_IN_USE


	)

74 
	#USER_PB_SHORTPRESS_LIMIT
 (500UL)

75 
	#USER_PB_LONGPRESS_LIMIT
 (
USER_PB_SHORTPRESS_LIMIT
*4UL)

76 
	#USER_PB_VLONGPRESS_LIMIT
 (10000-
USER_PB_LONGPRESS_LIMIT
)

77 

	)

82 
	#WD_GUARD_INTERVAL_US
 100000UL

	)

87 
	#DELAY_BETWEEN_INFOBLINKS
 (1000)

88 
	#BEFORE1STBLINKDELAY
 (152)

89 
	#NUM_OF_IBLINK_SENDIG_AT_THE_BEGIN
 (3)

90 

	)

93 
	#EXTENDED_BLINK_BATT_FREQ
 (15)

94 

	)

96 
	#IBLINK_FREQ
 (225)

97 

	)

104 #i‡(
PLATFORM
 =
TAG_2_IMU
)

105 
	#MEAS_BATT_AFTER_RR
 (15)

106 
	#VCC_BATT_MINLEVEL
 (3200)

107 
	#VCC_BATT_MINLEVEL_FOR_DFU
 (3300)

108 
	#MIN_ALLOWED_BATT_VOLTAGE
 163

109 
	#MAX_ALLOWED_BATT_VOLTAGE
 212

110 
	#WAKE_UP_VOLTAGE_DURING_CHARGING
 (3300*128/2500)

	)

111 
	#MIN_ALLOWED_BATT_VOLTAGE_FOR_DFU
 ((
VCC_BATT_MINLEVEL_FOR_DFU
 * 128)/2500)

	)

112 
	#SLEEP_AFTER_LOW_BATT_MEASURE
 (3)

113 
	#GO_TO_SLEEP_IF_LOW_STARTUP_VOLTAGE


	)

114 
	#MEAS_BATT_DURING_CHARGE_PERIOD_SEC
 (120)

	)

115 
	#MEAS_BATT_DURING_CHARGE_PERIOD_TCKS
 (
MEAS_BATT_DURING_CHARGE_PERIOD_SEC
 * 32768)

	)

116 #ñi‡(
PLATFORM
 =
TAG_2_LITE
)

117 
	#MEAS_BATT_AFTER_RR
 (15)

118 
	#VCC_MCU_USB_MINLEVEL
 (2100)

119 
	#VCC_BATT_MINLEVEL
 (2100)

120 
	#SLEEP_AFTER_LOW_BATT_MEASURE
 (3)

121 
	#VCC_BATT_MINLEVEL_FOR_RX
 (2900)

122 
	#VCC_BATT_MINLEVEL_FOR_DFU
 (2500)

123 
	#MIN_ALLOWED_BATT_VOLTAGE
 142

124 
	#MAX_ALLOWED_BATT_VOLTAGE
 214

125 
	#MIN_ALLOWED_BATT_VOLTAGE_CR_FOR_RX
 ((
VCC_BATT_MINLEVEL_FOR_RX
 * 256)/3750)

126 
	#MIN_ALLOWED_BATT_VOLTAGE_FOR_DFU
 ((
VCC_BATT_MINLEVEL_FOR_DFU
 * 256)/3750)

128 

	)

129 
	#RR_DURING_CHARGE_MS
 (30000)

	)

137 
	#ADDR_BYTE_SIZE
 (6)

	)

138 
	#ADDR_BYTE_SIZE_ANCH
 (2)

	)

139 
	#TAG_BROADCAST_ADDR
 (0xFFFFFFFFFFFF)

	)

140 
	#MAC_ADDR_48b_MASK
 (0xFFFFFFFFFFFFULL)

	)

142 
	#UWB_FCODE_BLINK
 (0xBB)

	)

143 
	#UWB_FCODE_CONF
 (0xCC)

	)

149 
	#MAX_USER_REFRESH_RATE_MS
 (60000)

150 
	#MAX_NO_MOT_REFRESH_RATE_MS
 (129600000)

151 #i‡(
PLATFORM
 =
TAG_2_IMU
)

	)

152 
	#MIN_USER_REFRESH_RATE_MS
 (10)

153 
	#MIN_NO_MOT_REFRESH_RATE_MS
 (
MIN_USER_REFRESH_RATE_MS
)

	)

154 #ñi‡(
PLATFORM
 =
TAG_2_LITE
)

155 
	#MIN_USER_REFRESH_RATE_MS
 (50)

156 
	#MIN_NO_MOT_REFRESH_RATE_MS
 (
MIN_USER_REFRESH_RATE_MS
)

	)

161 #i‡(
PLATFORM
 =
LIION_TAG
Ë|| (PLATFORM =
TAG_2_IMU
)

162 
	#PERIODICAL_RX_EN


	)

163 
	#MIN_RX_PERIOD_MS
 (120)

164 
	#MAX_RX_PERIOD_MS
 (64800000)

165 
	#MIN_RX_DURATION_MS
 (50)

	)

166 
	#MAX_RX_DURATION_MS
 (10000)

	)

167 
	#CONSTANT
 (0)

	)

168 
	#VARIABLE
 (1)

	)

169 
	#RX_PERIOD
 
VARIABLE


	)

175 
	#ACC_TIME_TO_WAIT_INMOTION
 (15000)

176 
	#RR_IN_IDLE_MODE
 (5000)

177 

	)

182 
	#LIS2DH12_THRESHOLD_STEP
 (16)

183 
	#LIS2DH12_LOW_THRESHOLD
 (48)

	)

184 
	#LIS2DH12_MIN_THRESHOLD
 (
LIS2DH12_LOW_THRESHOLD
)

	)

185 
	#LIS2DH12_MEDIUM_THRESHOLD
 (256)

	)

186 
	#LIS2DH12_HIGH_THRESHOLD
 (1024)

	)

187 
	#LIS2DH12_MAX_THRESHOLD
 (8001)

	)

190 
	#LOW_THRESHOLD_FLAG
 (1 << 14)

	)

191 
	#MEDIUM_THRESHOLD_FLAG
 (2 << 14)

	)

192 
	#HIGH_THRESHOLD_FLAG
 (3 << 14)

	)

193 
	#PREDEFINED_THRESHOLD_MASK
 (3 << 14)

	)

197 
	#EEPROM_NUM_OF_RW_ATTEMPTS
 (3)

	)

201 
	#USER_DATA_BASE
 (1)

	)

202 
	#USER_DATA_TOP
 (16)

	)

203 
	#RESERVED_BASE
 (17)

	)

204 
	#RESERVED_TOP
 (30)

	)

205 
	#NEW_SETTING_BASE_ADDR
 (31)

	)

206 
	#NEW_SETTING_TOP_ADDR
 (38)

	)

207 
	#USER_SET_BASE_ADDR
 (39)

	)

208 
	#USER_SET_TOP_ADDR
 (46)

	)

209 
	#DEF_SET_BASE_ADDR
 (47)

	)

210 
	#DEF_SET_TOP_ADDR
 (54)

	)

212 
	#TAG_INFO_ADDR
 (55)

	)

216 
	#SETTING_INIT_CHECK
 ((
SW_VER
 << 16)| (
SW_SUBVER
 << 8Ë| (
SW_REV
))

	)

	@
1
.
0
67
4953
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\TEIA_var.h
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\application\TDOA_routines.c
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\application\TDOA_routines.h
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\application\TEIA_routines.c
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\application\TEIA_routines.h
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\config\sdk_config.h
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\drivers\radios\DWM\deca_device.c
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\drivers\radios\DWM\deca_device_api.h
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\drivers\radios\DWM\deca_param_types.h
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\drivers\radios\DWM\deca_params_init.c
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\drivers\radios\DWM\deca_range_tables.c
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\drivers\radios\DWM\deca_regs.h
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\drivers\radios\DWM\deca_types.h
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\drivers\radios\DWM\deca_version.h
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\drivers\sensors\LIS2DH12.c
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\drivers\sensors\LIS2DH12.h
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\gcc_startup_nrf52.s
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\main.c
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\main.h
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\nrf52_xxaa.ld
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\DWM_routines.c
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\DWM_routines.h
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\IRQ_handlers.c
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\IRQ_handlers.h
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\default_set.h
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\my_memcpy.h
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\peripheral.c
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\peripheral.h
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\port_def.h
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\setting.h
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\timing.c
C:\(201)__LMS_UWB_2021\LMS_UWB_2021\platform\timing.h
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\clock\nrf_drv_clock.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\common\nrf_drv_common.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\gpiote\nrf_drv_gpiote.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\hal\nrf_nvmc.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\hal\nrf_nvmc.h
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\hal\nrf_saadc.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\power\nrf_drv_power.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\rtc\nrf_drv_rtc.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\saadc\nrf_drv_saadc.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\spi_master\nrf_drv_spi.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\twi_master\nrf_drv_twi.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\uart\nrf_drv_uart.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\uart\nrf_drv_uart.h
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\wdt\nrf_drv_wdt.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\bootloader\dfu\nrf_dfu_mbr.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\bootloader\nrf_bootloader_app_start.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\fifo\app_fifo.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\log\src\nrf_log_backend_serial.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\log\src\nrf_log_frontend.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\mem_manager\mem_manager.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\timer\app_timer.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\uart\app_uart.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\uart\app_uart.h
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\app_error.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\app_error_weak.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\app_util_platform.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\nrf_assert.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\sdk_errors.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\softdevice\common\softdevice_handler\softdevice_handler.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\components\toolchain\system_nrf52.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\external\segger_rtt\RTT_Syscalls_GCC.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\external\segger_rtt\SEGGER_RTT.c
C:\(201)__LMS_UWB_2021\nRF5_SDK_12.3.0_d7731ad\external\segger_rtt\SEGGER_RTT_printf.c
main.h
platform/setting.h
